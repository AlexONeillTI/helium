{"version":3,"file":"Catalog.stories-7ae61e31.js","sources":["../../packages/catalog/src/core/utilities/parse-catalog-data/parse-aggregation-filters.ts","../../packages/catalog/src/core/utilities/parse-catalog-data/constants.ts","../../packages/catalog/src/core/utilities/parse-catalog-data/parse-query-variables.ts","../../packages/catalog/src/core/utilities/parse-catalog-data/parse-sort.ts","../../packages/catalog/src/core/utilities/parse-catalog-data/parse-response-data.ts","../../packages/catalog/src/core/utilities/parse-catalog-data/serialize-sort.ts","../../packages/catalog/src/core/utilities/manage-catalog-url/types.ts","../../packages/catalog/src/core/utilities/manage-catalog-url/utilities.ts","../../packages/catalog/src/core/utilities/manage-catalog-url/catalog-url-manager.ts","../../packages/catalog/src/core/components/catalog-provider/context.ts","../../packages/catalog/src/core/components/catalog-provider/provider.tsx","../../packages/catalog/src/core/components/height-equalizer/constants.ts","../../packages/catalog/src/core/components/height-equalizer/context.ts","../../node_modules/use-debounce/esm/useDebouncedCallback.js","../../packages/catalog/src/core/components/height-equalizer/height-equalizer.tsx","../../packages/catalog/src/core/components/height-equalizer/hook.ts","../../packages/catalog/src/core/components/height-equalizer/height-equalizer-element.tsx","../../packages/catalog/src/core/hooks/use-catalog/use-catalog.ts","../../packages/catalog/src/icons.tsx","../../packages/catalog/src/variants/filter-selector/dropdown-menu.tsx","../../packages/catalog/src/variants/filter-selector/content-type-selector.tsx","../../packages/catalog/src/variants/display-type-icon/link.tsx","../../packages/catalog/src/variants/display-type-icon/calendar.tsx","../../packages/catalog/src/variants/display-type-icon/grid.tsx","../../packages/catalog/src/variants/display-type-icon/list.tsx","../../packages/catalog/src/variants/filter-selector/display-type-selector.tsx","../../packages/catalog/src/variants/filter-selector/search-input.tsx","../../packages/catalog/src/variants/filter-selector/constants.ts","../../packages/catalog/src/variants/filter-selector/sort-selector.tsx","../../packages/catalog/src/variants/filter/wrapper.tsx","../../packages/catalog/src/variants/filter/remove-icon.tsx","../../packages/catalog/src/variants/filter/link.tsx","../../packages/catalog/src/variants/filter/aggregation.tsx","../../packages/catalog/src/variants/filter/content-type.tsx","../../packages/catalog/src/variants/filter/search-term.tsx","../../packages/catalog/src/variants/filter/token-label.tsx","../../packages/catalog/src/catalog-filters.tsx","../../packages/catalog/src/catalog-aggregations.tsx","../../packages/catalog/src/catalog-error.tsx","../../packages/catalog/src/variants/display-type-results/item-asset-block.tsx","../../packages/catalog/src/variants/display-type-results/icons.tsx","../../packages/catalog/src/variants/display-type-results/item-queue-button.tsx","../../packages/catalog/src/variants/display-type-results/calendar.tsx","../../packages/catalog/src/variants/display-type-results/item-link-wrapper.tsx","../../packages/catalog/src/variants/display-type-results/item-ribbon.tsx","../../packages/catalog/src/variants/display-type-results/utilities.ts","../../packages/catalog/src/variants/display-type-results/grid.tsx","../../packages/catalog/src/variants/display-type-results/list.tsx","../../packages/catalog/src/constants.ts","../../packages/catalog/src/catalog-results.tsx","../../packages/catalog/src/catalog-pagination.tsx","../../packages/catalog/src/catalog.tsx"],"sourcesContent":["import { AggregationFilter } from './types';\n\ntype LabelValueParam = {\n  labels: string[];\n  values: string[];\n};\n\nconst parseAggregationFilters = (filters: AggregationFilter[]): LabelValueParam => {\n  return filters.reduce(\n    (acc, { label, value }) => {\n      acc.labels.push(label);\n      acc.values.push(value);\n      return acc;\n    },\n    { labels: [], values: [] } as LabelValueParam\n  );\n};\n\nexport default parseAggregationFilters;\n","import { CatalogParams } from './types';\n\nexport const DEFAULT_PAGE = 1;\nexport const DEFAULT_PAGE_SIZE = 48;\nexport const SORT_DELIMITER = ':';\n\nexport const DEFAULT_PARAMS: CatalogParams = {\n  // default request params\n  page: DEFAULT_PAGE,\n  aggregationFilters: [],\n  contentTypes: [],\n  // default response data\n  results: [],\n  aggregations: [],\n  hasMore: false,\n  isCurated: false,\n  enabledSorts: [],\n  enabledDisplayTypes: [],\n  resultContentTypes: [],\n  contentTypeFilterEnabled: false,\n  displayStartDateEnabled: false,\n  displayAuthorsEnabled: false,\n  displayDescriptionOnCalendar: false,\n  // default general params\n  isLoading: false,\n  pageSize: DEFAULT_PAGE_SIZE\n};\n","import { CatalogContentQueryVariables } from '@thoughtindustries/content';\nimport { DEFAULT_PAGE } from './constants';\nimport parseAggregationFilters from './parse-aggregation-filters';\nimport { CatalogParams } from './types';\n\nconst parseQueryVariables = (params: CatalogParams): CatalogContentQueryVariables => {\n  const {\n    page = DEFAULT_PAGE,\n    token,\n    sort,\n    displayType,\n    resultsDisplayType,\n    aggregationFilters,\n    searchTerm,\n    contentTypes\n  } = params;\n  const sortColumn = sort?.field;\n  const sortDirection = sort?.direction;\n  const displayTypeParam = displayType || resultsDisplayType;\n  const transformedFilters = parseAggregationFilters(aggregationFilters);\n  return {\n    page,\n    sortColumn,\n    sortDirection,\n    resultsDisplayType: displayTypeParam,\n    token,\n    contentTypes,\n    query: searchTerm,\n    labels: transformedFilters.labels,\n    values: transformedFilters.values\n  };\n};\n\nexport default parseQueryVariables;\n","import { SortDirection, SortField } from '../..';\nimport { SORT_DELIMITER } from './constants';\nimport { Sort } from './types';\n\nconst parseSort = (sort: string): Sort | undefined => {\n  if (!sort) {\n    return;\n  }\n\n  const splitSort = sort.split(SORT_DELIMITER);\n\n  if (!splitSort.length) {\n    return;\n  }\n\n  const field = splitSort[0] as SortField;\n\n  if (!field) {\n    return;\n  }\n\n  const direction = splitSort.length > 1 ? (splitSort[1] as SortDirection) : undefined;\n\n  return {\n    field,\n    direction\n  };\n};\n\nexport default parseSort;\n","import { GlobalTypes, CatalogContentQuery } from '@thoughtindustries/content';\nimport { SortColumn, SortDirection } from '@thoughtindustries/content/src/graphql/global-types';\nimport { CatalogParams, Sort } from './types';\n\nconst toEnabledSorts = ({\n  sortUpdatedAtEnabled,\n  sortCreatedAtEnabled,\n  sortTitleEnabled,\n  sortPublishDateEnabled,\n  sortCourseStartDateEnabled,\n  sortRelevanceEnabled\n}: {\n  sortUpdatedAtEnabled: boolean;\n  sortCreatedAtEnabled: boolean;\n  sortTitleEnabled: boolean;\n  sortPublishDateEnabled: boolean;\n  sortCourseStartDateEnabled: boolean;\n  sortRelevanceEnabled: boolean;\n}): Sort[] => {\n  const sorts: Sort[] = [];\n  if (sortUpdatedAtEnabled) {\n    sorts.push({\n      field: SortColumn.UpdatedAt,\n      direction: SortDirection.Desc\n    });\n  }\n  if (sortCreatedAtEnabled) {\n    sorts.push({\n      field: SortColumn.CreatedAt,\n      direction: SortDirection.Desc\n    });\n  }\n  if (sortTitleEnabled) {\n    sorts.push({ field: SortColumn.Title, direction: SortDirection.Asc });\n  }\n  if (sortPublishDateEnabled) {\n    sorts.push({\n      field: SortColumn.PublishDate,\n      direction: SortDirection.Desc\n    });\n  }\n  if (sortCourseStartDateEnabled) {\n    sorts.push({\n      field: SortColumn.CourseStartDate,\n      direction: SortDirection.Asc\n    });\n  }\n  if (sortRelevanceEnabled) {\n    sorts.push({ field: SortColumn.Relevance });\n  }\n  return sorts;\n};\n\nconst toEnabledDisplayTypes = ({\n  displayTypeListEnabled,\n  displayTypeGridEnabled,\n  displayTypeCalendarEnabled\n}: {\n  displayTypeListEnabled: boolean;\n  displayTypeGridEnabled: boolean;\n  displayTypeCalendarEnabled: boolean;\n}): GlobalTypes.ContentItemDisplayType[] => {\n  const displayTypes = [];\n  if (displayTypeListEnabled) {\n    displayTypes.push(GlobalTypes.ContentItemDisplayType.List);\n  }\n  if (displayTypeGridEnabled) {\n    displayTypes.push(GlobalTypes.ContentItemDisplayType.Grid);\n  }\n  if (displayTypeCalendarEnabled) {\n    displayTypes.push(GlobalTypes.ContentItemDisplayType.Calendar);\n  }\n  return displayTypes;\n};\n\nconst parseResponseData = (data?: CatalogContentQuery, error?: Error): Partial<CatalogParams> => {\n  if (error || !data) {\n    return {\n      error: `An unexpected error occurred: ${error ? error.message : 'empty data'}`\n    };\n  }\n\n  const {\n    meta: {\n      displayBundle,\n      tokenLabel,\n      total,\n      hasMore,\n      isCurated,\n      aggregations = [],\n      contentTypes = [],\n      resultsDisplayType,\n      sortUpdatedAtEnabled,\n      sortCreatedAtEnabled,\n      sortTitleEnabled,\n      sortPublishDateEnabled,\n      sortCourseStartDateEnabled,\n      sortRelevanceEnabled,\n      displayTypeListEnabled,\n      displayTypeGridEnabled,\n      displayTypeCalendarEnabled,\n      displayStartDateEnabled,\n      displayAuthorsEnabled,\n      displayDescriptionOnCalendar,\n      contentTypeFilterEnabled,\n      queryCustomFields\n    },\n    contentItems = []\n  } = data.CatalogContent;\n\n  // transform result meta to enabled sorts\n  const enabledSorts = toEnabledSorts({\n    sortUpdatedAtEnabled,\n    sortCreatedAtEnabled,\n    sortTitleEnabled,\n    sortPublishDateEnabled,\n    sortCourseStartDateEnabled,\n    sortRelevanceEnabled\n  });\n\n  // transform result meta to enabled display types\n  const enabledDisplayTypes = toEnabledDisplayTypes({\n    displayTypeListEnabled,\n    displayTypeGridEnabled,\n    displayTypeCalendarEnabled\n  });\n\n  return {\n    error: undefined,\n    results: contentItems,\n    queryCustomFields,\n    aggregations,\n    total,\n    hasMore,\n    isCurated,\n    tokenLabel,\n    resultsDisplayType,\n    enabledSorts,\n    enabledDisplayTypes,\n    resultContentTypes: contentTypes as GlobalTypes.ContentKind[],\n    displayStartDateEnabled,\n    displayAuthorsEnabled,\n    displayDescriptionOnCalendar,\n    contentTypeFilterEnabled,\n    displayBundle\n  };\n};\n\nexport default parseResponseData;\n","import { SORT_DELIMITER } from './constants';\nimport { Sort } from './types';\n\nconst truthyFilter = <T>(x: T | false | undefined | '' | 0): x is T => !!x;\n\nconst serializeSort = (sort: Sort | string): string => {\n  if (typeof sort === 'string') {\n    return sort;\n  }\n  const { field, direction } = sort;\n  return [field, direction].filter(truthyFilter).join(SORT_DELIMITER);\n};\n\nexport default serializeSort;\n","import { AggregationFilter } from '../parse-catalog-data';\n\nexport type CatalogParsedURL = {\n  pathname: string;\n  searchString?: string;\n};\n\nexport type AggregationFilterWithComposedURL = {\n  filter: AggregationFilter;\n  url: string;\n};\n\nexport type ContentTypeWithComposedURL = {\n  contentType: string;\n  url: string;\n};\n\nexport enum CatalogURLSearchParams {\n  Token = 'token',\n  SearchTerm = 'query',\n  AggregationLabels = 'labels',\n  AggregationValues = 'values',\n  ContentTypes = 'content-types',\n  DisplayType = 'display-type',\n  Page = 'page',\n  Sort = 'sort'\n}\n\nexport type SearchTermFormHiddenField = {\n  name: string;\n  value: string;\n};\n","import { GlobalTypes } from '@thoughtindustries/content';\nimport {\n  AggregationFilter,\n  CatalogRequestParams,\n  CatalogRequestURLParams,\n  parseSort,\n  Sort\n} from '../parse-catalog-data';\nimport { CatalogURLSearchParams } from './types';\n\nconst toInteger = (str: string): number => parseInt(str, 10);\n\nconst parsePageFromQueryParams = (params: URLSearchParams): number | undefined => {\n  const page = params.get(CatalogURLSearchParams.Page);\n  if (!page) {\n    return;\n  }\n  const parsedPage = toInteger(page);\n  if (isNaN(parsedPage) || parsedPage < 1) {\n    return;\n  }\n  return parsedPage;\n};\n\nconst parseAggregationFiltersFromQueryParams = (\n  params: URLSearchParams\n): AggregationFilter[] | undefined => {\n  const labels = params.get(CatalogURLSearchParams.AggregationLabels);\n  const values = params.get(CatalogURLSearchParams.AggregationValues);\n  if (!labels || !values) {\n    return;\n  }\n  try {\n    const parsedLabels = JSON.parse(labels) as string[];\n    const parsedValues = JSON.parse(values) as string[];\n    return parsedLabels.reduce((acc, label, index) => {\n      if (index in parsedValues && parsedValues[index]) {\n        acc.push({ label, value: parsedValues[index] });\n      }\n      return acc;\n    }, [] as AggregationFilter[]);\n  } catch {\n    return;\n  }\n};\n\nconst parseTokenFromQueryParams = (params: URLSearchParams): string | undefined => {\n  const token = params.get(CatalogURLSearchParams.Token);\n  if (!token) {\n    return;\n  }\n  return token;\n};\n\nconst parseSearchTermFromQueryParams = (params: URLSearchParams): string | undefined => {\n  const searchTerm = params.get(CatalogURLSearchParams.SearchTerm);\n  if (!searchTerm) {\n    return;\n  }\n  return searchTerm;\n};\n\nconst parseContentTypesFromQueryParams = (params: URLSearchParams): string[] | undefined => {\n  const contentTypes = params.get(CatalogURLSearchParams.ContentTypes);\n  if (!contentTypes) {\n    return;\n  }\n  try {\n    return JSON.parse(contentTypes) as string[];\n  } catch {\n    return;\n  }\n};\n\nconst parseDisplayTypeFromQueryParams = (\n  params: URLSearchParams\n): GlobalTypes.ContentItemDisplayType | undefined => {\n  const displayType = params.get(\n    CatalogURLSearchParams.DisplayType\n  ) as GlobalTypes.ContentItemDisplayType;\n  if (!displayType) {\n    return;\n  }\n  return displayType;\n};\n\nconst parseSortFromQueryParams = (params: URLSearchParams): Sort | undefined => {\n  const sort = params.get(CatalogURLSearchParams.Sort);\n  if (!sort) {\n    return;\n  }\n  return parseSort(sort);\n};\n\nexport const toRequestParams = (params: URLSearchParams): Partial<CatalogRequestURLParams> => {\n  const result: Partial<CatalogRequestParams> = {};\n\n  const page = parsePageFromQueryParams(params);\n  if (page) {\n    result.page = page;\n  }\n\n  const aggregationFilters = parseAggregationFiltersFromQueryParams(params);\n  if (aggregationFilters) {\n    result.aggregationFilters = aggregationFilters;\n  }\n\n  const token = parseTokenFromQueryParams(params);\n  if (token) {\n    result.token = token;\n  }\n\n  const searchTerm = parseSearchTermFromQueryParams(params);\n  if (searchTerm) {\n    result.searchTerm = searchTerm;\n  }\n\n  const contentTypes = parseContentTypesFromQueryParams(params);\n  if (contentTypes) {\n    result.contentTypes = contentTypes;\n  }\n\n  const displayType = parseDisplayTypeFromQueryParams(params);\n  if (displayType) {\n    result.displayType = displayType;\n  }\n\n  const sort = parseSortFromQueryParams(params);\n  if (sort) {\n    result.sort = sort;\n  }\n\n  return result;\n};\n","import { GlobalTypes } from '@thoughtindustries/content';\nimport {\n  AggregationFilter,\n  CatalogRequestURLParams,\n  parseAggregationFilters,\n  Sort,\n  serializeSort\n} from '../parse-catalog-data';\nimport {\n  AggregationFilterWithComposedURL,\n  ContentTypeWithComposedURL,\n  CatalogParsedURL,\n  CatalogURLSearchParams,\n  SearchTermFormHiddenField\n} from './types';\nimport { toRequestParams } from './utilities';\n\n/**\n * The URL Manager is responsible for parsing URL and composing URLs\n * for server side routing. When user interacts with the UI, user will\n * be redirected to the new route reflecting their interactions.\n *\n * Note that only Catalog relevant query params will be handled here.\n * For some URL navigations, the `page` param will be reset.\n * For non-relevant query params, composed URLs will carry them over.\n */\n\nexport default class CatalogURLManager {\n  private readonly _pathname;\n  private readonly _searchParams;\n  private readonly _parsedRequestParams;\n  private _isCurated: boolean | undefined;\n  private _selectedDisplayType: GlobalTypes.ContentItemDisplayType | undefined;\n\n  constructor(parsedUrl: CatalogParsedURL) {\n    const { pathname, searchString } = parsedUrl;\n    this._pathname = pathname;\n    this._searchParams = new URLSearchParams(searchString || undefined);\n    this._parsedRequestParams = toRequestParams(this._searchParams);\n  }\n\n  private _composeURL(searchString: string): string {\n    if (!searchString) {\n      return this._pathname;\n    }\n    return `${this._pathname}?${searchString}`;\n  }\n\n  private _resetOrDefaultClonedParams(): URLSearchParams {\n    const clonedParams = new URLSearchParams(this._searchParams);\n    // reset existing params if is curated\n    if (this._isCurated) {\n      clonedParams.delete(CatalogURLSearchParams.AggregationLabels);\n      clonedParams.delete(CatalogURLSearchParams.AggregationValues);\n      clonedParams.delete(CatalogURLSearchParams.ContentTypes);\n      clonedParams.delete(CatalogURLSearchParams.DisplayType);\n      clonedParams.delete(CatalogURLSearchParams.Page);\n      clonedParams.delete(CatalogURLSearchParams.SearchTerm);\n      clonedParams.delete(CatalogURLSearchParams.Sort);\n      clonedParams.delete(CatalogURLSearchParams.Token);\n    }\n    // reset page for calendar display\n    if (this._selectedDisplayType === GlobalTypes.ContentItemDisplayType.Calendar) {\n      clonedParams.delete(CatalogURLSearchParams.Page);\n    }\n    return clonedParams;\n  }\n\n  setIsCurated(isCurated: boolean): void {\n    this._isCurated = isCurated;\n  }\n\n  setSelectedDisplayType(displayType: GlobalTypes.ContentItemDisplayType | undefined): void {\n    this._selectedDisplayType = displayType;\n  }\n\n  /**\n   * Get parsed request params from url search params\n   *\n   * @returns URL request params\n   */\n  getParsedRequestParams(): Partial<CatalogRequestURLParams> {\n    return this._parsedRequestParams;\n  }\n\n  composeURLForAddAggregationFilter(filter: AggregationFilter): string {\n    // use new filter if is curated or append new filter\n    const { aggregationFilters = [] } = this._isCurated ? {} : this._parsedRequestParams;\n    const newFilters = [...aggregationFilters];\n    newFilters.push(filter);\n    const transformedFilters = parseAggregationFilters(newFilters);\n\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.set(\n      CatalogURLSearchParams.AggregationLabels,\n      JSON.stringify(transformedFilters.labels)\n    );\n    clonedParams.set(\n      CatalogURLSearchParams.AggregationValues,\n      JSON.stringify(transformedFilters.values)\n    );\n    return this._composeURL(clonedParams.toString());\n  }\n\n  composeURLsForRemoveAggregationFilterBatch(\n    filters: AggregationFilter[]\n  ): AggregationFilterWithComposedURL[] {\n    // empty filter if is curated or remove the filter\n    const { aggregationFilters = [] } = this._isCurated ? {} : this._parsedRequestParams;\n    const clonedParams = this._resetOrDefaultClonedParams();\n    return filters.map(currentFilter => {\n      const { label: currentLabel, value: currentValue } = currentFilter;\n      const newClonedParams = new URLSearchParams(clonedParams);\n      const newFilters = aggregationFilters.filter(\n        ({ label, value }) => label !== currentLabel && value !== currentValue\n      );\n\n      if (newFilters.length) {\n        const transformedFilters = parseAggregationFilters(newFilters);\n        newClonedParams.set(\n          CatalogURLSearchParams.AggregationLabels,\n          JSON.stringify(transformedFilters.labels)\n        );\n        newClonedParams.set(\n          CatalogURLSearchParams.AggregationValues,\n          JSON.stringify(transformedFilters.values)\n        );\n      } else {\n        newClonedParams.delete(CatalogURLSearchParams.AggregationLabels);\n        newClonedParams.delete(CatalogURLSearchParams.AggregationValues);\n      }\n\n      // reset page\n      newClonedParams.delete(CatalogURLSearchParams.Page);\n\n      return {\n        filter: currentFilter,\n        url: this._composeURL(newClonedParams.toString())\n      };\n    });\n  }\n\n  composeURLForSetPage(page: number): string {\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.set(CatalogURLSearchParams.Page, page.toString());\n    return this._composeURL(clonedParams.toString());\n  }\n\n  composeURLForRemoveToken(): string {\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.delete(CatalogURLSearchParams.Token);\n    // reset page\n    clonedParams.delete(CatalogURLSearchParams.Page);\n    return this._composeURL(clonedParams.toString());\n  }\n\n  composeURLForAddContentType(contentType: string): string {\n    // use new content type if is curated or append new content type\n    const { contentTypes = [] } = this._isCurated ? {} : this._parsedRequestParams;\n    const newContentTypes = [...contentTypes];\n    newContentTypes.push(contentType);\n\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.set(CatalogURLSearchParams.ContentTypes, JSON.stringify(newContentTypes));\n    return this._composeURL(clonedParams.toString());\n  }\n\n  composeURLForRemoveContentTypeBatch(filters: string[]): ContentTypeWithComposedURL[] {\n    // empty content type if is curated or remove the content type\n    const { contentTypes = [] } = this._isCurated ? {} : this._parsedRequestParams;\n    const clonedParams = this._resetOrDefaultClonedParams();\n    return filters.map(currentContentType => {\n      const newClonedParams = new URLSearchParams(clonedParams);\n      const newContentTypes = [...contentTypes].filter(item => item !== currentContentType);\n\n      if (newContentTypes.length) {\n        newClonedParams.set(CatalogURLSearchParams.ContentTypes, JSON.stringify(newContentTypes));\n      } else {\n        newClonedParams.delete(CatalogURLSearchParams.ContentTypes);\n      }\n\n      return {\n        contentType: currentContentType,\n        url: this._composeURL(newClonedParams.toString())\n      };\n    });\n  }\n\n  composeURLForSetSearchTermForm(): string {\n    return this._composeURL('');\n  }\n\n  composeSearchTermFormHiddenFields(): SearchTermFormHiddenField[] {\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.delete(CatalogURLSearchParams.Page);\n    clonedParams.delete(CatalogURLSearchParams.SearchTerm);\n    const hiddenFields = [];\n    for (const [name, value] of clonedParams.entries()) {\n      hiddenFields.push({ name, value });\n    }\n    return hiddenFields;\n  }\n\n  composeURLForRemoveSearchTerm(): string {\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.delete(CatalogURLSearchParams.SearchTerm);\n    return this._composeURL(clonedParams.toString());\n  }\n\n  composeURLForSetDisplayType(displayType: GlobalTypes.ContentItemDisplayType): string {\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.set(CatalogURLSearchParams.DisplayType, displayType.toString());\n    // `calendar` displayType results are pre-filtered, so existing\n    // contentType selections are cleared.\n    if (displayType === GlobalTypes.ContentItemDisplayType.Calendar) {\n      clonedParams.delete(CatalogURLSearchParams.ContentTypes);\n    }\n    return this._composeURL(clonedParams.toString());\n  }\n\n  composeURLForSetSort(sort: Sort): string {\n    const clonedParams = this._resetOrDefaultClonedParams();\n    clonedParams.set(CatalogURLSearchParams.Sort, serializeSort(sort));\n    return this._composeURL(clonedParams.toString());\n  }\n}\n","import { createContext } from 'react';\nimport { CatalogContextType } from './types';\n\nconst CatalogContext = createContext<CatalogContextType | undefined>(undefined);\n\nexport default CatalogContext;\n","import { useCatalogContentQuery } from '@thoughtindustries/content';\nimport React, { FC, useRef, useState } from 'react';\nimport { CatalogURLManager } from '../../utilities/manage-catalog-url';\nimport {\n  CatalogParams,\n  parseQueryVariables,\n  parseResponseData,\n  DEFAULT_PARAMS\n} from '../../utilities/parse-catalog-data';\nimport CatalogContext from './context';\nimport { CatalogProviderProps } from './types';\n\n/**\n * Catalog provider to provide access to catalog params and url manager.\n * The provider will be rendered on server side. Upon server rendering, it will transform\n * the server url search params to fetch catalog data. Data will be hydrated to the client side.\n * A single instance of the catalog url manager will be maintained by the\n * provider upon each server request.\n *\n * User interface will allow user to do server side navigation.\n */\nconst CatalogProvider: FC<CatalogProviderProps> = ({ children, config }) => {\n  const { parsedUrl } = config;\n\n  const [urlManager] = useState<CatalogURLManager>(new CatalogURLManager(parsedUrl));\n  const [params, setParams] = useState<CatalogParams | undefined>(undefined);\n\n  // parse url search params\n  const parsedUrlRequestParams = urlManager.getParsedRequestParams();\n  const queryVariables = parseQueryVariables({\n    ...DEFAULT_PARAMS,\n    ...parsedUrlRequestParams\n  });\n\n  // On server side, the query hook will wait till the loading stops\n  const { data, error, loading } = useCatalogContentQuery({\n    variables: {\n      ...queryVariables\n    }\n  });\n\n  const didInitialized = useRef(false);\n  if (!didInitialized.current && !loading) {\n    const newParams = {\n      ...DEFAULT_PARAMS,\n      ...parsedUrlRequestParams,\n      ...parseResponseData(data, error)\n    };\n    setParams(newParams);\n    urlManager.setIsCurated(newParams.isCurated);\n    urlManager.setSelectedDisplayType(newParams.displayType || newParams.resultsDisplayType);\n\n    didInitialized.current = true;\n  }\n\n  if (!params) {\n    return null;\n  }\n\n  return (\n    <CatalogContext.Provider value={{ urlManager, params }}>{children}</CatalogContext.Provider>\n  );\n};\n\nexport default CatalogProvider;\n","export const DEFAULT_TIMEOUT = 500;\nexport const DEFAULT_ANIMATION_SPEED = 0.25;\nexport const DEFAULT_ELEMENT_TYPE = 'div';\n","import { createContext } from 'react';\nimport { HeightEqualizerContextType } from './types';\n\nconst HeightEqualizerContext = createContext<HeightEqualizerContextType | undefined>(undefined);\n\nexport default HeightEqualizerContext;\n","import { useRef, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = useRef(null);\n    var lastInvokeTime = useRef(0);\n    var timerId = useRef(null);\n    var lastArgs = useRef([]);\n    var lastThis = useRef();\n    var result = useRef();\n    var funcRef = useRef(func);\n    var mounted = useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    // You may have a question, why we have so many code under the useMemo definition.\n    //\n    // This was made as we want to escape from useCallback hell and\n    // not to initialize a number of functions each time useDebouncedCallback is called.\n    //\n    // It means that we have less garbage for our GC calls which improves performance.\n    // Also, it makes this library smaller.\n    //\n    // And the last reason, that the code without lots of useCallback with deps is easier to read.\n    // You have only one place for that.\n    var debounced = useMemo(function () {\n        var invokeFunc = function (time) {\n            var args = lastArgs.current;\n            var thisArg = lastThis.current;\n            lastArgs.current = lastThis.current = null;\n            lastInvokeTime.current = time;\n            return (result.current = funcRef.current.apply(thisArg, args));\n        };\n        var startTimer = function (pendingFunc, wait) {\n            if (useRAF)\n                cancelAnimationFrame(timerId.current);\n            timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n        };\n        var shouldInvoke = function (time) {\n            if (!mounted.current)\n                return false;\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            // Either this is the first call, activity has stopped and we're at the\n            // trailing edge, the system time has gone backwards and we're treating\n            // it as the trailing edge, or we've hit the `maxWait` limit.\n            return (!lastCallTime.current ||\n                timeSinceLastCall >= wait ||\n                timeSinceLastCall < 0 ||\n                (maxing && timeSinceLastInvoke >= maxWait));\n        };\n        var trailingEdge = function (time) {\n            timerId.current = null;\n            // Only invoke if we have `lastArgs` which means `func` has been\n            // debounced at least once.\n            if (trailing && lastArgs.current) {\n                return invokeFunc(time);\n            }\n            lastArgs.current = lastThis.current = null;\n            return result.current;\n        };\n        var timerExpired = function () {\n            var time = Date.now();\n            if (shouldInvoke(time)) {\n                return trailingEdge(time);\n            }\n            // https://github.com/xnimorz/use-debounce/issues/97\n            if (!mounted.current) {\n                return;\n            }\n            // Remaining wait calculation\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            var timeWaiting = wait - timeSinceLastCall;\n            var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n            // Restart the timer\n            startTimer(timerExpired, remainingWait);\n        };\n        var func = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var time = Date.now();\n            var isInvoking = shouldInvoke(time);\n            lastArgs.current = args;\n            lastThis.current = _this;\n            lastCallTime.current = time;\n            if (isInvoking) {\n                if (!timerId.current && mounted.current) {\n                    // Reset any `maxWait` timer.\n                    lastInvokeTime.current = lastCallTime.current;\n                    // Start the timer for the trailing edge.\n                    startTimer(timerExpired, wait);\n                    // Invoke the leading edge.\n                    return leading ? invokeFunc(lastCallTime.current) : result.current;\n                }\n                if (maxing) {\n                    // Handle invocations in a tight loop.\n                    startTimer(timerExpired, wait);\n                    return invokeFunc(lastCallTime.current);\n                }\n            }\n            if (!timerId.current) {\n                startTimer(timerExpired, wait);\n            }\n            return result.current;\n        };\n        func.cancel = function () {\n            if (timerId.current) {\n                useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n            }\n            lastInvokeTime.current = 0;\n            lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n        };\n        func.isPending = function () {\n            return !!timerId.current;\n        };\n        func.flush = function () {\n            return !timerId.current ? result.current : trailingEdge(Date.now());\n        };\n        return func;\n    }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n    return debounced;\n}\n","import React, { useCallback, useState, useEffect } from 'react';\nimport { useWindowEventListener } from '@thoughtindustries/hooks';\nimport { DEFAULT_ANIMATION_SPEED, DEFAULT_TIMEOUT } from './constants';\nimport HeightEqualizerContext from './context';\nimport { HeightEqualizerContextType, HeightEqualizerProps } from './types';\nimport { useDebouncedCallback } from 'use-debounce';\n\nconst HeightEqualizer = ({\n  children,\n  timeout = DEFAULT_TIMEOUT,\n  animationSpeed = DEFAULT_ANIMATION_SPEED\n}: HeightEqualizerProps) => {\n  // States\n  const [sizes, setSizes] = useState<HeightEqualizerContextType['sizes']>([]);\n  const [temporarySizes, setTemporarySizes] = useState<\n    HeightEqualizerContextType['temporarySizes']\n  >([]);\n  const [update, setUpdate] = useState<HeightEqualizerContextType['update']>(false);\n  const [originalChildrenCount, setOriginalChildrenCount] =\n    useState<HeightEqualizerContextType['originalChildrenCount']>(0);\n  const [childrenCount, setChildrenCount] =\n    useState<HeightEqualizerContextType['childrenCount']>(0);\n\n  const handleUpdate = useCallback(() => setUpdate(value => !value), []);\n  const debouncedHandleUpdate = useDebouncedCallback(handleUpdate, timeout);\n  useWindowEventListener('resize', debouncedHandleUpdate);\n\n  // Force calculate height when children count changed\n  useEffect(() => {\n    handleUpdate();\n  }, [originalChildrenCount, handleUpdate]);\n\n  // Choose only highest heights when all children calculated\n  // Set right sizes\n  // Reset temp values\n  useEffect(() => {\n    // statement (<= instead ===) in case when new children will be add\n    if (originalChildrenCount <= childrenCount) {\n      let filteredSizes: HeightEqualizerContextType['sizes'] = [];\n      temporarySizes.map(filteredSize => {\n        const name = filteredSize.name;\n        const height = filteredSize.height;\n        const elementIndex = filteredSizes.findIndex(e => e.name === name);\n        if (elementIndex > -1) {\n          const savedHeight = filteredSizes[elementIndex].height;\n          if (savedHeight < height) {\n            filteredSizes[elementIndex].height = height;\n          }\n        } else {\n          filteredSizes = [\n            ...filteredSizes,\n            {\n              name,\n              height\n            }\n          ];\n        }\n      });\n      setSizes(filteredSizes);\n\n      // Reset\n      setTemporarySizes([]);\n      setChildrenCount(0);\n    }\n  }, [originalChildrenCount, childrenCount, temporarySizes]);\n\n  return (\n    <HeightEqualizerContext.Provider\n      value={{\n        sizes,\n        temporarySizes,\n        update,\n        animationSpeed,\n        originalChildrenCount,\n        childrenCount,\n        setTemporarySizes,\n        setOriginalChildrenCount,\n        setChildrenCount\n      }}\n    >\n      {children}\n    </HeightEqualizerContext.Provider>\n  );\n};\n\nHeightEqualizer.displayName = 'HeightEqualizer';\n\nexport default HeightEqualizer;\n","import React from 'react';\nimport HeightEqualizerContext from './context';\n\n/**\n * The `useHeightEqualizer` hook provides access to the height equalizer context. It must be a descendent of a `HeightEqualizer` component.\n */\nexport default function useHeightEqualizer() {\n  const context = React.useContext(HeightEqualizerContext);\n\n  if (!context) {\n    throw new Error('Expected a Height Equalizer Context, but no context was found');\n  }\n\n  return context;\n}\n","import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport useHeightEqualizer from './hook';\nimport { HeightEqualizerElementProps } from './types';\nimport { DEFAULT_ELEMENT_TYPE } from './constants';\n\nconst HeightEqualizerElement = ({\n  children = '',\n  name,\n  as,\n  className\n}: HeightEqualizerElementProps) => {\n  const {\n    sizes,\n    update,\n    setTemporarySizes,\n    setOriginalChildrenCount,\n    setChildrenCount,\n    animationSpeed\n  } = useHeightEqualizer();\n\n  // States\n  const [height, setHeight] = useState<number>();\n\n  // Refs to wrapper element\n  const innerElement = useRef<HTMLElement>(null);\n\n  // Calculate method\n  const getHeight = useCallback(() => {\n    if (!innerElement.current) {\n      return;\n    }\n    const tempHeight = innerElement.current.style.getPropertyValue('height');\n    innerElement.current.style.removeProperty('height');\n    const newHeight = innerElement.current.offsetHeight;\n    innerElement.current.style.setProperty('height', tempHeight);\n    setTemporarySizes(values => {\n      return [\n        ...values,\n        {\n          name,\n          height: newHeight\n        }\n      ];\n    });\n    setChildrenCount(value => value + 1);\n  }, [setTemporarySizes, setChildrenCount, name]);\n\n  // Init\n  useEffect(() => {\n    // Report self to parent component (to calculate how many components exist)\n    setOriginalChildrenCount(value => value + 1);\n    return () => {\n      setOriginalChildrenCount(value => value - 1);\n    };\n  }, [setOriginalChildrenCount]);\n\n  // Call calculate method\n  useEffect(() => {\n    getHeight();\n  }, [update, getHeight]);\n\n  // Set sizes on elements in DOM\n  useEffect(() => {\n    const elementIndex: number = sizes.findIndex(e => e.name === name);\n\n    if (sizes && sizes[elementIndex] && sizes[elementIndex].height) {\n      setHeight(sizes[elementIndex].height);\n    }\n  }, [sizes, name]);\n\n  // stylings\n  const inlineStyles = {\n    height: `${height}px`,\n    transitionDuration: animationSpeed === 0 ? '' : `${animationSpeed}s`\n  };\n\n  return React.createElement(\n    as ?? DEFAULT_ELEMENT_TYPE,\n    {\n      ref: innerElement,\n      className,\n      style: inlineStyles\n    },\n    children\n  );\n};\n\nHeightEqualizerElement.displayName = 'HeightEqualizerElement';\n\nexport default HeightEqualizerElement;\n","import React from 'react';\nimport { CatalogContext } from '../../components/catalog-provider';\n\n/**\n * The `useCatalog` hook provides access to the catalog context. It must be a descendent of a `CatalogProvider` component.\n */\nexport default function useCatalog() {\n  const context = React.useContext(CatalogContext);\n\n  if (!context) {\n    throw new Error('Expected a Catalog Context, but no Catalog Context was found');\n  }\n\n  return context;\n}\n","import React from 'react';\n\nexport const ArrowDownIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    className=\"w-full h-full\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n  </svg>\n);\n\nexport const ArrowRightIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    className=\"w-full h-full\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n  </svg>\n);\n\nexport const CheckIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    className=\"w-full h-full\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n  </svg>\n);\n","import React, { createRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useOnClickOutside } from '@thoughtindustries/hooks';\nimport { ArrowDownIcon, ArrowRightIcon, CheckIcon } from '../../icons';\n\nconst DropdownMenu = ({\n  id,\n  label,\n  options\n}: {\n  id: string;\n  label: string;\n  options: {\n    isSelected?: boolean;\n    link: string;\n    name: string;\n  }[];\n}): JSX.Element => {\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const wrapperRef = createRef<HTMLDivElement>();\n  useOnClickOutside(wrapperRef, () => {\n    if (!isExpanded) return;\n    setIsExpanded(!isExpanded);\n  });\n\n  // event handler\n  const handleClick = () => setIsExpanded(!isExpanded);\n\n  // derived values\n  const hasOptions = !!options.length;\n\n  // stylings\n  const wrapperClassnames =\n    'relative w-full h-10 md:h-full px-2 md:px-0 text-sm border-solid border border-gray-400 bg-gray-100 md:border-none md:bg-transparent';\n  const buttonBaseClassnames = 'flex w-full h-full justify-between items-center';\n  const buttonStatusClassnames = !hasOptions ? 'text-gray-400' : '';\n  const dropdownWrapperBaseClassnames = 'absolute z-50 mt-px -left-0.5 md:-left-4';\n  const dropdownWrapperClassnames = isExpanded ? 'visible' : 'invisible';\n  const dropdownWrapperStyles = {\n    minWidth: '160px'\n  };\n  const listItemClassnames = 'p-px bg-white';\n  const listItemLinkClassnames =\n    'transition-colors ease-in-out duration-200 text-accent hover:text-link-hover bg-gray-100 block text-sm px-4 py-1.5';\n  const selectedMarkerClassnames = 'absolute w-4 h-4 text-accent left-0';\n\n  // components\n  const selectedMarker = (\n    <i className={selectedMarkerClassnames}>\n      <CheckIcon />\n    </i>\n  );\n\n  return (\n    <div className={wrapperClassnames} ref={wrapperRef}>\n      <button\n        className={clsx(buttonBaseClassnames, buttonStatusClassnames)}\n        onClick={handleClick}\n        disabled={!hasOptions}\n      >\n        {label}\n        <span className=\"w-4 h-4\">\n          {isExpanded && <ArrowDownIcon />}\n          {!isExpanded && <ArrowRightIcon />}\n        </span>\n      </button>\n      <ul\n        id={id}\n        className={clsx(dropdownWrapperBaseClassnames, dropdownWrapperClassnames)}\n        style={dropdownWrapperStyles}\n      >\n        {options.map(({ isSelected, link, name }, index) => (\n          <li key={`${id}-item-${index}`} className={listItemClassnames}>\n            <a href={link} className={listItemLinkClassnames}>\n              {isSelected && selectedMarker}\n              {name}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nDropdownMenu.displayName = 'DropdownMenu';\nexport default DropdownMenu;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogParams, useCatalog } from '../../core';\nimport DropdownMenu from './dropdown-menu';\n\nconst ContentTypeSelector = ({\n  contentTypes,\n  resultContentTypes\n}: Pick<CatalogParams, 'contentTypes' | 'resultContentTypes'>): JSX.Element => {\n  const { t } = useTranslation();\n  const { urlManager } = useCatalog();\n  const contentTypeFieldLabel = t('filter-by');\n  const filters = resultContentTypes\n    .filter(item => !contentTypes.includes(item))\n    .map(item => ({\n      name: item,\n      link: urlManager.composeURLForAddContentType(item)\n    }));\n\n  return <DropdownMenu id=\"content-type-options\" label={contentTypeFieldLabel} options={filters} />;\n};\n\nContentTypeSelector.displayName = 'ContentTypeSelector';\nexport default ContentTypeSelector;\n","import React, { ReactNode } from 'react';\nimport clsx from 'clsx';\n\nconst DisplayTypeIconLink = ({\n  isActive,\n  link,\n  children\n}: {\n  isActive: boolean;\n  link: string;\n  children: ReactNode;\n}): JSX.Element => {\n  const baseClassnames =\n    'bg-gray-100 hover:bg-white md:bg-transparent border border-solid border-gray-400 rounded-sm hover:border-gray-500 md:rounded-none font-normal font-secondary text-gray-800 text-sm text-center no-underline leading-none hover:text-gray-800 md:text-gray-400 cursor-pointer inline-block relative py-1 px-4 mb-4 transition-colors ease-in-out duration-200 md:h-12 md:w-12 md:mb-0 md:p-0 flex justify-center items-center';\n  const activeClassnames = isActive\n    ? 'cursor-default pointer-events-none bg-accent hover:bg-accent-hover border-accent hover:border-accent-hover text-accent-contrast hover:text-accent-contrast md:text-black md:hover:text-black md:hover:bg-transparent'\n    : '';\n  return (\n    <a className={clsx(baseClassnames, activeClassnames)} href={link}>\n      {children}\n    </a>\n  );\n};\n\nDisplayTypeIconLink.displayName = 'DisplayTypeIconLink';\n\nexport default DisplayTypeIconLink;\n","import React from 'react';\nimport Link from './link';\n\nconst DisplayTypeIconCalendar = ({\n  isActive,\n  link\n}: {\n  isActive: boolean;\n  link: string;\n}): JSX.Element => (\n  <Link isActive={isActive} link={link}>\n    <i aria-label=\"calendar view\" className=\"w-5 h-5\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"w-full h-full\"\n        viewBox=\"0 0 48 48\"\n        stroke=\"currentColor\"\n        strokeWidth={3}\n      >\n        <circle cx=\"24\" cy=\"24\" r=\"20\" fill=\"none\" />\n        <circle cx=\"24\" cy=\"24\" r=\"2\" fill=\"currentColor\" />\n        <line x1=\"20\" y1=\"2\" x2=\"28\" y2=\"2\" />\n        <line x1=\"24\" y1=\"24\" x2=\"24\" y2=\"8\" />\n      </svg>\n    </i>\n  </Link>\n);\n\nDisplayTypeIconCalendar.displayName = 'DisplayTypeIconCalendar';\n\nexport default DisplayTypeIconCalendar;\n","import React from 'react';\nimport Link from './link';\n\nconst DisplayTypeIconGrid = ({\n  isActive,\n  link\n}: {\n  isActive: boolean;\n  link: string;\n}): JSX.Element => (\n  <Link isActive={isActive} link={link}>\n    <i aria-label=\"grid view\" className=\"w-5 h-5\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"w-full h-full\"\n        viewBox=\"0 0 32 32\"\n        stroke=\"currentColor\"\n        strokeWidth={3}\n      >\n        <rect x=\"4\" y=\"4\" width=\"24\" height=\"24\" fill=\"none\" />\n        <line x1=\"16\" y1=\"28\" x2=\"16\" y2=\"4\" />\n        <line x1=\"4\" y1=\"16\" x2=\"28\" y2=\"16\" />\n      </svg>\n    </i>\n  </Link>\n);\n\nDisplayTypeIconGrid.displayName = 'DisplayTypeIconGrid';\n\nexport default DisplayTypeIconGrid;\n","import React from 'react';\nimport Link from './link';\n\nconst DisplayTypeIconList = ({\n  isActive,\n  link\n}: {\n  isActive: boolean;\n  link: string;\n}): JSX.Element => (\n  <Link isActive={isActive} link={link}>\n    <i aria-label=\"list view\" className=\"w-5 h-5\">\n      <svg\n        className=\"w-full h-full\"\n        viewBox=\"0 0 48 48\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"currentColor\"\n      >\n        <path d=\"M44.88,13H15.13A2.07,2.07,0,0,1,13,11a2.07,2.07,0,0,1,2.13-2H44.88A2.07,2.07,0,0,1,47,11,2.07,2.07,0,0,1,44.88,13Z\" />\n        <path d=\"M44.88,25H15.13a2,2,0,1,1,0-4H44.88A2,2,0,1,1,44.88,25Z\" />\n        <path d=\"M44.88,37H15.13a2,2,0,1,1,0-4H44.88A2,2,0,1,1,44.88,37Z\" />\n        <circle cx=\"6\" cy=\"11\" r=\"3\" />\n        <circle cx=\"6\" cy=\"23\" r=\"3\" />\n        <circle cx=\"6\" cy=\"35\" r=\"3\" />\n      </svg>\n    </i>\n  </Link>\n);\n\nDisplayTypeIconList.displayName = 'DisplayTypeIconList';\n\nexport default DisplayTypeIconList;\n","import React from 'react';\nimport { GlobalTypes } from '@thoughtindustries/content';\nimport { CatalogParams, useCatalog } from '../../core';\nimport {\n  DisplayTypeIconGrid,\n  DisplayTypeIconList,\n  DisplayTypeIconCalendar\n} from '../display-type-icon';\n\nconst getDisplayTypeComponent = (displayType: GlobalTypes.ContentItemDisplayType) => {\n  switch (displayType) {\n    case GlobalTypes.ContentItemDisplayType.List: {\n      return DisplayTypeIconList;\n    }\n    case GlobalTypes.ContentItemDisplayType.Grid: {\n      return DisplayTypeIconGrid;\n    }\n    case GlobalTypes.ContentItemDisplayType.Calendar: {\n      return DisplayTypeIconCalendar;\n    }\n    default: {\n      const _exhaustiveCheck: never = displayType;\n      return _exhaustiveCheck;\n    }\n  }\n};\n\nconst DisplayTypeSelector = ({\n  activeDisplayType,\n  enabledDisplayTypes\n}: Pick<CatalogParams, 'enabledDisplayTypes'> & {\n  activeDisplayType: CatalogParams['displayType'] | CatalogParams['resultsDisplayType'];\n}): JSX.Element => {\n  const { urlManager } = useCatalog();\n  const selectors = enabledDisplayTypes.map(item => {\n    const isActive = item === activeDisplayType;\n    const props = {\n      isActive,\n      link: urlManager.composeURLForSetDisplayType(item)\n    };\n    const Component = getDisplayTypeComponent(item);\n    return <Component key={item} {...props} />;\n  });\n  return <div className=\"flex flex-wrap gap-x-1 justify-end\">{selectors}</div>;\n};\n\nDisplayTypeSelector.displayName = 'DisplayTypeSelector';\nexport default DisplayTypeSelector;\n","import React, { ChangeEvent, createRef, SyntheticEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogURLSearchParams, SearchTermFormHiddenField } from '../../core';\n\nconst SearchInput = ({\n  formAction,\n  hiddenFields\n}: {\n  formAction: string;\n  hiddenFields: SearchTermFormHiddenField[];\n}): JSX.Element => {\n  const [inputValue, setInputValue] = useState<string>('');\n  const formRef = createRef<HTMLFormElement>();\n  const { t } = useTranslation();\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(evt.target.value);\n  };\n  const handleSearch = (evt: SyntheticEvent) => {\n    evt.preventDefault();\n    if (inputValue) {\n      formRef.current?.submit();\n    }\n  };\n  return (\n    <div className=\"md:h-full relative\">\n      <form\n        method=\"GET\"\n        action={formAction}\n        onSubmit={handleSearch}\n        ref={formRef}\n        className=\"md:h-full\"\n      >\n        <input\n          className=\"border border-solid border-gray-400 shadow md:h-full md:m-0 md:border-none md:shadow-none w-full focus:outline-none p-2 text-sm\"\n          placeholder={t('catalog-search-placeholder')}\n          aria-label=\"Catalog Search\"\n          type=\"text\"\n          value={inputValue}\n          onChange={handleChange}\n          name={CatalogURLSearchParams.SearchTerm}\n        />\n        {hiddenFields.map(({ name, value }, index) => (\n          <input\n            key={`search-form-hidden-input-${index}`}\n            type=\"hidden\"\n            name={name}\n            value={value}\n          />\n        ))}\n        <span className=\"mb-0 absolute h-full top-0 right-0 p-1 table\" onClick={handleSearch}>\n          <i\n            className=\"text-2xl cursor-pointer py-0 px-3 text-accent table-cell align-middle\"\n            aria-label=\"search\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 30 30\"\n              width=\"30px\"\n              height=\"30px\"\n              fill=\"currentColor\"\n            >\n              <path d=\"M 13 3 C 7.4889971 3 3 7.4889971 3 13 C 3 18.511003 7.4889971 23 13 23 C 15.396508 23 17.597385 22.148986 19.322266 20.736328 L 25.292969 26.707031 A 1.0001 1.0001 0 1 0 26.707031 25.292969 L 20.736328 19.322266 C 22.148986 17.597385 23 15.396508 23 13 C 23 7.4889971 18.511003 3 13 3 z M 13 5 C 17.430123 5 21 8.5698774 21 13 C 21 17.430123 17.430123 21 13 21 C 8.5698774 21 5 17.430123 5 13 C 5 8.5698774 8.5698774 5 13 5 z\" />\n            </svg>\n          </i>\n        </span>\n      </form>\n    </div>\n  );\n};\n\nSearchInput.displayName = 'SearchInput';\nexport default SearchInput;\n","import { SortField } from '../../core';\nimport { GlobalTypes } from '@thoughtindustries/content';\n\nexport const localizedSortMapping: { [key in SortField]: string } = {\n  [GlobalTypes.SortColumn.UpdatedAt]: 'catalog.sort-updated',\n  [GlobalTypes.SortColumn.CreatedAt]: 'catalog.sort-created',\n  [GlobalTypes.SortColumn.Title]: 'catalog.sort-title',\n  [GlobalTypes.SortColumn.PublishDate]: 'catalog.sort-publish-date',\n  [GlobalTypes.SortColumn.CourseStartDate]: 'catalog.sort-course-start-date',\n  [GlobalTypes.SortColumn.Relevance]: 'catalog.sort-relevance'\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogParams, useCatalog } from '../../core';\nimport { localizedSortMapping } from './constants';\nimport DropdownMenu from './dropdown-menu';\n\nconst SortSelector = ({\n  enabledSorts,\n  sort\n}: Pick<CatalogParams, 'enabledSorts' | 'sort'>): JSX.Element => {\n  const { t } = useTranslation();\n  const { urlManager } = useCatalog();\n  const { field: selectedField, direction: selectedDirection } = sort || {};\n  const label = t('catalog.sort-by');\n  const filters = enabledSorts.map(item => ({\n    isSelected: selectedField === item.field && selectedDirection === item.direction,\n    name: t(localizedSortMapping[item.field]),\n    link: urlManager.composeURLForSetSort(item)\n  }));\n\n  return <DropdownMenu id=\"sort-options\" label={label} options={filters} />;\n};\n\nSortSelector.displayName = 'SortSelector';\nexport default SortSelector;\n","import React, { FC, ReactNode } from 'react';\n\ninterface FilterWrapperProps {\n  children: ReactNode;\n}\nconst FilterWrapper: FC<FilterWrapperProps> = ({ children }) => (\n  <span className=\"py-3 ml-1 inline-block\">{children}</span>\n);\n\nFilterWrapper.displayName = 'FilterWrapper';\n\nexport default FilterWrapper;\n","import React from 'react';\n\nconst RemoveIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"w-full h-full\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n  </svg>\n);\n\nexport default RemoveIcon;\n","import React from 'react';\nimport Wrapper from './wrapper';\nimport RemoveIcon from './remove-icon';\n\nconst FilterLink = ({ label, href }: { label: string; href: string }): JSX.Element => (\n  <Wrapper>\n    <a href={href} className=\"flex items-center gap-x-1 text-accent hover:text-link-hover\">\n      <i aria-label=\"remove\" className=\"w-3 h-3\">\n        <RemoveIcon />\n      </i>\n      {label}\n    </a>\n  </Wrapper>\n);\n\nFilterLink.displayName = 'FilterLink';\n\nexport default FilterLink;\n","import React from 'react';\nimport Link from './link';\n\nconst FilterAggregation = ({\n  label,\n  removeFilterHref\n}: {\n  label: string;\n  removeFilterHref: string;\n}): JSX.Element => <Link label={label} href={removeFilterHref} />;\n\nFilterAggregation.displayName = 'FilterAggregation';\n\nexport default FilterAggregation;\n","import React from 'react';\nimport { CatalogParams } from '../../core';\nimport Link from './link';\n\nconst FilterContentType = ({\n  contentType,\n  removeFilterHref\n}: {\n  contentType: CatalogParams['contentTypes'][0];\n  removeFilterHref: string;\n}): JSX.Element => <Link label={contentType} href={removeFilterHref} />;\n\nFilterContentType.displayName = 'FilterContentType';\n\nexport default FilterContentType;\n","import React from 'react';\nimport { CatalogParams } from '../../core';\nimport Link from './link';\n\nconst FilterSearchTerm = ({\n  searchTerm,\n  removeFilterHref\n}: {\n  searchTerm: CatalogParams['searchTerm'];\n  removeFilterHref: string;\n}): JSX.Element => <Link label={searchTerm as string} href={removeFilterHref} />;\n\nFilterSearchTerm.displayName = 'FilterSearchTerm';\n\nexport default FilterSearchTerm;\n","import React from 'react';\nimport { CatalogParams } from '../../core';\nimport Link from './link';\n\nconst FilterTokenLabel = ({\n  tokenLabel,\n  removeFilterHref\n}: {\n  tokenLabel: CatalogParams['tokenLabel'];\n  removeFilterHref: string;\n}): JSX.Element => <Link label={tokenLabel as string} href={removeFilterHref} />;\n\nFilterTokenLabel.displayName = 'FilterTokenLabel';\n\nexport default FilterTokenLabel;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { useCatalog } from './core';\nimport { GlobalTypes } from '@thoughtindustries/content';\nimport {\n  ContentTypeSelector,\n  DisplayTypeSelector,\n  SearchInput,\n  SortSelector\n} from './variants/filter-selector';\nimport {\n  FilterContentType,\n  FilterSearchTerm,\n  FilterTokenLabel,\n  FilterAggregation\n} from './variants/filter';\n\nconst CatalogFilters = (): JSX.Element => {\n  const { params, urlManager } = useCatalog();\n  const {\n    searchTerm,\n    aggregationFilters,\n    token,\n    tokenLabel,\n    contentTypes,\n    resultContentTypes,\n    contentTypeFilterEnabled,\n    enabledSorts,\n    sort,\n    displayType,\n    enabledDisplayTypes,\n    resultsDisplayType\n  } = params;\n\n  // derived values\n  const hasActiveFilters = !!searchTerm || !!aggregationFilters.length || !!tokenLabel;\n  const hasActiveSelections = hasActiveFilters || !!contentTypes.length;\n  const activeDisplayType = displayType || resultsDisplayType;\n  const isActiveDisplayTypeCalendar =\n    activeDisplayType === GlobalTypes.ContentItemDisplayType.Calendar;\n  const enableContentTypeFilter = contentTypeFilterEnabled && !isActiveDisplayTypeCalendar;\n  const enableSort = !!enabledSorts.length && !isActiveDisplayTypeCalendar;\n  const hasActiveSelectionsOrContentTypeFilterEnabled =\n    hasActiveSelections || enableContentTypeFilter;\n  const enableDisplayType = !!enabledDisplayTypes.length;\n\n  // stylings\n  const columnClassnamesWithSort = enableSort ? 'md:col-span-10' : 'md:col-span-full';\n  const columnClassnames = hasActiveSelectionsOrContentTypeFilterEnabled\n    ? 'md:col-span-3'\n    : columnClassnamesWithSort;\n\n  // components\n  const filterContentTypes = urlManager\n    .composeURLForRemoveContentTypeBatch(contentTypes)\n    .map(({ contentType, url }, index) => (\n      <FilterContentType\n        key={`content-type-filter-${index}`}\n        contentType={contentType}\n        removeFilterHref={url}\n      />\n    ));\n  const filterSearchTerm = searchTerm && (\n    <FilterSearchTerm\n      searchTerm={searchTerm}\n      removeFilterHref={urlManager.composeURLForRemoveSearchTerm()}\n    />\n  );\n  const filterAggregations = urlManager\n    .composeURLsForRemoveAggregationFilterBatch(aggregationFilters)\n    .map(({ filter, url }, index) => (\n      <FilterAggregation\n        key={`catalog-aggregation-filter-${index}`}\n        label={filter.value}\n        removeFilterHref={url}\n      />\n    ));\n  const filterTokenLabel = token && tokenLabel && (\n    <FilterTokenLabel\n      tokenLabel={tokenLabel}\n      removeFilterHref={urlManager.composeURLForRemoveToken()}\n    />\n  );\n\n  return (\n    <div className=\"mb-6 w-full flex flex-col md:flex-row md:gap-x-1\">\n      <div className=\"md:flex-1 md:border md:border-solid md:border-gray-400 md:bg-gray-100\">\n        <div className=\"grid grid-cols-2 md:grid-cols-12 md:h-full\">\n          <div className={clsx(['px-4 mb-2 col-span-full md:bg-white md:mb-0', columnClassnames])}>\n            <SearchInput\n              formAction={urlManager.composeURLForSetSearchTermForm()}\n              hiddenFields={urlManager.composeSearchTermFormHiddenFields()}\n            />\n          </div>\n          {hasActiveSelectionsOrContentTypeFilterEnabled && (\n            <div className=\"relative px-4 float-left mb-2 md:border-l md:border-l-solid md:border-l-gray-400 md:col-span-7 md:mb-0\">\n              <div className=\"grid grid-cols-12 md:h-full\">\n                {enableContentTypeFilter && (\n                  <div className=\"md:relative col-span-full md:col-span-2\">\n                    <ContentTypeSelector\n                      contentTypes={contentTypes}\n                      resultContentTypes={resultContentTypes}\n                    />\n                  </div>\n                )}\n                {hasActiveSelections && (\n                  <div className=\"col-span-full md:col-span-10 mb-2 md:h-full md:mb-0 text-sm\">\n                    {filterContentTypes}\n                    {filterSearchTerm}\n                    {filterAggregations}\n                    {filterTokenLabel}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n          {enableSort && (\n            <div className=\"md:border-l md:border-l-solid md:border-l-gray-400 md:bg-white md:col-span-2 relative px-4 float-left mb-2 md:h-full md:mb-0 md:pr-0\">\n              <SortSelector enabledSorts={enabledSorts} sort={sort} />\n            </div>\n          )}\n        </div>\n      </div>\n      {enableDisplayType && (\n        <div className=\"px-4 md:px-0 md:flex-none\">\n          <DisplayTypeSelector\n            activeDisplayType={activeDisplayType}\n            enabledDisplayTypes={enabledDisplayTypes}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nCatalogFilters.displayName = 'CatalogFilters';\n\nexport default CatalogFilters;\n","import React, { ReactNode, useState } from 'react';\nimport { useCatalog } from './core';\nimport clsx from 'clsx';\nimport { ArrowDownIcon, ArrowRightIcon } from './icons';\nimport { useLanguagesQueryQuery } from '@thoughtindustries/content';\n\ntype AggregationBucketProps = {\n  href: string;\n  value: string;\n  count?: number;\n};\n\ntype AggregationProps = {\n  index: number;\n  label: string;\n  defaultIsExpanded: boolean;\n  aggregationBuckets: ReactNode;\n};\n\nconst AggregationBucket = ({ href, value, count }: AggregationBucketProps): JSX.Element => (\n  <li>\n    <a\n      href={href}\n      className=\"inline-block leading-normal py-1.5 px-4 text-link hover:text-link-hover\"\n    >\n      {value}\n      {count && <span className=\"text-xs text-gray-700 pl-1\">{`(${count})`}</span>}\n    </a>\n  </li>\n);\n\nconst Aggregation = ({\n  index,\n  label,\n  defaultIsExpanded,\n  aggregationBuckets\n}: AggregationProps): JSX.Element => {\n  const [isExpanded, setIsExpanded] = useState(defaultIsExpanded);\n  const handleToggle = () => {\n    setIsExpanded(prevIsExpanded => !prevIsExpanded);\n  };\n  const wrapperClassnames = isExpanded ? 'border-b mb-4 bg-gray-100' : '';\n  const buttonLinkClassnames =\n    'w-full leading-normal text-left transition-colors ease-in-out duration-200 bg-none text-accent hover:text-accent-hover flex items-center gap-4';\n  const listClassnames = !isExpanded ? 'hidden' : '';\n  const ariaId = `catalog-aggregation-dropdown-${index}`;\n  return (\n    <div className={clsx(['border-t border-solid border-gray-400 py-3 px-2'], wrapperClassnames)}>\n      <button\n        className={buttonLinkClassnames}\n        onClick={handleToggle}\n        aria-expanded={isExpanded}\n        aria-labelledby={ariaId}\n      >\n        <span className=\"text-xl inline-block leading-4 text-center w-5 h-5\">\n          {isExpanded && <ArrowDownIcon />}\n          {!isExpanded && <ArrowRightIcon />}\n        </span>\n        <span className=\"font-semibold\">{label}</span>\n      </button>\n      <ul aria-hidden={!isExpanded} id={ariaId} className={clsx(['pl-6 text-sm'], listClassnames)}>\n        {aggregationBuckets}\n      </ul>\n    </div>\n  );\n};\n\nconst CatalogAggregations = (): JSX.Element => {\n  const { params, urlManager } = useCatalog();\n  const { aggregations, aggregationFilters, isCurated, token, tokenLabel } = params;\n  const { data } = useLanguagesQueryQuery();\n\n  // derived value\n  const firstAggregationFilterLabel = aggregationFilters.length\n    ? aggregationFilters[0].label\n    : undefined;\n  const languages = data ? data.Languages : [];\n\n  const contents = aggregations.map(({ label = '', buckets = [] }, index) => {\n    const isAggregationLabel = label === firstAggregationFilterLabel;\n    const isTokenLabel = tokenLabel && label === tokenLabel;\n    const isCurrentLabel = isAggregationLabel || isTokenLabel;\n    /**\n     * never expand first aggregation when using curated categories.\n     * otherwise, never expand the first aggregation when using token search.\n     */\n    const shouldExpandFirst = !isCurated && !token;\n    const isExpanded = isCurrentLabel || (shouldExpandFirst && index === 0);\n\n    const aggregationBuckets = buckets.map(({ value = '', count, query }, bucketIndex) => {\n      const filter = { label, value };\n      const isLanguageLabel = query?.includes('language');\n      const languageLabel = languages.find(({ code }) => code === value)?.label || value;\n      const displayLabel = isLanguageLabel ? languageLabel : value;\n      const props = {\n        href: urlManager.composeURLForAddAggregationFilter(filter),\n        value: displayLabel,\n        count\n      };\n      return <AggregationBucket key={`catalog-aggregation-bucket-${bucketIndex}`} {...props} />;\n    });\n\n    const props = {\n      index,\n      defaultIsExpanded: isExpanded,\n      label,\n      aggregationBuckets\n    };\n    return <Aggregation key={`catalog-aggregation-${index}`} {...props} />;\n  });\n\n  return <>{contents}</>;\n};\n\nCatalogAggregations.displayName = 'CatalogAggregations';\n\nexport default CatalogAggregations;\n","import React, { ReactElement } from 'react';\nimport { useCatalog } from './core';\n\nconst CatalogError = ({ children }: { children: ReactElement }): JSX.Element => {\n  const { params } = useCatalog();\n  const { error } = params;\n\n  if (error) {\n    return <>{error}</>;\n  }\n\n  return children;\n};\n\nCatalogError.displayName = 'CatalogError';\nexport default CatalogError;\n","import React from 'react';\nimport clsx from 'clsx';\n\ninterface ItemAssetBlockProps {\n  asset?: string;\n  classNames?: string;\n}\n\nconst ItemAssetBlock = ({ asset, classNames = '' }: ItemAssetBlockProps): JSX.Element => (\n  <img\n    className={clsx(['max-w-full h-auto', classNames])}\n    src={\n      asset ||\n      'https://d36ai2hkxl16us.cloudfront.net/thoughtindustries/image/upload/v1440546308/qj7eo4nseeiigiec5huh.png'\n    }\n  />\n);\n\nItemAssetBlock.displayName = 'ItemAssetBlock';\n\nexport default ItemAssetBlock;\n","import React from 'react';\n\nexport const PlusIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    className=\"w-full h-full\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n    />\n  </svg>\n);\n\nexport const CheckCircleIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"w-full h-full\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\nexport const DesktopComputerIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"w-full h-full\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    strokeWidth={2}\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n    />\n  </svg>\n);\n\nexport const LocationMarkerIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"w-full h-full\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    strokeWidth={2}\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\n    />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n  </svg>\n);\n","import React, { SyntheticEvent, useCallback, useState } from 'react';\nimport clsx from 'clsx';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogResultsProps, CatalogResultItem } from '../../types';\nimport { PlusIcon, CheckCircleIcon } from './icons';\n\ntype ItemQueueButtonProps = Pick<CatalogResultsProps, 'onAddedToQueue'> & {\n  item: CatalogResultItem;\n  classNames?: string;\n};\n\nconst ItemQueueButton = ({\n  item,\n  onAddedToQueue,\n  classNames = ''\n}: ItemQueueButtonProps): JSX.Element => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [wasAddedToQueue, setWasAddedToQueue] = useState<boolean>(false);\n  const { t } = useTranslation();\n  const handleClick = useCallback(\n    async (evt: SyntheticEvent) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (!!wasAddedToQueue || isLoading) {\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        await onAddedToQueue(item);\n        setWasAddedToQueue(true);\n      } catch (e: unknown) {\n        // handle error\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [wasAddedToQueue, isLoading, item, onAddedToQueue]\n  );\n\n  const btnClassNames = clsx([\n    'pl-0 mb-1 text-xs border-none rounded-sm cursor-pointer font-normal leading-normal m-0 p-0 relative text-center no-underline transition-colors ease-in-out duration-200 hover:text-link-hover',\n    { 'cursor-default': wasAddedToQueue },\n    classNames\n  ]);\n\n  return (\n    <button onClick={handleClick} className={btnClassNames}>\n      {wasAddedToQueue && (\n        <span className=\"flex items-center gap-x-1\">\n          <i className=\"inline-block w-3 h-3 text-green-600\" aria-label=\"check\">\n            <CheckCircleIcon />\n          </i>\n          {` ${t('course-added-to-queue')}`}\n        </span>\n      )}\n      {!wasAddedToQueue && (\n        <span className=\"flex items-center gap-x-1\">\n          <i className=\"inline-block w-3 h-3\" aria-label=\"plus\">\n            <PlusIcon />\n          </i>\n          {` ${t('course-add-to-queue')}`}\n        </span>\n      )}\n    </button>\n  );\n};\n\nItemQueueButton.displayName = 'ItemQueueButton';\n\nexport default ItemQueueButton;\n","import React, { useCallback, useState } from 'react';\nimport clsx from 'clsx';\nimport dayjs from 'dayjs';\nimport { useTranslation } from 'react-i18next';\nimport { formatTime } from '@thoughtindustries/content';\nimport { CatalogResultItem, CatalogResultsProps, PriceFormatFn } from '../../types';\nimport ItemAssetBlock from './item-asset-block';\nimport ItemQueueButton from './item-queue-button';\nimport { ArrowDownIcon, ArrowRightIcon } from '../../icons';\nimport { DesktopComputerIcon, LocationMarkerIcon } from './icons';\nimport { CatalogParams } from '../../core';\n\ntype DisplayTypeResultsCalendarProps = Pick<\n  CatalogResultsProps,\n  'companyTimeZone' | 'onAddedToQueue'\n> &\n  Pick<CatalogParams, 'displayDescriptionOnCalendar'> & {\n    items: CatalogResultItem[];\n    priceFormatFn: PriceFormatFn;\n  };\n\ntype MonthlyItems = {\n  heading: string;\n  items: CatalogResultItem[];\n};\n\ntype ItemsByMonth = {\n  [key: string]: MonthlyItems;\n};\n\ntype DisplayTypeResultsCalendarMonthlyItemsProps = MonthlyItems &\n  DisplayTypeResultsCalendarProps & {\n    expandedItemId: string | undefined;\n    setExpandedItemId: (id: string | undefined) => void;\n  };\n\ntype DisplayTypeResultsCalendarMonthlyItemProps = Omit<\n  DisplayTypeResultsCalendarMonthlyItemsProps,\n  'items' | 'heading'\n> & {\n  item: CatalogResultItem;\n  hasPrices: boolean;\n};\n\nconst ItemLocationBlock = ({\n  location,\n  locationIsInPerson\n}: {\n  location: CatalogResultItem['location'];\n  locationIsInPerson: CatalogResultItem['locationIsInPerson'];\n}) => {\n  const { t } = useTranslation();\n  const { address1, name, city, state, country } = location || {};\n  const iconWrapperClassnames = 'flex items-center justify-end gap-x-1 md:justify-start';\n  const iconClassnames = 'w-4 h-4';\n\n  if (address1) {\n    return (\n      <>\n        {name && <strong>{name}</strong>}\n        <br />\n        {city && `${city}, `}\n        {state && `${state}, `}\n        {country}\n      </>\n    );\n  }\n\n  if (locationIsInPerson) {\n    return (\n      <span className={iconWrapperClassnames}>\n        <i className={iconClassnames} aria-label=\"location\">\n          <LocationMarkerIcon />\n        </i>\n        {t('catalog.location-in-person')}\n      </span>\n    );\n  }\n\n  return (\n    <span className={iconWrapperClassnames}>\n      <i className={iconClassnames} aria-label=\"online\">\n        <DesktopComputerIcon />\n      </i>\n      {t('catalog.location-online')}\n    </span>\n  );\n};\n\nconst DisplayTypeResultsCalendarMonthlyItem = ({\n  companyTimeZone,\n  displayDescriptionOnCalendar,\n  item,\n  hasPrices,\n  expandedItemId,\n  setExpandedItemId,\n  onAddedToQueue,\n  priceFormatFn\n}: DisplayTypeResultsCalendarMonthlyItemProps): JSX.Element => {\n  const {\n    meetingStartDate,\n    courseStartDate,\n    timeZone,\n    locationIsOnline,\n    locationIsInPerson,\n    href,\n    id,\n    asset,\n    description,\n    contentTypeAssetAspectRatio,\n    title,\n    priceInCents,\n    isActive,\n    callToAction,\n    location,\n    canAddToQueue\n  } = item;\n\n  // derived values\n  const calendarStartDate = (meetingStartDate || courseStartDate) as string;\n  const formattedDate = formatTime(\n    calendarStartDate,\n    locationIsOnline ? companyTimeZone : timeZone,\n    'MMM Do YYYY hh:mm A z'\n  );\n  const expanded = expandedItemId === id;\n  const ariaId = `catalog-calendar-description-${id}`;\n  const shouldDisplayDescriptionToggle = (asset || description) && displayDescriptionOnCalendar;\n  const itemHrefWithId = href.includes('?') ? `${href}&courseId=${id}` : `${href}?courseId=${id}`;\n  const assetIsWide = !contentTypeAssetAspectRatio || contentTypeAssetAspectRatio === '16:9';\n  const tdCount = hasPrices ? 5 : 4;\n\n  // stylings\n  const expandedImageColumnClassnames = assetIsWide\n    ? 'col-span-full md:col-span-4'\n    : 'col-span-6 md:col-span-2';\n  const expandedContentColumnClassnames = assetIsWide\n    ? 'col-span-full md:col-span-8'\n    : 'col-span-full md:col-span-9';\n  const trBaseClassnames =\n    'border border-solid border-gray-400 rounded block p-3 md:border-none md:rounded-none md:table-row';\n  const trClassnames = expanded\n    ? clsx(trBaseClassnames, 'border-b-0 rounded-bl-none rounded-br-none pb-0 mb-0')\n    : clsx(trBaseClassnames, 'mb-3');\n  const expandedTrClassnames = clsx(\n    trBaseClassnames,\n    'mb-3 border-t-0 rounded-tl-none rounded-tr-none'\n  );\n  const tdBaseClassnames =\n    'p-0 text-right block mb-1 md:py-4 md:px-5 md:text-left md:table-cell md:mb-0';\n  const borderedTdClassnames = clsx(\n    tdBaseClassnames,\n    'border-none md:border-b md:border-solid md:border-gray-400'\n  );\n  const tdClassnames = expanded ? clsx(tdBaseClassnames, 'pb-0 last:mb-0') : borderedTdClassnames;\n  const buttonLinkClassnames =\n    'w-full leading-normal text-left transition-colors ease-in-out duration-200 bg-none text-accent hover:text-accent-hover flex items-center gap-4';\n  const ctaLinkClassnames =\n    'bg-accent hover:bg-accent-hover border border-solid border-accent hover:border-accent-hover rounded-sm font-normal font-secondary text-accent-contrast text-sm text-center no-underline leading-none cursor-pointer inline-block relative transition-colors ease-in-out duration-200 py-1 px-4 block w-full md:w-auto';\n\n  // event handlers\n  const toggleExpanded = useCallback(() => {\n    if (expanded) {\n      setExpandedItemId(undefined);\n    } else {\n      setExpandedItemId(id);\n    }\n  }, [expanded, id, setExpandedItemId]);\n\n  return (\n    <>\n      <tr className={trClassnames}>\n        <td data-label=\"courseHeading\" className={tdClassnames}>\n          {shouldDisplayDescriptionToggle && (\n            <div className=\"grid grid-cols-12\">\n              <div className=\"col-span-2\">\n                <button\n                  className={buttonLinkClassnames}\n                  onClick={toggleExpanded}\n                  aria-expanded={expanded}\n                  aria-controls={ariaId}\n                >\n                  <span className=\"text-xl inline-block leading-4 text-center w-5 h-5\">\n                    {expanded && <ArrowDownIcon />}\n                    {!expanded && <ArrowRightIcon />}\n                  </span>\n                </button>\n              </div>\n              <div className=\"col-span-10\">{title}</div>\n            </div>\n          )}\n          {!shouldDisplayDescriptionToggle && <>{title}</>}\n        </td>\n        <td data-label=\"locationHeading\" className={tdClassnames}>\n          <ItemLocationBlock location={location} locationIsInPerson={locationIsInPerson} />\n        </td>\n        <td data-label=\"dateTimeHeading\" className={tdClassnames}>\n          {formattedDate}\n        </td>\n        {hasPrices && (\n          <td data-label=\"priceHeading\" className={tdClassnames}>\n            {!!priceInCents && priceFormatFn(priceInCents)}\n          </td>\n        )}\n        <td className={tdClassnames}>\n          <div className=\"flex flex-col gap-3 justify-center items-center\">\n            {isActive && (\n              <a className={ctaLinkClassnames} href={itemHrefWithId}>\n                {callToAction}\n              </a>\n            )}\n            {!isActive && callToAction}\n            {canAddToQueue && <ItemQueueButton item={item} onAddedToQueue={onAddedToQueue} />}\n          </div>\n        </td>\n      </tr>\n\n      {expanded && (\n        <tr id={ariaId} className={expandedTrClassnames}>\n          <td colSpan={tdCount} className={borderedTdClassnames}>\n            <div className=\"grid grid-cols-12 gap-3.5\">\n              {asset && (\n                <div className={expandedImageColumnClassnames}>\n                  <ItemAssetBlock asset={asset} />\n                </div>\n              )}\n\n              <div className={expandedContentColumnClassnames}>\n                <div className=\"text-xs mt-2 leading-5 text-gray-700 pr-1\">{description}</div>\n              </div>\n            </div>\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n\nconst DisplayTypeResultsCalendarMonthlyItems = ({\n  heading,\n  items,\n  ...restProps\n}: DisplayTypeResultsCalendarMonthlyItemsProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  // derived values\n  const hasPrices = items.some(({ priceInCents }) => !!priceInCents);\n  const itemBaseProps = { hasPrices, ...restProps };\n\n  // stylings\n  const thBaseClassnames = 'py-4 px-5 border-b border-solid border-gray-400 text-left';\n  const theadClassnames =\n    'h-px -m-px overflow-hidden p-0 absolute w-px md:h-full md:w-full md:static';\n\n  return (\n    <table className=\"table-auto border-collapse border-none md:border md:border-solid md:border-gray-400 rounded mb-10 text-sm w-full\">\n      <caption className=\"font-secondary text-xl leading-tight text-left mb-5\">{heading}</caption>\n      <thead className={theadClassnames}>\n        <tr>\n          <th className={clsx(thBaseClassnames, 'w-1/4')}>{t('course')}</th>\n          <th className={clsx(thBaseClassnames, 'w-1/6')}>{t('catalog.location')}</th>\n          <th className={clsx(thBaseClassnames, 'w-1/4')}>{t('catalog.date-time')}</th>\n          {hasPrices && <th className={clsx(thBaseClassnames, 'w-1/12')}>{t('catalog.price')}</th>}\n          <th className={clsx(thBaseClassnames, 'w-1/4')}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map((item, index) => (\n          <DisplayTypeResultsCalendarMonthlyItem\n            key={`result-item-${index}`}\n            item={item}\n            {...itemBaseProps}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst DisplayTypeResultsCalendar = ({\n  items,\n  ...restProps\n}: DisplayTypeResultsCalendarProps): JSX.Element => {\n  const [expandedItemId, setExpandedItemId] = useState<string | undefined>(undefined);\n\n  const contentItemsByMonth = items\n    .sort((a, b) => {\n      const calendarStartDateA = a.meetingStartDate || a.courseStartDate;\n      const calendarStartDateB = b.meetingStartDate || b.courseStartDate;\n      if (!calendarStartDateA || !calendarStartDateB) {\n        return -1;\n      }\n      return dayjs(calendarStartDateA).isBefore(dayjs(calendarStartDateB)) ? -1 : 1;\n    })\n    .reduce((itemsByMonth, item) => {\n      const calendarStartDate = item.meetingStartDate || item.courseStartDate;\n\n      if (!calendarStartDate) {\n        return itemsByMonth;\n      }\n\n      const month = formatTime(calendarStartDate, item.timeZone, 'MMM YYYY');\n      if (!itemsByMonth[month]) {\n        itemsByMonth[month] = { heading: month, items: [] };\n      }\n      itemsByMonth[month].items.push(item);\n      return itemsByMonth;\n    }, {} as ItemsByMonth);\n\n  return (\n    <div>\n      {Object.entries(contentItemsByMonth).map(([_, monthlyItems], index) => (\n        <DisplayTypeResultsCalendarMonthlyItems\n          key={`result-month-${index}`}\n          {...monthlyItems}\n          {...restProps}\n          expandedItemId={expandedItemId}\n          setExpandedItemId={setExpandedItemId}\n        />\n      ))}\n    </div>\n  );\n};\n\nDisplayTypeResultsCalendar.displayName = 'DisplayTypeResultsCalendar';\nexport default DisplayTypeResultsCalendar;\n","import React, { ReactNode, SyntheticEvent, useCallback } from 'react';\nimport { CatalogResultItem, CatalogResultsProps } from '../../types';\n\ntype ItemLinkWrapperProps = Pick<CatalogResultsProps, 'onClick'> & {\n  children: ReactNode;\n  item: CatalogResultItem;\n};\n\nconst ItemLinkWrapper = ({ children, onClick, item }: ItemLinkWrapperProps): JSX.Element => {\n  const { isActive, href } = item;\n\n  const itemIsActiveOrWebinarOrEvent = !!isActive;\n\n  const handleClick = useCallback(\n    (evt: SyntheticEvent) => {\n      onClick && onClick(evt, item);\n    },\n    [item, onClick]\n  );\n  const linkProps: {\n    className: string;\n    href?: string;\n    onClick: (evt: SyntheticEvent) => void;\n    target?: string;\n  } = {\n    href,\n    onClick: handleClick,\n    className: `block text-gray-800 ${!itemIsActiveOrWebinarOrEvent ? 'cursor-default' : ''}`\n  };\n  return <a {...linkProps}>{children}</a>;\n};\n\nItemLinkWrapper.displayName = 'ItemLinkWrapper';\n\nexport default ItemLinkWrapper;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { CatalogResultItemRibbon } from '../../types';\n\ntype ItemRibbonProps = {\n  ribbon: CatalogResultItemRibbon;\n  attached: boolean;\n  attachedClassnames?: string;\n};\n\nconst ItemRibbon = ({ ribbon, attached, attachedClassnames = '' }: ItemRibbonProps) => {\n  const { contrastColor, color, darkerColor, label } = ribbon;\n  const wrapperStyles = {\n    color: contrastColor,\n    backgroundColor: color\n  };\n  const wrapperAttachedClassnames = attached ? clsx('-right-2', attachedClassnames) : '-top-1';\n  const wrapperClassnames = clsx(\n    'text-xs font-normal leading-none absolute right-0 uppercase max-w-1/2 overflow-ellipsis z-10 px-1.5 py-1 whitespace-no-wrap',\n    wrapperAttachedClassnames\n  );\n  const cornerStyles = {\n    borderTopColor: darkerColor,\n    borderLeftColor: darkerColor\n  };\n  return (\n    <div className={wrapperClassnames} style={wrapperStyles}>\n      {attached && (\n        <div\n          className=\"absolute right-0 top-full block h-0 w-0 border-4 border-solid border-transparent\"\n          style={cornerStyles}\n        ></div>\n      )}\n      {label}\n    </div>\n  );\n};\n\nItemRibbon.displayName = 'ItemRibbon';\n\nexport default ItemRibbon;\n","export const limitText = (text: string, maxLength: number): string => {\n  if (text.length > maxLength) {\n    return `${text.substring(0, maxLength)}...`;\n  }\n  return text;\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { GlobalTypes, formatTime } from '@thoughtindustries/content';\nimport {\n  CatalogParams,\n  HeightEqualizer,\n  HeightEqualizerElement,\n  HeightEqualizerElementProps\n} from '../../core';\nimport { CatalogResultItem, CatalogResultsProps, PriceFormatFn } from '../../types';\nimport ItemLinkWrapper from './item-link-wrapper';\nimport ItemAssetBlock from './item-asset-block';\nimport ItemQueueButton from './item-queue-button';\nimport ItemRibbon from './item-ribbon';\nimport clsx from 'clsx';\nimport { limitText } from './utilities';\n\ntype DisplayTypeResultsGridProps = Pick<CatalogResultsProps, 'onClick' | 'onAddedToQueue'> &\n  Pick<CatalogParams, 'displayAuthorsEnabled' | 'displayStartDateEnabled' | 'displayBundle'> & {\n    items: CatalogResultItem[];\n    priceFormatFn: PriceFormatFn;\n  };\n\ntype DisplayTypeResultsGridItemProps = Omit<DisplayTypeResultsGridProps, 'items'> & {\n  item: CatalogResultItem;\n};\n\nconst HeightEqualizerElementWrapper = ({\n  className,\n  children,\n  ...restProps\n}: HeightEqualizerElementProps) => {\n  // stylings\n  const baseClassnames = 'overflow-hidden block transition-all';\n  return (\n    <HeightEqualizerElement className={clsx(className, baseClassnames)} {...restProps}>\n      {children}\n    </HeightEqualizerElement>\n  );\n};\n\nconst ItemCompletedBlock = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"block absolute h-full left-0 top-0 w-full text-center bg-white bg-opacity-80 z-1\">\n      <div className=\"absolute w-full top-1/2 transform -translate-y-1/2\">\n        <div>\n          <i\n            className=\"bg-white text-3xl inline-block p-4 rounded-full border-4 border-solid border-white border-opacity-50 my-0 mx-auto bg-clip-padding\"\n            aria-label=\"Completed\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"30\"\n              height=\"30\"\n              viewBox=\"0 0 24 24\"\n              fill=\"#5bb65c\"\n            >\n              <path d=\"M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z\" />\n            </svg>\n          </i>\n        </div>\n        <p className=\"mt-1 text-base\">{t('course-completed-decal')}</p>\n      </div>\n    </div>\n  );\n};\n\nconst ItemTitleBlock = ({\n  title,\n  courseStartDate,\n  timeZone\n}: {\n  title: string;\n  courseStartDate?: string;\n  timeZone?: string;\n}) => (\n  <div className=\"mb-1\">\n    <HeightEqualizerElementWrapper name=\"title\" as=\"h3\" className=\"leading-6\">\n      {title}\n    </HeightEqualizerElementWrapper>\n    <HeightEqualizerElementWrapper name=\"course-date\" className=\"leading-4\">\n      {courseStartDate && (\n        <span className=\"text-xs text-gray-700\">\n          {formatTime(courseStartDate, timeZone, 'MM/DD/YYYY')}\n        </span>\n      )}\n    </HeightEqualizerElementWrapper>\n  </div>\n);\n\nconst ItemSourceBlock = ({\n  contentTypeLabel,\n  source\n}: {\n  contentTypeLabel?: string;\n  source?: string;\n}) => (\n  <HeightEqualizerElementWrapper name=\"source\" className=\"text-xs text-gray-700 leading-4\">\n    {contentTypeLabel && <strong>{contentTypeLabel}</strong>}\n    {contentTypeLabel && source && <>|{source}</>}\n    {!contentTypeLabel && source && <strong>{source}</strong>}\n  </HeightEqualizerElementWrapper>\n);\n\n// TODO: might consider extracting as common component\nconst Star = ({ marked }: { marked: boolean }) => (\n  <span className=\"text-accent\">{marked ? '\\u2605' : '\\u2606'}</span>\n);\nconst Stars = ({ gradePercentage }: { gradePercentage: number }) => {\n  let stars: number;\n\n  stars = gradePercentage * 0.05;\n  const remainder = stars % 0.5;\n\n  if (remainder > 0) {\n    stars = stars - remainder + 0.5;\n  }\n\n  return (\n    <div>\n      {Array.from({ length: 5 }, (v, i) => (\n        <Star key={`star-${i}`} marked={stars > i} />\n      ))}\n    </div>\n  );\n};\n\nconst ItemCtaBlock = ({\n  isActive,\n  callToAction\n}: {\n  isActive?: boolean;\n  callToAction?: string;\n}) => {\n  if (isActive) {\n    return (\n      <span className=\"border-none rounded-sm cursor-pointer inline-block text-sm font-normal leading-normal m-0 p-0 relative text-center no-underline transition-colors ease-in-out duration-200 text-accent float-right text-left h-auto hover:text-accent\">\n        {callToAction}\n      </span>\n    );\n  }\n\n  return <span className=\"text-xs\">{callToAction}</span>;\n};\n\nconst ItemPriceBlock = ({\n  priceInCents,\n  hasAvailability,\n  suggestedRetailPriceInCents,\n  priceFormatFn\n}: {\n  priceInCents?: number;\n  hasAvailability?: boolean;\n  suggestedRetailPriceInCents?: number;\n  priceFormatFn: DisplayTypeResultsGridItemProps['priceFormatFn'];\n}) => {\n  if (hasAvailability) {\n    return null;\n  }\n\n  return (\n    <>\n      {priceInCents && <span>{priceFormatFn(priceInCents)}</span>}\n      {suggestedRetailPriceInCents && (\n        <span className=\"line-through text-gray-700 text-xs\">\n          {priceFormatFn(suggestedRetailPriceInCents)}\n        </span>\n      )}\n    </>\n  );\n};\n\nconst ItemBundleBlock = ({\n  priceInCents,\n  annualPriceInCents,\n  slug,\n  priceFormatFn\n}: GlobalTypes.Bundle & {\n  priceFormatFn: DisplayTypeResultsGridItemProps['priceFormatFn'];\n}) => {\n  const { t } = useTranslation();\n\n  const linkProps = {\n    className:\n      'cursor-pointer relative font-normal font-secondary leading-none text-xs text-accent-contrast',\n    href: `/bundle/${slug}`\n  };\n\n  // stylings\n  const planCurrencyClassnames = 'font-bold text-sm';\n  const planIntervalClassnames = 'text-xs';\n\n  return (\n    <div className=\"pt-1 px-4 pb-2 leading-none bg-accent text-accent-contrast\">\n      <small>{t('primary-bundle-intro')}</small>\n\n      <div className=\"flex justify-between items-end\">\n        <div>\n          {priceInCents && (\n            <div>\n              <span className={planCurrencyClassnames}>{priceFormatFn(priceInCents)}</span>\n              <span className={planIntervalClassnames}>/ {t('course.per-month')}</span>\n            </div>\n          )}\n\n          {annualPriceInCents && (\n            <div>\n              <span className={planCurrencyClassnames}>{priceFormatFn(annualPriceInCents)}</span>\n              <span className={planIntervalClassnames}>/ {t('course.per-year')}</span>\n            </div>\n          )}\n        </div>\n\n        <a {...linkProps}>{t('bundle.learn-button')}</a>\n      </div>\n    </div>\n  );\n};\n\n/**\n * TODO: similar UI layout as @thoughtindustries/featured-content - ContentTileStandardLayout.Item,\n * with small differences to how some component props are handled, like:\n * desktopColumnCount, various display options (displayAuthorsEnabled, etc),\n * and displayBundle. Might consider consolidating the components.\n */\nconst DisplayTypeResultsGridItem = ({\n  onClick,\n  onAddedToQueue,\n  displayAuthorsEnabled,\n  displayStartDateEnabled,\n  displayBundle,\n  item,\n  priceFormatFn\n}: DisplayTypeResultsGridItemProps): JSX.Element => {\n  const {\n    asset,\n    title,\n    description,\n    isActive,\n    ribbon,\n    isCompleted,\n    courseStartDate,\n    contentTypeLabel,\n    source,\n    authors,\n    rating,\n    canAddToQueue,\n    callToAction,\n    priceInCents,\n    hasAvailability,\n    suggestedRetailPriceInCents,\n    availabilityStatus,\n    timeZone\n  } = item;\n\n  // derived values\n  const displayAuthors = displayAuthorsEnabled && authors?.length ? authors.join(', ') : null;\n  const displayCourseStartDate = displayStartDateEnabled ? courseStartDate : undefined;\n\n  return (\n    <li>\n      <>\n        <ItemLinkWrapper item={item} onClick={onClick}>\n          <div className=\"grid grid-cols-1 border border-solid border-gray-300 relative\">\n            {ribbon && <ItemRibbon ribbon={ribbon} attached attachedClassnames=\"-top-1\" />}\n            <div className=\"relative\">\n              {isCompleted && <ItemCompletedBlock />}\n              <ItemAssetBlock asset={asset} />\n            </div>\n            <div className=\"p-2.5\">\n              {title && (\n                <ItemTitleBlock\n                  title={title}\n                  courseStartDate={displayCourseStartDate}\n                  timeZone={timeZone}\n                />\n              )}\n              <ItemSourceBlock contentTypeLabel={contentTypeLabel} source={source} />\n              <HeightEqualizerElementWrapper\n                name=\"authors\"\n                as=\"p\"\n                className=\"text-xs mb-1 text-gray-700 leading-4\"\n              >\n                {displayAuthors}\n              </HeightEqualizerElementWrapper>\n              <HeightEqualizerElementWrapper\n                name=\"description\"\n                as=\"p\"\n                className=\"text-xs text-gray-700 pt-1 mb-0 leading-4\"\n              >\n                {description && limitText(description, 75)}\n              </HeightEqualizerElementWrapper>\n              <div className=\"h-6\">{rating && <Stars gradePercentage={rating} />}</div>\n              <hr className=\"my-3\" />\n              <div className=\"text-base leading-none\">\n                {canAddToQueue && (\n                  <div className=\"flex flex-wrap-reverse justify-between items-end\">\n                    <span>\n                      <ItemQueueButton item={item} onAddedToQueue={onAddedToQueue} />\n                    </span>\n                    <span>\n                      <ItemCtaBlock isActive={isActive} callToAction={callToAction} />\n                    </span>\n                  </div>\n                )}\n                {!canAddToQueue && priceInCents && (\n                  <>\n                    <ItemPriceBlock\n                      priceInCents={priceInCents}\n                      hasAvailability={hasAvailability}\n                      suggestedRetailPriceInCents={suggestedRetailPriceInCents}\n                      priceFormatFn={priceFormatFn}\n                    />\n                    <ItemCtaBlock isActive callToAction={callToAction} />\n                  </>\n                )}\n                {!canAddToQueue && !priceInCents && (\n                  <ItemCtaBlock isActive={isActive} callToAction={callToAction} />\n                )}\n              </div>\n            </div>\n          </div>\n        </ItemLinkWrapper>\n        {displayBundle && !availabilityStatus && (\n          <ItemBundleBlock {...displayBundle} priceFormatFn={priceFormatFn} />\n        )}\n      </>\n    </li>\n  );\n};\n\nconst DisplayTypeResultsGrid = ({\n  items,\n  ...restProps\n}: DisplayTypeResultsGridProps): JSX.Element => {\n  const contentItems = items\n    .filter(({ isNotCompleted }) => !isNotCompleted)\n    .map((item, index) => (\n      <DisplayTypeResultsGridItem key={`result-item-${index}`} item={item} {...restProps} />\n    ));\n  return (\n    <HeightEqualizer>\n      <ul className=\"grid gap-5 grid-cols-1 md:grid-cols-2 lg:grid-cols-3\">{contentItems}</ul>\n    </HeightEqualizer>\n  );\n};\n\nDisplayTypeResultsGrid.displayName = 'DisplayTypeResultsGrid';\nexport default DisplayTypeResultsGrid;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { formatTime } from '@thoughtindustries/content';\nimport { CatalogResultItem, CatalogResultsProps, PriceFormatFn } from '../../types';\nimport ItemLinkWrapper from './item-link-wrapper';\nimport ItemAssetBlock from './item-asset-block';\nimport ItemQueueButton from './item-queue-button';\nimport ItemRibbon from './item-ribbon';\nimport { CheckIcon } from '../../icons';\nimport { CatalogParams } from '../../core';\n\ntype DisplayTypeResultsListProps = Pick<CatalogResultsProps, 'onClick' | 'onAddedToQueue'> &\n  Pick<CatalogParams, 'displayStartDateEnabled'> & {\n    items: CatalogResultItem[];\n    priceFormatFn: PriceFormatFn;\n  };\n\ntype DisplayTypeResultsListItemProps = Omit<DisplayTypeResultsListProps, 'items'> & {\n  item: CatalogResultItem;\n};\n\nconst ItemSourceBlock = ({\n  contentTypeLabel,\n  authors,\n  source\n}: {\n  contentTypeLabel?: string;\n  authors?: string[];\n  source?: string;\n}) => {\n  const sourceWithAuthors = !!authors?.length && (\n    <>\n      | {authors.join(', ')}\n      {source && <p className=\"mb-1 text-gray-700\">{source}</p>}\n    </>\n  );\n  const sourceWithoutAuthors = !authors?.length && <>| {source}</>;\n  return (\n    <div className=\"mt-3 text-xs\">\n      <strong>{contentTypeLabel}</strong>\n      {sourceWithAuthors}\n      {sourceWithoutAuthors}\n    </div>\n  );\n};\n\nconst getContentColumnClassnames = ({\n  showCallToAction,\n  hasAsset,\n  assetIsWide\n}: {\n  showCallToAction: boolean;\n  hasAsset: boolean;\n  assetIsWide: boolean;\n}): string => {\n  if (showCallToAction && hasAsset) {\n    return 'col-span-full md:col-span-5';\n  }\n\n  if (hasAsset) {\n    return assetIsWide ? 'col-span-full md:col-span-8' : 'col-span-full md:col-span-9';\n  }\n\n  if (showCallToAction) {\n    return 'col-span-full md:col-span-9';\n  }\n\n  return 'col-span-full';\n};\n\nconst DisplayTypeResultsListItem = ({\n  onClick,\n  onAddedToQueue,\n  displayStartDateEnabled,\n  item,\n  priceFormatFn\n}: DisplayTypeResultsListItemProps): JSX.Element => {\n  const { t } = useTranslation();\n  const {\n    canAddToQueue,\n    priceInCents,\n    isActive,\n    ribbon,\n    isCompleted,\n    title,\n    courseStartDate,\n    asset,\n    contentTypeAssetAspectRatio,\n    contentTypeLabel,\n    authors,\n    source,\n    description,\n    callToAction,\n    suggestedRetailPriceInCents,\n    timeZone\n  } = item;\n\n  // derived values\n  const showCallToAction = !!priceInCents || !isActive || !!canAddToQueue;\n  const assetIsWide = !contentTypeAssetAspectRatio || contentTypeAssetAspectRatio === '16:9';\n  const hasAsset = !!asset;\n\n  // stylings\n  const titleColumnClassnames =\n    showCallToAction || ribbon ? 'col-span-full md:col-span-3' : 'col-span-full';\n  const imageColumnClassnames = assetIsWide\n    ? 'col-span-full md:col-span-4'\n    : 'col-span-6 md:col-span-2';\n  const contentColumnClassnames = getContentColumnClassnames({\n    showCallToAction,\n    hasAsset,\n    assetIsWide\n  });\n  const ctaColumnClassnames = 'col-span-full md:col-span-3';\n  const ctaClassnames =\n    'bg-accent hover:bg-accent-hover border border-solid border-accent hover:border-accent-hover rounded-sm font-normal font-secondary text-accent-contrast text-sm text-center no-underline leading-none cursor-pointer inline-block relative transition-colors ease-in-out duration-200 py-1 px-3 table mx-auto';\n  const ribbonAttachedClassnames = '-top-5';\n\n  return (\n    <ItemLinkWrapper onClick={onClick} item={item}>\n      <div className=\"mb-5 border-b border-solid border-gray-300 mr-2 pb-5\">\n        <div className=\"relative\">\n          <div className=\"grid grid-cols-4\">\n            <div className={titleColumnClassnames}>\n              {isCompleted && (\n                <div className=\"pb-1 flex items-center gap-x-1\">\n                  <i className=\"inline-block w-4 h-4 text-green-500\" aria-label=\"Completed\">\n                    <CheckIcon />\n                  </i>{' '}\n                  {t('course-completed-decal')}\n                </div>\n              )}\n              <h3 className=\"pr-3 text-black\">\n                {title}\n                {displayStartDateEnabled && courseStartDate && (\n                  <>\n                    <br />\n                    <span className=\"text-xs text-gray-700\">\n                      {formatTime(courseStartDate, timeZone, 'MM/DD/YYYY')}\n                    </span>\n                  </>\n                )}\n              </h3>\n            </div>\n          </div>\n          {!showCallToAction && ribbon && <ItemRibbon ribbon={ribbon} attached={false} />}\n        </div>\n\n        <div className=\"relative\">\n          {showCallToAction && ribbon && (\n            <ItemRibbon ribbon={ribbon} attached attachedClassnames={ribbonAttachedClassnames} />\n          )}\n          <div className=\"row collapse grid grid-cols-12 gap-4\">\n            {asset && (\n              <div className={imageColumnClassnames}>\n                <ItemAssetBlock asset={asset} />\n              </div>\n            )}\n\n            <div className={contentColumnClassnames}>\n              <ItemSourceBlock\n                contentTypeLabel={contentTypeLabel}\n                authors={authors}\n                source={source}\n              />\n\n              <div className=\"text-xs mt-2 text-gray-700 pr-1 leading-6\">{description}</div>\n            </div>\n\n            {showCallToAction && (\n              <div className={ctaColumnClassnames}>\n                <div className=\"border border-solid border-gray-300 p-4 mt-4 md:-mt-4 text-center\">\n                  {canAddToQueue && (\n                    <div className=\"mt-4\">\n                      {isActive && <span className={ctaClassnames}>{callToAction}</span>}\n                      {!isActive && <div className=\"text-xs\">{callToAction}</div>}\n                      <ItemQueueButton\n                        item={item}\n                        onAddedToQueue={onAddedToQueue}\n                        classNames=\"mt-3 mx-auto block\"\n                      />\n                    </div>\n                  )}\n                  {!canAddToQueue && priceInCents && (\n                    <>\n                      <div className=\"text-lg font-bold text-center\">\n                        {priceFormatFn(priceInCents)}\n                      </div>\n                      {suggestedRetailPriceInCents && (\n                        <div className=\"text-base pt-0 line-through text-center text-gray-400\">\n                          {priceFormatFn(suggestedRetailPriceInCents)}\n                        </div>\n                      )}\n                      <div className=\"mt-4\">\n                        <button className={ctaClassnames}>{callToAction}</button>\n                      </div>\n                    </>\n                  )}\n                  {!canAddToQueue && !priceInCents && <div className=\"text-xs\">{callToAction}</div>}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </ItemLinkWrapper>\n  );\n};\n\nconst DisplayTypeResultsList = ({\n  items,\n  ...restProps\n}: DisplayTypeResultsListProps): JSX.Element => {\n  const contentItems = items\n    .filter(({ isNotCompleted }) => !isNotCompleted)\n    .map((item, index) => (\n      <DisplayTypeResultsListItem key={`result-item-${index}`} item={item} {...restProps} />\n    ));\n  return <>{contentItems}</>;\n};\n\nDisplayTypeResultsList.displayName = 'DisplayTypeResultsList';\nexport default DisplayTypeResultsList;\n","export const DEFAULT_LOCALE = 'en-US';\nexport const DEFAULT_CURRENCY_CODE = 'USD';\n","import React from 'react';\nimport { hydrateContent, GlobalTypes, HydratedContentItem } from '@thoughtindustries/content';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogParams, useCatalog } from './core';\nimport { CatalogResultsProps, PriceFormatFn } from './types';\nimport {\n  DisplayTypeResultsList,\n  DisplayTypeResultsGrid,\n  DisplayTypeResultsCalendar\n} from './variants/display-type-results';\nimport { DEFAULT_CURRENCY_CODE, DEFAULT_LOCALE } from './constants';\n\ntype DisplayTypeResultsProps = Pick<\n  CatalogParams,\n  | 'displayBundle'\n  | 'displayAuthorsEnabled'\n  | 'displayStartDateEnabled'\n  | 'displayDescriptionOnCalendar'\n> &\n  Omit<CatalogResultsProps, 'companyHasSessionLevelCustomFieldsFeature'> & {\n    activeDisplayType: GlobalTypes.ContentItemDisplayType;\n    hydratedResults: HydratedContentItem[];\n    priceFormatFn: PriceFormatFn;\n  };\n\nconst DisplayTypeResults = ({\n  activeDisplayType,\n  hydratedResults,\n  displayBundle,\n  displayAuthorsEnabled,\n  displayStartDateEnabled,\n  displayDescriptionOnCalendar,\n  companyTimeZone,\n  onClick,\n  onAddedToQueue,\n  priceFormatFn\n}: DisplayTypeResultsProps): JSX.Element => {\n  const baseProps = {\n    items: hydratedResults,\n    onAddedToQueue,\n    priceFormatFn\n  };\n  let props;\n  switch (activeDisplayType) {\n    case GlobalTypes.ContentItemDisplayType.List: {\n      props = { ...baseProps, onClick, displayStartDateEnabled };\n      return <DisplayTypeResultsList {...props} />;\n    }\n    case GlobalTypes.ContentItemDisplayType.Grid: {\n      props = {\n        ...baseProps,\n        onClick,\n        displayAuthorsEnabled,\n        displayStartDateEnabled,\n        displayBundle\n      };\n      return <DisplayTypeResultsGrid {...props} />;\n    }\n    case GlobalTypes.ContentItemDisplayType.Calendar: {\n      props = { ...baseProps, displayDescriptionOnCalendar, companyTimeZone };\n      return <DisplayTypeResultsCalendar {...props} />;\n    }\n    default: {\n      const _exhaustiveCheck: never = activeDisplayType;\n      return _exhaustiveCheck;\n    }\n  }\n};\n\nconst CatalogResults = ({\n  companyHasSessionLevelCustomFieldsFeature,\n  companyTimeZone,\n  onClick,\n  onAddedToQueue,\n  priceFormat,\n  companyDefaultLocale,\n  currencyCode\n}: CatalogResultsProps): JSX.Element => {\n  const { params } = useCatalog();\n  const {\n    aggregations,\n    aggregationFilters,\n    displayType,\n    resultsDisplayType,\n    results,\n    queryCustomFields,\n    displayBundle,\n    displayAuthorsEnabled,\n    displayStartDateEnabled,\n    displayDescriptionOnCalendar\n  } = params;\n  const { i18n, t } = useTranslation();\n\n  // derived values\n  /**\n   * TODO: check if this description will be always undefined.\n   * When aggregation filters are applied, do server respond with aggregations\n   * different from the filters?\n   */\n  let activeFilterDescription;\n  if (aggregationFilters.length) {\n    const { label: filterLabel, value: filterValue } = aggregationFilters[0];\n    aggregations.forEach(({ label, buckets = [] }) => {\n      if (label === filterLabel) {\n        buckets.forEach(({ value, description }) => {\n          if (value === filterValue) {\n            activeFilterDescription = description;\n          }\n        });\n      }\n    });\n  }\n  const activeDisplayType = displayType || resultsDisplayType;\n  const hydrationCustomFields = companyHasSessionLevelCustomFieldsFeature ? queryCustomFields : {};\n  const hydratedResults = results.map(result =>\n    hydrateContent(i18n, result, companyTimeZone, hydrationCustomFields)\n  );\n  const hasResults = !!hydratedResults.length;\n  let priceFormatFn = priceFormat;\n  if (!priceFormatFn) {\n    const locale = companyDefaultLocale ?? DEFAULT_LOCALE;\n    const currency = currencyCode ?? DEFAULT_CURRENCY_CODE;\n    const formatter = new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency\n    });\n    priceFormatFn = (priceInCents: number) => formatter.format(priceInCents / 100);\n  }\n\n  // components\n  const emptyResults = !hasResults && (\n    <div className=\"bg-gray-100 text-gray-700 p-4 mb-4 rounded\">{t('filter-no-courses')}</div>\n  );\n  const activeFilter = !!activeFilterDescription && (\n    <>\n      {activeFilterDescription}\n      <hr />\n    </>\n  );\n  const resultsProps = {\n    hydratedResults,\n    displayBundle,\n    displayAuthorsEnabled,\n    displayStartDateEnabled,\n    displayDescriptionOnCalendar,\n    companyTimeZone,\n    onClick,\n    onAddedToQueue,\n    priceFormatFn\n  };\n\n  return (\n    <>\n      {activeFilter}\n      {emptyResults}\n      {hasResults && activeDisplayType && (\n        <DisplayTypeResults {...resultsProps} activeDisplayType={activeDisplayType} />\n      )}\n    </>\n  );\n};\n\nCatalogResults.displayName = 'CatalogResults';\nexport default CatalogResults;\n","import React, { cloneElement } from 'react';\nimport { useCatalog } from './core';\nimport { CatalogProps } from './types';\nimport { Pagination } from '@thoughtindustries/pagination';\n\ntype CatalogPaginationProps = Pick<CatalogProps, 'pagination'>;\n\nconst CatalogPagination = ({ pagination }: CatalogPaginationProps): JSX.Element | null => {\n  const { params, urlManager } = useCatalog();\n  const { page = 1, pageSize, total } = params;\n\n  if (!total) {\n    return null;\n  }\n\n  // derived values\n  const getPageLink = urlManager.composeURLForSetPage.bind(urlManager);\n  const props = {\n    page,\n    pageSize,\n    total,\n    getPageLink\n  };\n\n  if (pagination) {\n    return cloneElement(pagination({ ...props }));\n  }\n\n  return <Pagination {...props} />;\n};\n\nCatalogPagination.displayName = 'CatalogPagination';\nexport default CatalogPagination;\n","import React, { FC } from 'react';\nimport { Header } from '@thoughtindustries/header';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogProps } from './types';\nimport CatalogFilters from './catalog-filters';\nimport CatalogAggregations from './catalog-aggregations';\nimport CatalogError from './catalog-error';\nimport CatalogResults from './catalog-results';\nimport CatalogPagination from './catalog-pagination';\n\nconst Catalog: FC<CatalogProps> = ({\n  title,\n  alternateTitleDisplay,\n  pagination,\n  ...restResultsProps\n}: CatalogProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"w-full\">\n      {title && <Header title={title} alternateTitleDisplay={alternateTitleDisplay} />}\n      {!title && <h3>{t('catalog-search-header')}</h3>}\n      <CatalogFilters />\n      <div className=\"w-full\">\n        <CatalogError>\n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"col-span-full md:col-span-1\">\n              <CatalogAggregations />\n            </div>\n            <div className=\"col-span-full md:col-span-3\">\n              <CatalogResults {...restResultsProps} />\n              <CatalogPagination pagination={pagination} />\n            </div>\n          </div>\n        </CatalogError>\n      </div>\n    </div>\n  );\n};\n\nCatalog.displayName = 'Catalog';\n\nexport default Catalog;\n"],"names":["parseAggregationFilters","filters","acc","label","value","DEFAULT_PAGE","DEFAULT_PAGE_SIZE","SORT_DELIMITER","DEFAULT_PARAMS","parseQueryVariables","params","page","token","sort","displayType","resultsDisplayType","aggregationFilters","searchTerm","contentTypes","sortColumn","sortDirection","displayTypeParam","transformedFilters","parseSort","splitSort","field","direction","toEnabledSorts","sortUpdatedAtEnabled","sortCreatedAtEnabled","sortTitleEnabled","sortPublishDateEnabled","sortCourseStartDateEnabled","sortRelevanceEnabled","sorts","SortColumn","SortDirection","toEnabledDisplayTypes","displayTypeListEnabled","displayTypeGridEnabled","displayTypeCalendarEnabled","displayTypes","GlobalTypes.ContentItemDisplayType","parseResponseData","data","error","displayBundle","tokenLabel","total","hasMore","isCurated","aggregations","displayStartDateEnabled","displayAuthorsEnabled","displayDescriptionOnCalendar","contentTypeFilterEnabled","queryCustomFields","contentItems","enabledSorts","enabledDisplayTypes","truthyFilter","x","serializeSort","CatalogURLSearchParams","toInteger","str","parsePageFromQueryParams","parsedPage","parseAggregationFiltersFromQueryParams","labels","values","parsedLabels","parsedValues","index","parseTokenFromQueryParams","parseSearchTermFromQueryParams","parseContentTypesFromQueryParams","parseDisplayTypeFromQueryParams","parseSortFromQueryParams","toRequestParams","result","CatalogURLManager","parsedUrl","pathname","searchString","clonedParams","filter","newFilters","currentFilter","currentLabel","currentValue","newClonedParams","contentType","newContentTypes","currentContentType","item","hiddenFields","name","CatalogContext","createContext","CatalogProvider","children","config","urlManager","useState","setParams","parsedUrlRequestParams","queryVariables","loading","useCatalogContentQuery","didInitialized","useRef","newParams","jsx","DEFAULT_TIMEOUT","DEFAULT_ANIMATION_SPEED","DEFAULT_ELEMENT_TYPE","HeightEqualizerContext","useDebouncedCallback","func","wait","options","_this","lastCallTime","lastInvokeTime","timerId","lastArgs","lastThis","funcRef","mounted","useRAF","leading","trailing","maxing","maxWait","useEffect","debounced","useMemo","invokeFunc","time","args","thisArg","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","trailingEdge","timerExpired","timeWaiting","remainingWait","_i","isInvoking","HeightEqualizer","timeout","animationSpeed","sizes","setSizes","temporarySizes","setTemporarySizes","update","setUpdate","originalChildrenCount","setOriginalChildrenCount","childrenCount","setChildrenCount","handleUpdate","useCallback","debouncedHandleUpdate","useWindowEventListener","filteredSizes","filteredSize","height","elementIndex","e","useHeightEqualizer","context","React","HeightEqualizerElement","as","className","setHeight","innerElement","getHeight","tempHeight","newHeight","inlineStyles","useCatalog","ArrowDownIcon","ArrowRightIcon","CheckIcon","DropdownMenu","id","isExpanded","setIsExpanded","wrapperRef","createRef","useOnClickOutside","handleClick","hasOptions","wrapperClassnames","buttonBaseClassnames","buttonStatusClassnames","dropdownWrapperBaseClassnames","dropdownWrapperClassnames","dropdownWrapperStyles","listItemClassnames","listItemLinkClassnames","selectedMarker","jsxs","clsx","isSelected","link","ContentTypeSelector","resultContentTypes","t","useTranslation","contentTypeFieldLabel","DisplayTypeIconLink","isActive","DisplayTypeIconCalendar","Link","DisplayTypeIconGrid","DisplayTypeIconList","getDisplayTypeComponent","DisplayTypeSelector","activeDisplayType","selectors","props","Component","SearchInput","formAction","inputValue","setInputValue","formRef","handleChange","evt","handleSearch","_a","localizedSortMapping","GlobalTypes.SortColumn","SortSelector","selectedField","selectedDirection","FilterWrapper","RemoveIcon","FilterLink","href","Wrapper","FilterAggregation","removeFilterHref","FilterContentType","FilterSearchTerm","FilterTokenLabel","CatalogFilters","hasActiveSelections","isActiveDisplayTypeCalendar","enableContentTypeFilter","enableSort","hasActiveSelectionsOrContentTypeFilterEnabled","enableDisplayType","columnClassnames","filterContentTypes","url","filterSearchTerm","filterAggregations","filterTokenLabel","AggregationBucket","count","Aggregation","defaultIsExpanded","aggregationBuckets","handleToggle","prevIsExpanded","buttonLinkClassnames","listClassnames","ariaId","CatalogAggregations","useLanguagesQueryQuery","firstAggregationFilterLabel","languages","contents","buckets","query","bucketIndex","isLanguageLabel","languageLabel","code","displayLabel","CatalogError","Fragment","ItemAssetBlock","asset","classNames","PlusIcon","CheckCircleIcon","DesktopComputerIcon","LocationMarkerIcon","ItemQueueButton","onAddedToQueue","isLoading","setIsLoading","wasAddedToQueue","setWasAddedToQueue","btnClassNames","ItemLocationBlock","location","locationIsInPerson","address1","city","state","country","iconWrapperClassnames","iconClassnames","DisplayTypeResultsCalendarMonthlyItem","companyTimeZone","hasPrices","expandedItemId","setExpandedItemId","priceFormatFn","meetingStartDate","courseStartDate","timeZone","locationIsOnline","description","contentTypeAssetAspectRatio","title","priceInCents","callToAction","canAddToQueue","formattedDate","formatTime","expanded","shouldDisplayDescriptionToggle","itemHrefWithId","assetIsWide","tdCount","expandedImageColumnClassnames","expandedContentColumnClassnames","trBaseClassnames","trClassnames","expandedTrClassnames","tdBaseClassnames","borderedTdClassnames","tdClassnames","ctaLinkClassnames","toggleExpanded","DisplayTypeResultsCalendarMonthlyItems","heading","items","restProps","itemBaseProps","thBaseClassnames","DisplayTypeResultsCalendar","contentItemsByMonth","a","b","calendarStartDateA","calendarStartDateB","dayjs","itemsByMonth","calendarStartDate","month","_","monthlyItems","ItemLinkWrapper","onClick","itemIsActiveOrWebinarOrEvent","ItemRibbon","ribbon","attached","attachedClassnames","contrastColor","color","darkerColor","wrapperStyles","wrapperAttachedClassnames","limitText","text","maxLength","HeightEqualizerElementWrapper","ItemCompletedBlock","ItemTitleBlock","ItemSourceBlock","contentTypeLabel","source","Star","marked","Stars","gradePercentage","stars","remainder","v","i","ItemCtaBlock","ItemPriceBlock","hasAvailability","suggestedRetailPriceInCents","ItemBundleBlock","annualPriceInCents","slug","linkProps","planCurrencyClassnames","planIntervalClassnames","DisplayTypeResultsGridItem","isCompleted","authors","rating","availabilityStatus","displayAuthors","DisplayTypeResultsGrid","isNotCompleted","sourceWithAuthors","sourceWithoutAuthors","getContentColumnClassnames","showCallToAction","hasAsset","DisplayTypeResultsListItem","titleColumnClassnames","imageColumnClassnames","contentColumnClassnames","ctaColumnClassnames","ctaClassnames","ribbonAttachedClassnames","DisplayTypeResultsList","DEFAULT_LOCALE","DEFAULT_CURRENCY_CODE","DisplayTypeResults","hydratedResults","baseProps","CatalogResults","companyHasSessionLevelCustomFieldsFeature","priceFormat","companyDefaultLocale","currencyCode","results","i18n","activeFilterDescription","filterLabel","filterValue","hydrationCustomFields","hydrateContent","hasResults","locale","currency","formatter","emptyResults","CatalogPagination","pagination","pageSize","getPageLink","cloneElement","Pagination","Catalog","alternateTitleDisplay","restResultsProps","Header"],"mappings":"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","x_google_ignoreList":[13]}