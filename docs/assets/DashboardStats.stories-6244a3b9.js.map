{"version":3,"file":"DashboardStats.stories-6244a3b9.js","sources":["../../packages/dashboard-stats/src/graphql/UserStats.generated.tsx","../../packages/dashboard-stats/src/components/icons.tsx","../../packages/dashboard-stats/src/components/dashboard-stats.tsx"],"sourcesContent":["import * as Types from './global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserStatsQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type UserStatsQuery = {\n  __typename?: 'Query';\n  CurrentUser?: {\n    __typename?: 'User';\n    certificatesCount: number;\n    collaborationsCount: number;\n    availableCoursesCount: number;\n    startedCoursesCount: number;\n    completedCoursesCount: number;\n  };\n};\n\nexport const UserStatsDocument = gql`\n  query UserStats {\n    CurrentUser {\n      certificatesCount\n      collaborationsCount\n      availableCoursesCount\n      startedCoursesCount\n      completedCoursesCount\n    }\n  }\n`;\n\n/**\n * __useUserStatsQuery__\n *\n * To run a query within a React component, call `useUserStatsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserStatsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserStatsQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserStatsQuery, UserStatsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserStatsQuery, UserStatsQueryVariables>(UserStatsDocument, options);\n}\nexport function useUserStatsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserStatsQuery, UserStatsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserStatsQuery, UserStatsQueryVariables>(UserStatsDocument, options);\n}\nexport type UserStatsQueryHookResult = ReturnType<typeof useUserStatsQuery>;\nexport type UserStatsLazyQueryHookResult = ReturnType<typeof useUserStatsLazyQuery>;\nexport type UserStatsQueryResult = Apollo.QueryResult<UserStatsQuery, UserStatsQueryVariables>;\n","import React from 'react';\n\nexport const NotebookIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"12\"\n    height=\"12\"\n    fill=\"currentColor\"\n    viewBox=\"0 -4 20 20\"\n  >\n    <path d=\"M5 10.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\" />\n    <path d=\"M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z\" />\n    <path d=\"M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z\" />\n  </svg>\n);\n\nexport const IndexIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"14\"\n    height=\"14\"\n    fill=\"currentColor\"\n    viewBox=\"0 0 20 16\"\n  >\n    <path d=\"M4.98 4a.5.5 0 0 0-.39.188L1.54 8H6a.5.5 0 0 1 .5.5 1.5 1.5 0 1 0 3 0A.5.5 0 0 1 10 8h4.46l-3.05-3.812A.5.5 0 0 0 11.02 4H4.98zm9.954 5H10.45a2.5 2.5 0 0 1-4.9 0H1.066l.32 2.562a.5.5 0 0 0 .497.438h12.234a.5.5 0 0 0 .496-.438L14.933 9zM3.809 3.563A1.5 1.5 0 0 1 4.981 3h6.038a1.5 1.5 0 0 1 1.172.563l3.7 4.625a.5.5 0 0 1 .105.374l-.39 3.124A1.5 1.5 0 0 1 14.117 13H1.883a1.5 1.5 0 0 1-1.489-1.314l-.39-3.124a.5.5 0 0 1 .106-.374l3.7-4.625z\" />\n  </svg>\n);\n\nexport const CheckIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    viewBox=\"0 2 16 14\"\n  >\n    <path d=\"M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z\" />\n  </svg>\n);\n\nexport const StarIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"12\"\n    height=\"12\"\n    fill=\"currentColor\"\n    viewBox=\"0 -4 20 20\"\n  >\n    <path d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\" />\n  </svg>\n);\n\nexport const UsersIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"14\"\n    height=\"14\"\n    fill=\"currentColor\"\n    viewBox=\"0 -2 20 18\"\n  >\n    <path d=\"M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z\" />\n  </svg>\n);\n","import React from 'react';\nimport { StatsProps } from './types';\nimport { NotebookIcon, IndexIcon, CheckIcon, StarIcon, UsersIcon } from './icons';\nimport { useTranslation } from 'react-i18next';\nimport { useUserStatsQuery } from '../graphql';\nimport { LoadingDots } from '@thoughtindustries/content';\n\nenum Colors {\n  Sky = 'text-sky-700',\n  Pink = 'text-pink-700',\n  Gray = 'text-gray-600',\n  Green = 'text-green-600'\n}\n\nconst Stat = ({ ...props }: StatsProps) => {\n  const { label, stat, color, icon } = props;\n\n  const statsStyle = 'border border-solid border-gray-200 text-center m-1.5 pb-2 pt-3 sm:w-full';\n  const statTitleStyle = 'flex flex-row justify-center text-gray-500';\n  const labelStyle = 'text-xs';\n  const iconStyle = 'inline sm:hidden md:inline';\n  const statStyle = `text-5xl ${color}`;\n\n  return (\n    <div className={statsStyle}>\n      <div className={statTitleStyle}>\n        <div className={iconStyle}>{icon}</div>\n        <div className={labelStyle}>{label}</div>\n      </div>\n      <div className={statStyle}>{stat}</div>\n    </div>\n  );\n};\n\nconst DashboardStats = (): JSX.Element => {\n  const statContainer =\n    'flex flex-col w-full sm:flex-row justify-center border border-solid border-gray-200 p-1.5 shadow-lg';\n\n  const { t } = useTranslation();\n  const { data, loading, error } = useUserStatsQuery();\n\n  // Create components for loading and errors\n  if (loading) return <LoadingDots />;\n  if (error) return <p>Error!</p>;\n\n  return (\n    <>\n      {data?.CurrentUser && (\n        <div className={statContainer}>\n          <Stat\n            label={t('dashboard.available').toUpperCase()}\n            stat={data ? data.CurrentUser.availableCoursesCount : 0}\n            color={Colors.Sky}\n            icon={<NotebookIcon />}\n          />\n          <Stat\n            label={t('dashboard.started').toUpperCase()}\n            stat={data ? data.CurrentUser.startedCoursesCount : 0}\n            color={Colors.Green}\n            icon={<IndexIcon />}\n          />\n          <Stat\n            label={t('dashboard.completed').toUpperCase()}\n            stat={data ? data.CurrentUser.completedCoursesCount : 0}\n            color={Colors.Pink}\n            icon={<CheckIcon />}\n          />\n          {data && data.CurrentUser.certificatesCount > 0 && (\n            <Stat\n              label={t('dashboard.certificates').toUpperCase()}\n              stat={data.CurrentUser.certificatesCount}\n              color={Colors.Green}\n              icon={<StarIcon />}\n            />\n          )}\n          <Stat\n            label={t('dashboard.collaborations').toUpperCase()}\n            stat={data ? data.CurrentUser.collaborationsCount : 0}\n            color={Colors.Gray}\n            icon={<UsersIcon />}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nDashboardStats.displayName = 'DashboardStats';\nexport default DashboardStats;\n"],"names":["defaultOptions","UserStatsDocument","gql","useUserStatsQuery","baseOptions","options","Apollo.useQuery","useUserStatsLazyQuery","Apollo.useLazyQuery","NotebookIcon","jsxs","jsx","IndexIcon","CheckIcon","StarIcon","UsersIcon","Stat","props","label","stat","color","icon","statsStyle","statTitleStyle","labelStyle","iconStyle","statStyle","DashboardStats","statContainer","t","useTranslation","data","loading","error","LoadingDots"],"mappings":"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"}