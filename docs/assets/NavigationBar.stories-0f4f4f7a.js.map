{"version":3,"file":"NavigationBar.stories-0f4f4f7a.js","sources":["../../packages/navigation-bar/src/context.ts","../../packages/navigation-bar/src/icons.tsx","../../packages/navigation-bar/src/use-mobile-topbar-behavior.ts","../../packages/navigation-bar/src/navigation-bar.tsx","../../packages/navigation-bar/src/use-navigation-bar.ts","../../packages/navigation-bar/src/navigation-bar-link.tsx","../../packages/navigation-bar/stories/NavigationBar.stories.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport { NavigationBarContextType } from './types';\n\nconst NavigationBarContext = createContext<NavigationBarContextType | undefined>(undefined);\n\nexport default NavigationBarContext;\n","import React from 'react';\n\nexport const MenuIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    strokeWidth={2}\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4 6h16M4 12h16M4 18h16\" />\n  </svg>\n);\n\nexport const CaretDownIcon = (): JSX.Element => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n    <path d=\"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\" />\n  </svg>\n);\n\nexport const CaretRightIcon = (): JSX.Element => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n    <path d=\"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\" />\n  </svg>\n);\n","import { RefObject, useCallback, useEffect, useRef, useState } from 'react';\nimport { ScreenSize, useScreenSize, usePrevious } from '@thoughtindustries/hooks';\n\nexport interface MobileTopbarBehavior<TRef extends HTMLElement> {\n  scrollableRef: RefObject<TRef>;\n  navigate: (direction: number) => void;\n  reset: () => void;\n  isSmallScreen: boolean;\n  isExpanded: boolean;\n  toggleExpand: () => void;\n  currentMenuId?: string;\n}\n\nexport function useMobileTopbarBehavior<TRef extends HTMLElement>(): MobileTopbarBehavior<TRef> {\n  const scrollableRef: RefObject<TRef> = useRef(null);\n  const screenSize = useScreenSize();\n  const prevScreenSize = usePrevious(screenSize);\n  const [currentLevel, setCurrentLevel] = useState<number>(0);\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [currentMenuId, setCurrentMenuId] = useState<string | undefined>(undefined);\n\n  const navigate = useCallback(\n    (direction: number, menuId?: string) => {\n      if (scrollableRef.current) {\n        const newLevel = currentLevel + direction;\n        const percentage = -newLevel * 100;\n        scrollableRef.current.style.transform = `translateX(${percentage}%)`;\n        setCurrentLevel(newLevel);\n        setCurrentMenuId(menuId);\n      }\n    },\n    [currentLevel]\n  );\n\n  const reset = useCallback(() => {\n    if (scrollableRef.current) {\n      scrollableRef.current.style.transform = 'translateX(-0%)';\n      setCurrentLevel(0);\n      setIsExpanded(false);\n      setCurrentMenuId(undefined);\n    }\n  }, []);\n\n  const toggleExpand = useCallback(() => {\n    setIsExpanded(isExpanded => !isExpanded);\n    if (isExpanded) {\n      reset();\n    }\n  }, [isExpanded]);\n\n  useEffect(() => {\n    const isCurrentSmallScreen = screenSize === ScreenSize.Small;\n    const isPreviousSmallScreen = prevScreenSize === ScreenSize.Small;\n    const changedFromSmallScreen = isPreviousSmallScreen && !isCurrentSmallScreen;\n    const changedToSmallScreen = !isPreviousSmallScreen && isCurrentSmallScreen;\n    if (changedFromSmallScreen || changedToSmallScreen) {\n      reset();\n    }\n  }, [screenSize, prevScreenSize, reset]);\n\n  return {\n    scrollableRef,\n    navigate,\n    reset,\n    isSmallScreen: screenSize === ScreenSize.Small,\n    isExpanded,\n    toggleExpand,\n    currentMenuId\n  };\n}\n","import clsx from 'clsx';\nimport React, { Children, cloneElement, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport NavigationBarContext from './context';\nimport { MenuIcon } from './icons';\nimport { NavigationBarProps } from './types';\nimport { useMobileTopbarBehavior } from './use-mobile-topbar-behavior';\n\nconst NavigationBar = ({ children }: NavigationBarProps): JSX.Element => {\n  const { t } = useTranslation();\n  const { scrollableRef, navigate, isSmallScreen, isExpanded, toggleExpand, currentMenuId } =\n    useMobileTopbarBehavior();\n  const contextValue = useMemo(\n    () => ({\n      navigate,\n      isSmallScreen,\n      currentMenuId\n    }),\n    [navigate, isSmallScreen, currentMenuId]\n  );\n\n  // stylings\n  const menuButtonClassnames = clsx(\n    'flex flex-row items-center gap-x-1 h-8 leading-8 transition-colors ease-in-out duration-200 uppercase text-base font-bold',\n    isExpanded ? 'text-gray-800' : 'text-link-hover'\n  );\n\n  return (\n    <NavigationBarContext.Provider value={contextValue}>\n      <div className=\"w-auto -ml-4 -mr-4 mt-0 mb-0 max-w-none\">\n        <div className=\"w-full relative pl-4 pr-4\">\n          <nav\n            className=\"flex flex-col border-b border-solid border-gray-300 overflow-hidden md:overflow-visible\"\n            role=\"navigation\"\n          >\n            <div className=\"py-1 flex flex-row justify-center md:hidden bg-white\">\n              <button className={menuButtonClassnames} onClick={toggleExpand}>\n                <span>{t('mobile-menu-button')}</span>\n                <span className=\"w-6 h-6\">\n                  <MenuIcon />\n                </span>\n              </button>\n            </div>\n            <section\n              ref={scrollableRef}\n              className={clsx(\n                'relative w-auto transition-all duration-300',\n                isSmallScreen && !isExpanded ? 'hidden' : ''\n              )}\n            >\n              <ul className=\"flex-col flex-grow pb-4 md:pb-0 md:flex md:justify-start md:flex-row\">\n                {Children.map(children, (child, index) => cloneElement(child, { index }))}\n              </ul>\n            </section>\n          </nav>\n        </div>\n      </div>\n    </NavigationBarContext.Provider>\n  );\n};\n\nNavigationBar.displayName = 'NavigationBar';\n\nexport default NavigationBar;\n","import React from 'react';\nimport NavigationBarContext from './context';\n\nexport default function useNavigationBar() {\n  const context = React.useContext(NavigationBarContext);\n\n  if (!context) {\n    throw new Error('Expected a Navigation Bar Context, but no such Context was found');\n  }\n\n  return context;\n}\n","import React, {\n  Children,\n  createRef,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\nimport clsx from 'clsx';\nimport { useTranslation } from 'react-i18next';\nimport { NavigationBarLinkProps, NavigationBarLinkSubLinkProps } from './types';\nimport useNavigationBar from './use-navigation-bar';\nimport { CaretDownIcon, CaretRightIcon } from './icons';\nimport { useOnClickOutside, useWindowEventListener } from '@thoughtindustries/hooks';\n\ninterface LinkProps {\n  href?: string;\n  target?: string;\n}\n\n// stylings\nconst subLinkWrapperClassnames = 'bg-white';\nconst getSubLinkClassnames = (isBackLink?: boolean) => {\n  const baseClassnames =\n    'py-2 md:py-0 px-3 hover:text-accent hover:font-semibold leading-5 md:whitespace-no-wrap block w-full';\n  const backLinkClassnames = isBackLink\n    ? 'text-link-hover text-xs font-normal text-left'\n    : 'text-accent md:text-link-hover hover:text-accent text-sm md:text-xs font-semibold md:font-normal uppercase';\n  return clsx(baseClassnames, backLinkClassnames);\n};\n\nconst SubLink = ({ label, href, linkOpenInNewTab }: NavigationBarLinkSubLinkProps): JSX.Element => {\n  // derived values\n  const linkProps: LinkProps = {\n    href\n  };\n  if (linkOpenInNewTab) {\n    linkProps.target = '_blank';\n  }\n\n  return (\n    <li className={subLinkWrapperClassnames}>\n      <a {...linkProps} className={getSubLinkClassnames()}>\n        {label}\n      </a>\n    </li>\n  );\n};\n\nconst NavigationBarLink = ({\n  index,\n  label,\n  href,\n  linkOpenInNewTab,\n  children\n}: NavigationBarLinkProps): JSX.Element => {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const wrapperRef = createRef<HTMLLIElement>();\n  const { isSmallScreen, navigate, currentMenuId } = useNavigationBar();\n\n  // derived values\n  const id = `navbar-link-${index}`;\n  const totalSubLinks = Children.count(children);\n  const hasDropdown = totalSubLinks > 0;\n  const linkProps: LinkProps = {\n    href\n  };\n  if (linkOpenInNewTab) {\n    linkProps.target = '_blank';\n  }\n\n  // event handler\n  const handleClick = useCallback(\n    (evt: SyntheticEvent) => {\n      evt.preventDefault();\n      setIsExpanded(true);\n      if (isSmallScreen) {\n        navigate(1, id);\n      }\n    },\n    [isSmallScreen, navigate, id]\n  );\n  const handleBackClick = useCallback(\n    (evt: SyntheticEvent) => {\n      evt.preventDefault();\n      setIsExpanded(false);\n      navigate(-1);\n    },\n    [navigate]\n  );\n  const collapseDropdown = useCallback(() => {\n    if (!isSmallScreen) {\n      setIsExpanded(false);\n    }\n  }, [isSmallScreen]);\n  useOnClickOutside(wrapperRef, collapseDropdown);\n  useWindowEventListener('resize', collapseDropdown);\n\n  // effect\n  useEffect(() => {\n    if (currentMenuId !== id) {\n      setIsExpanded(false);\n    }\n  }, [currentMenuId, id]);\n\n  // stylings\n  const linkWrapperClassnames = 'static md:relative bg-white px-4';\n  const dropdownWrapperBaseClassnames =\n    'absolute top-0 md:top-auto left-full md:left-0 w-full md:w-auto z-50 border-none divide-y-none md:border md:border-solid md:border-black md:divide-y md:divide-black';\n  const dropdownWrapperClassnames = isExpanded ? 'visible' : 'invisible';\n  const linkOrButtonBaseClassnames =\n    'font-semibold uppercase text-sm leading-6 flex items-center justify-between md:justify-start gap-x-2 text-accent hover:text-link-hover py-3 md:py-0';\n\n  return (\n    <li className={linkWrapperClassnames} ref={wrapperRef}>\n      {hasDropdown && (\n        <>\n          <button className={clsx(linkOrButtonBaseClassnames, 'w-full')} onClick={handleClick}>\n            {label}\n            <span className=\"w-3 h-3 text-link-hover\">\n              {isSmallScreen && <CaretRightIcon />}\n              {!isSmallScreen && <CaretDownIcon />}\n            </span>\n          </button>\n          <ul className={clsx(dropdownWrapperBaseClassnames, dropdownWrapperClassnames)}>\n            <li className={clsx(subLinkWrapperClassnames, 'md:hidden')}>\n              <button className={getSubLinkClassnames(true)} onClick={handleBackClick}>\n                {t('mobile-back-button')}\n              </button>\n            </li>\n            {children}\n          </ul>\n        </>\n      )}\n      {!hasDropdown && (\n        <a {...linkProps} className={linkOrButtonBaseClassnames}>\n          {label}\n        </a>\n      )}\n    </li>\n  );\n};\n\nNavigationBarLink.displayName = 'NavigationBarLink';\nNavigationBarLink.SubLink = SubLink;\n\nexport default NavigationBarLink;\n","import React from 'react';\nimport { StoryObj, Meta } from '@storybook/react';\nimport { NavigationBar, NavigationBarLink, NavigationBarProps } from '../src';\nconst meta: Meta<NavigationBarProps> = {\n  component: NavigationBar,\n  title: 'Packages/Navigation Bar'\n};\nexport default meta;\ntype NavigationBar = StoryObj<NavigationBarProps>;\nexport const Base: NavigationBar = {\n  render: () => <NavigationBar>\n      <NavigationBarLink label=\"Link 1\">\n        <NavigationBarLink.SubLink label=\"Sub link 1-1\" href=\"/sublink-1-1\" linkOpenInNewTab />\n        <NavigationBarLink.SubLink label=\"Sub link 1-2\" href=\"/sublink-1-2\" />\n      </NavigationBarLink>\n      <NavigationBarLink label=\"Link 2\" href=\"/link-2\" linkOpenInNewTab />\n      <NavigationBarLink label=\"Link 3\">\n        <NavigationBarLink.SubLink label=\"Sub link 3-1\" href=\"/sublink-3-1\" linkOpenInNewTab />\n        <NavigationBarLink.SubLink label=\"Sub link 3-2\" href=\"/sublink-3-2\" />\n      </NavigationBarLink>\n      <NavigationBarLink label=\"Link 4\" href=\"/link-4\" />\n    </NavigationBar>\n};\nBase.parameters = {\n  ...Base.parameters,\n  docs: {\n    ...Base.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <NavigationBar>\\n      <NavigationBarLink label=\\\"Link 1\\\">\\n        <NavigationBarLink.SubLink label=\\\"Sub link 1-1\\\" href=\\\"/sublink-1-1\\\" linkOpenInNewTab />\\n        <NavigationBarLink.SubLink label=\\\"Sub link 1-2\\\" href=\\\"/sublink-1-2\\\" />\\n      </NavigationBarLink>\\n      <NavigationBarLink label=\\\"Link 2\\\" href=\\\"/link-2\\\" linkOpenInNewTab />\\n      <NavigationBarLink label=\\\"Link 3\\\">\\n        <NavigationBarLink.SubLink label=\\\"Sub link 3-1\\\" href=\\\"/sublink-3-1\\\" linkOpenInNewTab />\\n        <NavigationBarLink.SubLink label=\\\"Sub link 3-2\\\" href=\\\"/sublink-3-2\\\" />\\n      </NavigationBarLink>\\n      <NavigationBarLink label=\\\"Link 4\\\" href=\\\"/link-4\\\" />\\n    </NavigationBar>\\n}\",\n      ...Base.parameters?.docs?.source\n    }\n  }\n};"],"names":["NavigationBarContext","createContext","MenuIcon","jsx","CaretDownIcon","CaretRightIcon","useMobileTopbarBehavior","scrollableRef","useRef","screenSize","useScreenSize","prevScreenSize","usePrevious","currentLevel","setCurrentLevel","useState","isExpanded","setIsExpanded","currentMenuId","setCurrentMenuId","navigate","useCallback","direction","menuId","newLevel","percentage","reset","toggleExpand","useEffect","isCurrentSmallScreen","ScreenSize","isPreviousSmallScreen","NavigationBar","children","useTranslation","isSmallScreen","contextValue","useMemo","menuButtonClassnames","clsx","jsxs","Children","child","index","cloneElement","useNavigationBar","context","React","subLinkWrapperClassnames","getSubLinkClassnames","isBackLink","SubLink","label","href","linkOpenInNewTab","linkProps","NavigationBarLink","t","wrapperRef","createRef","id","hasDropdown","handleClick","evt","handleBackClick","collapseDropdown","useOnClickOutside","useWindowEventListener","linkWrapperClassnames","dropdownWrapperBaseClassnames","dropdownWrapperClassnames","linkOrButtonBaseClassnames","Fragment","meta","Base","_a","_c","_b"],"mappings":"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"}