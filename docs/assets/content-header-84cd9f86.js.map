{"version":3,"file":"content-header-84cd9f86.js","sources":["../../node_modules/graphql/jsutils/isObjectLike.mjs","../../node_modules/graphql/jsutils/invariant.mjs","../../node_modules/graphql/language/location.mjs","../../node_modules/graphql/language/printLocation.mjs","../../node_modules/graphql/error/GraphQLError.mjs","../../node_modules/graphql/error/syntaxError.mjs","../../node_modules/graphql/language/directiveLocation.mjs","../../node_modules/graphql/language/tokenKind.mjs","../../node_modules/graphql/language/lexer.mjs","../../node_modules/graphql/language/parser.mjs","../../node_modules/graphql-tag/lib/index.js","../../node_modules/@apollo/client/react/hooks/useApolloClient.js","../../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js","../../node_modules/@apollo/client/react/parser/index.js","../../node_modules/@apollo/client/react/hooks/useQuery.js","../../node_modules/@apollo/client/react/hooks/useLazyQuery.js","../../packages/content/src/graphql/queries/ContentFragment.generated.tsx","../../packages/content/src/graphql/queries/LocationFragment.generated.tsx","../../packages/content/src/graphql/queries/CatalogMetaFragment.generated.tsx","../../packages/content/src/graphql/queries/CatalogContent.generated.tsx","../../packages/content/src/graphql/queries/CatalogQuery.generated.tsx","../../packages/content/src/graphql/queries/CourseGroupBySlug.generated.tsx","../../packages/content/src/graphql/queries/LearningPathBySlug.generated.tsx","../../packages/content/src/graphql/queries/Languages.generated.tsx","../../packages/content/src/graphql/queries/QueryContents.generated.tsx","../../packages/content/src/graphql/queries/RssItems.generated.tsx","../../packages/content/src/graphql/queries/UserRecentContent.generated.tsx","../../packages/content/src/graphql/queries/UserContentItems.generated.tsx","../../packages/content/src/graphql/queries/UserArchives.generated.tsx","../../packages/content/src/graphql/queries/UserWaitlist.generated.tsx","../../packages/content/src/graphql/queries/UserBookmarks.generated.tsx","../../packages/content/src/graphql/queries/UserCertificates.generated.tsx","../../packages/content/src/graphql/queries/UserContentGroups.generated.tsx","../../packages/content/src/graphql/queries/UserBookmarksByFolder.generated.tsx","../../packages/content/src/graphql/queries/UserCourseCompletionProgress.generated.tsx","../../packages/content/src/graphql/queries/UserCourseProgress.generated.tsx","../../packages/content/src/graphql/queries/UserCourseAwardCounts.generated.tsx","../../packages/content/src/graphql/queries/UserCourseCollaborations.generated.tsx","../../packages/content/src/graphql/queries/UserCertificateFields.generated.tsx","../../packages/content/src/components/content-header/content-header.tsx"],"sourcesContent":["/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport { useContext } from 'react';\nimport { getApolloContext } from \"../context/index.js\";\nexport function useApolloClient(override) {\n    var context = useContext(getApolloContext());\n    var client = override || context.client;\n    __DEV__ ? invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n        'instance in via options.') : invariant(!!client, 32);\n    return client;\n}\n//# sourceMappingURL=useApolloClient.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {\n    var value = getSnapshot();\n    if (__DEV__ &&\n        !didWarnUncachedGetSnapshot &&\n        value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n    }\n    var _a = React.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];\n    if (canUseLayoutEffect) {\n        React.useLayoutEffect(function () {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        }, [subscribe, value, getSnapshot]);\n    }\n    else {\n        Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n    }\n    React.useEffect(function () {\n        if (checkIfSnapshotChanged(inst)) {\n            forceUpdate({ inst: inst });\n        }\n        return subscribe(function handleStoreChange() {\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        });\n    }, [subscribe]);\n    return value;\n});\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n//# sourceMappingURL=useSyncExternalStore.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 33);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === 'FragmentDefinition') {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === 'OperationDefinition') {\n            switch (x.operation) {\n                case 'query':\n                    queries.push(x);\n                    break;\n                case 'mutation':\n                    mutations.push(x);\n                    break;\n                case 'subscription':\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    __DEV__ ? invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), 34);\n    __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") +\n        \"subscriptions and \".concat(mutations.length, \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 35);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") +\n        \"\".concat(definitions.length, \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 36);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nexport function verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") +\n        \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 37);\n}\n//# sourceMappingURL=index.js.map","import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState, } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus, } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n    var stateRef = useRef();\n    if (!stateRef.current ||\n        client !== stateRef.current.client ||\n        query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    var _a = useState(0), _tick = _a[0], setTick = _a[1];\n    state.forceUpdate = function () {\n        setTick(function (tick) { return tick + 1; });\n    };\n    return state;\n}\nvar InternalState = (function () {\n    function InternalState(client, query, previous) {\n        this.client = client;\n        this.query = query;\n        this.ssrDisabledResult = maybeDeepFreeze({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.loading,\n        });\n        this.skipStandbyResult = maybeDeepFreeze({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.ready,\n        });\n        this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n        verifyDocumentType(query, DocumentType.Query);\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    InternalState.prototype.forceUpdate = function () {\n        __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n    };\n    InternalState.prototype.executeQuery = function (options) {\n        var _this = this;\n        var _a;\n        if (options.query) {\n            Object.assign(this, { query: options.query });\n        }\n        this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n        this.forceUpdate();\n        return new Promise(function (resolve) {\n            var result;\n            concast.subscribe({\n                next: function (value) {\n                    result = value;\n                },\n                error: function () {\n                    resolve(_this.toQueryResult(_this.observable.getCurrentResult()));\n                },\n                complete: function () {\n                    resolve(_this.toQueryResult(result));\n                }\n            });\n        });\n    };\n    InternalState.prototype.useQuery = function (options) {\n        var _this = this;\n        this.renderPromises = useContext(getApolloContext()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = useSyncExternalStore(useCallback(function () {\n            if (_this.renderPromises) {\n                return function () { };\n            }\n            var onNext = function () {\n                var previousResult = _this.result;\n                var result = obsQuery.getCurrentResult();\n                if (previousResult &&\n                    previousResult.loading === result.loading &&\n                    previousResult.networkStatus === result.networkStatus &&\n                    equal(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function (error) {\n                var last = obsQuery[\"last\"];\n                subscription.unsubscribe();\n                try {\n                    obsQuery.resetLastResults();\n                    subscription = obsQuery.subscribe(onNext, onError);\n                }\n                finally {\n                    obsQuery[\"last\"] = last;\n                }\n                if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult ||\n                    (previousResult && previousResult.loading) ||\n                    !equal(error, previousResult.error)) {\n                    _this.setResult({\n                        data: (previousResult && previousResult.data),\n                        error: error,\n                        loading: false,\n                        networkStatus: NetworkStatus.error,\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            return function () { return setTimeout(function () { return subscription.unsubscribe(); }); };\n        }, [\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches,\n        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });\n        this.unsafeHandlePartialRefetch(result);\n        return this.toQueryResult(result);\n    };\n    InternalState.prototype.useOptions = function (options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                this.observable.reobserve(this.getObsQueryOptions());\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) &&\n            this.queryHookOptions.ssr === false &&\n            !this.queryHookOptions.skip) {\n            this.result = this.ssrDisabledResult;\n        }\n        else if (this.queryHookOptions.skip ||\n            this.watchQueryOptions.fetchPolicy === 'standby') {\n            this.result = this.skipStandbyResult;\n        }\n        else if (this.result === this.ssrDisabledResult ||\n            this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function () {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults)\n            toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(mergeOptions);\n    };\n    InternalState.prototype.createWatchQueryOptions = function (_a) {\n        var _b;\n        if (_a === void 0) { _a = {}; }\n        var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });\n        if (this.renderPromises &&\n            (watchQueryOptions.fetchPolicy === 'network-only' ||\n                watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n            watchQueryOptions.fetchPolicy = 'cache-first';\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: 'standby',\n            });\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||\n                    this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function () {\n        var _a, _b;\n        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n            \"cache-first\");\n    };\n    InternalState.prototype.onCompleted = function (data) { };\n    InternalState.prototype.onError = function (error) { };\n    InternalState.prototype.useObservableQuery = function () {\n        var obsQuery = this.observable =\n            this.renderPromises\n                && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n                || this.observable\n                || this.client.watchQuery(this.getObsQueryOptions());\n        this.obsQueryFields = useMemo(function () { return ({\n            refetch: obsQuery.refetch.bind(obsQuery),\n            reobserve: obsQuery.reobserve.bind(obsQuery),\n            fetchMore: obsQuery.fetchMore.bind(obsQuery),\n            updateQuery: obsQuery.updateQuery.bind(obsQuery),\n            startPolling: obsQuery.startPolling.bind(obsQuery),\n            stopPolling: obsQuery.stopPolling.bind(obsQuery),\n            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n        }); }, [obsQuery]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false ||\n            this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function (nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function (result) {\n        var _this = this;\n        if (!result.loading) {\n            var error_1 = this.toApolloError(result);\n            Promise.resolve().then(function () {\n                if (error_1) {\n                    _this.onError(error_1);\n                }\n                else if (result.data) {\n                    _this.onCompleted(result.data);\n                }\n            }).catch(function (error) {\n                __DEV__ && invariant.warn(error);\n            });\n        }\n    };\n    InternalState.prototype.toApolloError = function (result) {\n        return isNonEmptyArray(result.errors)\n            ? new ApolloError({ graphQLErrors: result.errors })\n            : result.error;\n    };\n    InternalState.prototype.getCurrentResult = function () {\n        if (!this.result) {\n            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function (result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult)\n            return queryResult;\n        var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n        this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData }));\n        if (!queryResult.error && isNonEmptyArray(result.errors)) {\n            queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n        if (result.partial &&\n            this.queryHookOptions.partialRefetch &&\n            !result.loading &&\n            (!result.data || Object.keys(result.data).length === 0) &&\n            this.observable.options.fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: NetworkStatus.refetch,\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}());\n//# sourceMappingURL=useQuery.js.map","import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = [\n    'refetch',\n    'reobserve',\n    'fetchMore',\n    'updateQuery',\n    'startPolling',\n    'subscribeToMore',\n];\nexport function useLazyQuery(query, options) {\n    var _a;\n    var execOptionsRef = useRef();\n    var optionsRef = useRef();\n    var queryRef = useRef();\n    var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n    var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n    optionsRef.current = merged;\n    queryRef.current = document;\n    var internalState = useInternalState(useApolloClient(options && options.client), document);\n    var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), { skip: !execOptionsRef.current }));\n    var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy ||\n        internalState.getDefaultFetchPolicy();\n    var result = Object.assign(useQueryResult, {\n        called: !!execOptionsRef.current,\n    });\n    var eagerMethods = useMemo(function () {\n        var eagerMethods = {};\n        var _loop_1 = function (key) {\n            var method = result[key];\n            eagerMethods[key] = function () {\n                if (!execOptionsRef.current) {\n                    execOptionsRef.current = Object.create(null);\n                    internalState.forceUpdate();\n                }\n                return method.apply(this, arguments);\n            };\n        };\n        for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n            var key = EAGER_METHODS_1[_i];\n            _loop_1(key);\n        }\n        return eagerMethods;\n    }, []);\n    Object.assign(result, eagerMethods);\n    var execute = useCallback(function (executeOptions) {\n        execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {\n            fetchPolicy: initialFetchPolicy,\n        };\n        var options = mergeOptions(optionsRef.current, __assign({ query: queryRef.current }, execOptionsRef.current));\n        var promise = internalState\n            .executeQuery(__assign(__assign({}, options), { skip: false }))\n            .then(function (queryResult) { return Object.assign(queryResult, eagerMethods); });\n        promise.catch(function () { });\n        return promise;\n    }, []);\n    return [execute, result];\n}\n//# sourceMappingURL=useLazyQuery.js.map","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nexport type ContentFragmentFragment = {\n  __typename?: 'Content';\n  alternativePricingType?: Types.AlternativePricingType;\n  asset?: string;\n  altDescriptionBody?: string;\n  alternativePricingRef?: number;\n  authors?: Array<string>;\n  authorsAndInstructors?: Array<string>;\n  availabilityStatus?: string;\n  bulkPurchasingEnabled?: boolean;\n  canAddToQueue?: boolean;\n  contentTypeAssetAspectRatio?: string;\n  contentTypeLabel?: string;\n  courseEndDate?: string;\n  courseGracePeriodEnded: boolean;\n  courseGroup?: string;\n  coursePresold: boolean;\n  courseStartDate?: string;\n  createdAt?: string;\n  currentUserMayReschedule: boolean;\n  currentUserUnmetCoursePrerequisites?: Array<string>;\n  currentUserUnmetLearningPathPrerequisites?: Array<string>;\n  customFields?: any;\n  description?: string;\n  displayCourse?: string;\n  displayCourseSlug?: string;\n  displayDate?: string;\n  embeddedEnabled?: boolean;\n  enrollmentCount?: number;\n  expiresAt?: string;\n  kind?: Types.ContentKind;\n  hasChildren: boolean;\n  hideCourseDescription: boolean;\n  id: string;\n  isActive: boolean;\n  language?: string;\n  meetingStartDate?: string;\n  metaDescription?: string;\n  metaTitle?: string;\n  priceInCents?: number;\n  publishDate?: string;\n  rating?: number;\n  seatsLimit?: number;\n  sessionTitle?: string;\n  status?: Types.Status;\n  sku?: string;\n  slug: string;\n  source?: string;\n  suggestedRetailPriceInCents?: number;\n  timeZone?: string;\n  title?: string;\n  updatedAt?: string;\n  waitlistCount?: number;\n  waitlistingEnabled: boolean;\n  waitlistingTriggered: boolean;\n  location?: {\n    __typename?: 'Location';\n    id: string;\n    name: string;\n    room?: string;\n    address1: string;\n    address2?: string;\n    city: string;\n    state?: string;\n    zipCode?: string;\n    country?: string;\n    timeZone?: string;\n  };\n  ribbon?: {\n    __typename?: 'Ribbon';\n    color?: string;\n    contrastColor?: string;\n    darkerColor?: string;\n    label?: string;\n    slug: string;\n  };\n};\n\nexport const ContentFragmentFragmentDoc = gql`\n  fragment ContentFragment on Content {\n    alternativePricingType\n    asset\n    altDescriptionBody\n    alternativePricingRef\n    alternativePricingType\n    authors\n    authorsAndInstructors\n    availabilityStatus\n    bulkPurchasingEnabled\n    canAddToQueue\n    contentTypeAssetAspectRatio\n    contentTypeLabel\n    courseEndDate\n    courseGracePeriodEnded\n    courseGroup\n    coursePresold\n    courseStartDate\n    createdAt\n    currentUserMayReschedule\n    currentUserUnmetCoursePrerequisites\n    currentUserUnmetLearningPathPrerequisites\n    customFields\n    description\n    displayCourse\n    displayCourseSlug\n    displayDate\n    embeddedEnabled\n    enrollmentCount\n    expiresAt\n    kind\n    hasChildren\n    hideCourseDescription\n    id\n    isActive\n    language\n    location {\n      id\n      name\n      room\n      address1\n      address2\n      city\n      state\n      zipCode\n      country\n      timeZone\n    }\n    meetingStartDate\n    metaDescription\n    metaTitle\n    priceInCents\n    publishDate\n    rating\n    ribbon {\n      color\n      contrastColor\n      darkerColor\n      label\n      slug\n    }\n    seatsLimit\n    sessionTitle\n    status\n    sku\n    slug\n    source\n    suggestedRetailPriceInCents\n    timeZone\n    title\n    updatedAt\n    waitlistCount\n    waitlistingEnabled\n    waitlistingTriggered\n  }\n`;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nexport type LocationFragmentFragment = {\n  __typename?: 'Location';\n  id: string;\n  name: string;\n  room?: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state?: string;\n  zipCode?: string;\n  country?: string;\n  timeZone?: string;\n};\n\nexport const LocationFragmentFragmentDoc = gql`\n  fragment LocationFragment on Location {\n    id\n    name\n    room\n    address1\n    address2\n    city\n    state\n    zipCode\n    country\n    timeZone\n  }\n`;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nexport type CatalogMetaFragmentFragment = {\n  __typename?: 'CatalogMeta';\n  contentTypeFilterEnabled: boolean;\n  contentTypes?: Array<string>;\n  displayAuthorsEnabled: boolean;\n  displayStartDateEnabled: boolean;\n  displayDescriptionOnCalendar: boolean;\n  displayTypeCalendarEnabled: boolean;\n  displayTypeGridEnabled: boolean;\n  displayTypeListEnabled: boolean;\n  hasMore: boolean;\n  isCurated: boolean;\n  queryCustomFields: any;\n  resultsDisplayType: Types.ContentItemDisplayType;\n  selectedSortColumn: Types.SortColumn;\n  selectedSortDirection: Types.SortDirection;\n  sortCourseStartDateEnabled: boolean;\n  sortCreatedAtEnabled: boolean;\n  sortPublishDateEnabled: boolean;\n  sortRelevanceEnabled: boolean;\n  sortTitleEnabled: boolean;\n  sortUpdatedAtEnabled: boolean;\n  tokenLabel?: string;\n  total?: number;\n  aggregations?: Array<{\n    __typename?: 'Aggregation';\n    key?: string;\n    label?: string;\n    buckets?: Array<{\n      __typename?: 'AggregationBucket';\n      query?: string;\n      value?: string;\n      label?: string;\n      description?: string;\n      count?: number;\n    }>;\n  }>;\n  displayBundle?: {\n    __typename?: 'Bundle';\n    id: string;\n    name: string;\n    slug: string;\n    priceInCents?: number;\n    annualPriceInCents?: number;\n  };\n};\n\nexport const CatalogMetaFragmentFragmentDoc = gql`\n  fragment CatalogMetaFragment on CatalogMeta {\n    aggregations {\n      key\n      label\n      buckets {\n        query\n        value\n        label\n        description\n        count\n      }\n    }\n    contentTypeFilterEnabled\n    contentTypes\n    displayAuthorsEnabled\n    displayBundle {\n      id\n      name\n      slug\n      priceInCents\n      annualPriceInCents\n    }\n    displayStartDateEnabled\n    displayDescriptionOnCalendar\n    displayTypeCalendarEnabled\n    displayTypeGridEnabled\n    displayTypeListEnabled\n    hasMore\n    isCurated\n    queryCustomFields\n    resultsDisplayType\n    selectedSortColumn\n    selectedSortDirection\n    sortCourseStartDateEnabled\n    sortCreatedAtEnabled\n    sortPublishDateEnabled\n    sortRelevanceEnabled\n    sortTitleEnabled\n    sortUpdatedAtEnabled\n    tokenLabel\n    total\n  }\n`;\n","import * as Types from '../global-types';\n\nimport { ContentFragmentFragment } from './ContentFragment.generated';\nimport { LocationFragmentFragment } from './LocationFragment.generated';\nimport { CatalogMetaFragmentFragment } from './CatalogMetaFragment.generated';\nimport { gql } from '@apollo/client';\nimport { ContentFragmentFragmentDoc } from './ContentFragment.generated';\nimport { LocationFragmentFragmentDoc } from './LocationFragment.generated';\nimport { CatalogMetaFragmentFragmentDoc } from './CatalogMetaFragment.generated';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type CatalogContentQueryVariables = Types.Exact<{\n  sortColumn?: Types.InputMaybe<Types.SortColumn>;\n  sortDirection?: Types.InputMaybe<Types.SortDirection>;\n  resultsDisplayType?: Types.InputMaybe<Types.ContentItemDisplayType>;\n  page: Types.Scalars['Int'];\n  token?: Types.InputMaybe<Types.Scalars['String']>;\n  labels?: Types.InputMaybe<Array<Types.Scalars['String']> | Types.Scalars['String']>;\n  values?: Types.InputMaybe<Array<Types.Scalars['String']> | Types.Scalars['String']>;\n  contentTypes?: Types.InputMaybe<Array<Types.Scalars['String']> | Types.Scalars['String']>;\n  query?: Types.InputMaybe<Types.Scalars['String']>;\n}>;\n\nexport type CatalogContentQuery = {\n  __typename?: 'Query';\n  CatalogContent: {\n    __typename?: 'CatalogContent';\n    contentItems?: Array<\n      {\n        __typename?: 'Content';\n        location?: { __typename?: 'Location' } & LocationFragmentFragment;\n      } & ContentFragmentFragment\n    >;\n    meta: { __typename?: 'CatalogMeta' } & CatalogMetaFragmentFragment;\n  };\n};\n\nexport const CatalogContentDocument = gql`\n  query CatalogContent(\n    $sortColumn: SortColumn\n    $sortDirection: SortDirection\n    $resultsDisplayType: ContentItemDisplayType\n    $page: Int!\n    $token: String\n    $labels: [String!]\n    $values: [String!]\n    $contentTypes: [String!]\n    $query: String\n  ) {\n    CatalogContent(\n      sortColumn: $sortColumn\n      sortDirection: $sortDirection\n      resultsDisplayType: $resultsDisplayType\n      page: $page\n      token: $token\n      labels: $labels\n      values: $values\n      contentTypes: $contentTypes\n      query: $query\n    ) {\n      contentItems {\n        ...ContentFragment\n        location {\n          ...LocationFragment\n        }\n      }\n      meta {\n        ...CatalogMetaFragment\n      }\n    }\n  }\n  ${ContentFragmentFragmentDoc}\n  ${LocationFragmentFragmentDoc}\n  ${CatalogMetaFragmentFragmentDoc}\n`;\n\n/**\n * __useCatalogContentQuery__\n *\n * To run a query within a React component, call `useCatalogContentQuery` and pass it any options that fit your needs.\n * When your component renders, `useCatalogContentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCatalogContentQuery({\n *   variables: {\n *      sortColumn: // value for 'sortColumn'\n *      sortDirection: // value for 'sortDirection'\n *      resultsDisplayType: // value for 'resultsDisplayType'\n *      page: // value for 'page'\n *      token: // value for 'token'\n *      labels: // value for 'labels'\n *      values: // value for 'values'\n *      contentTypes: // value for 'contentTypes'\n *      query: // value for 'query'\n *   },\n * });\n */\nexport function useCatalogContentQuery(\n  baseOptions: Apollo.QueryHookOptions<CatalogContentQuery, CatalogContentQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<CatalogContentQuery, CatalogContentQueryVariables>(\n    CatalogContentDocument,\n    options\n  );\n}\nexport function useCatalogContentLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<CatalogContentQuery, CatalogContentQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<CatalogContentQuery, CatalogContentQueryVariables>(\n    CatalogContentDocument,\n    options\n  );\n}\nexport type CatalogContentQueryHookResult = ReturnType<typeof useCatalogContentQuery>;\nexport type CatalogContentLazyQueryHookResult = ReturnType<typeof useCatalogContentLazyQuery>;\nexport type CatalogContentQueryResult = Apollo.QueryResult<\n  CatalogContentQuery,\n  CatalogContentQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { ContentFragmentFragment } from './ContentFragment.generated';\nimport { gql } from '@apollo/client';\nimport { ContentFragmentFragmentDoc } from './ContentFragment.generated';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type CatalogQueryVariables = Types.Exact<{\n  query?: Types.InputMaybe<Types.Scalars['String']>;\n  querySignature?: Types.InputMaybe<Types.Scalars['String']>;\n  querySort?: Types.InputMaybe<Types.Scalars['String']>;\n}>;\n\nexport type CatalogQuery = {\n  __typename?: 'Query';\n  CatalogQuery: {\n    __typename?: 'CatalogContent';\n    contentItems?: Array<{ __typename?: 'Content' } & ContentFragmentFragment>;\n  };\n};\n\nexport const CatalogDocument = gql`\n  query Catalog($query: String, $querySignature: String, $querySort: String) {\n    CatalogQuery(query: $query, querySignature: $querySignature, querySort: $querySort) {\n      contentItems {\n        ...ContentFragment\n      }\n    }\n  }\n  ${ContentFragmentFragmentDoc}\n`;\n\n/**\n * __useCatalogQuery__\n *\n * To run a query within a React component, call `useCatalogQuery` and pass it any options that fit your needs.\n * When your component renders, `useCatalogQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCatalogQuery({\n *   variables: {\n *      query: // value for 'query'\n *      querySignature: // value for 'querySignature'\n *      querySort: // value for 'querySort'\n *   },\n * });\n */\nexport function useCatalogQuery(\n  baseOptions?: Apollo.QueryHookOptions<CatalogQuery, CatalogQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<CatalogQuery, CatalogQueryVariables>(CatalogDocument, options);\n}\nexport function useCatalogLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<CatalogQuery, CatalogQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<CatalogQuery, CatalogQueryVariables>(CatalogDocument, options);\n}\nexport type CatalogQueryHookResult = ReturnType<typeof useCatalogQuery>;\nexport type CatalogLazyQueryHookResult = ReturnType<typeof useCatalogLazyQuery>;\nexport type CatalogQueryResult = Apollo.QueryResult<CatalogQuery, CatalogQueryVariables>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type CourseGroupBySlugQueryVariables = Types.Exact<{\n  slug: Types.Scalars['Slug'];\n}>;\n\nexport type CourseGroupBySlugQuery = {\n  __typename?: 'Query';\n  CourseGroupBySlug?: {\n    __typename?: 'CourseGroup';\n    asset?: string;\n    description?: string;\n    title?: string;\n    rating?: number;\n    ratingsCount?: number;\n  };\n};\n\nexport const CourseGroupBySlugDocument = gql`\n  query CourseGroupBySlug($slug: Slug!) {\n    CourseGroupBySlug(slug: $slug) {\n      asset\n      description\n      title\n      rating\n      ratingsCount\n    }\n  }\n`;\n\n/**\n * __useCourseGroupBySlugQuery__\n *\n * To run a query within a React component, call `useCourseGroupBySlugQuery` and pass it any options that fit your needs.\n * When your component renders, `useCourseGroupBySlugQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCourseGroupBySlugQuery({\n *   variables: {\n *      Slug: // value for 'Slug'\n *   },\n * });\n */\nexport function useCourseGroupBySlugQuery(\n  baseOptions: Apollo.QueryHookOptions<CourseGroupBySlugQuery, CourseGroupBySlugQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<CourseGroupBySlugQuery, CourseGroupBySlugQueryVariables>(\n    CourseGroupBySlugDocument,\n    options\n  );\n}\nexport function useCourseGroupBySlugLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<CourseGroupBySlugQuery, CourseGroupBySlugQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<CourseGroupBySlugQuery, CourseGroupBySlugQueryVariables>(\n    CourseGroupBySlugDocument,\n    options\n  );\n}\nexport type CourseGroupBySlugQueryHookResult = ReturnType<typeof useCourseGroupBySlugQuery>;\nexport type CourseGroupBySlugLazyQueryHookResult = ReturnType<typeof useCourseGroupBySlugLazyQuery>;\nexport type CourseGroupBySlugQueryResult = Apollo.QueryResult<\n  CourseGroupBySlugQuery,\n  CourseGroupBySlugQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type LearningPathBySlugQueryVariables = Types.Exact<{\n  slug: Types.Scalars['Slug'];\n}>;\n\nexport type LearningPathBySlugQuery = {\n  __typename?: 'Query';\n  LearningPathBySlug?: {\n    __typename?: 'LearningPath';\n    name: string;\n    shortDescription?: string;\n    asset?: string;\n  };\n};\n\nexport const LearningPathBySlugDocument = gql`\n  query LearningPathBySlug($slug: Slug!) {\n    LearningPathBySlug(slug: $slug) {\n      name\n      shortDescription\n      asset\n    }\n  }\n`;\n\n/**\n * __useLearningPathBySlugQuery__\n *\n * To run a query within a React component, call `useLearningPathBySlugQuery` and pass it any options that fit your needs.\n * When your component renders, `useLearningPathBySlugQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLearningPathBySlugQuery({\n *   variables: {\n *      slug: // value for 'slug'\n *   },\n * });\n */\nexport function useLearningPathBySlugQuery(\n  baseOptions: Apollo.QueryHookOptions<LearningPathBySlugQuery, LearningPathBySlugQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<LearningPathBySlugQuery, LearningPathBySlugQueryVariables>(\n    LearningPathBySlugDocument,\n    options\n  );\n}\nexport function useLearningPathBySlugLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    LearningPathBySlugQuery,\n    LearningPathBySlugQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<LearningPathBySlugQuery, LearningPathBySlugQueryVariables>(\n    LearningPathBySlugDocument,\n    options\n  );\n}\nexport type LearningPathBySlugQueryHookResult = ReturnType<typeof useLearningPathBySlugQuery>;\nexport type LearningPathBySlugLazyQueryHookResult = ReturnType<\n  typeof useLearningPathBySlugLazyQuery\n>;\nexport type LearningPathBySlugQueryResult = Apollo.QueryResult<\n  LearningPathBySlugQuery,\n  LearningPathBySlugQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type LanguagesQueryQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type LanguagesQueryQuery = {\n  __typename?: 'Query';\n  Languages: Array<{\n    __typename?: 'Language';\n    id?: string;\n    label: string;\n    code: string;\n    isCustom?: boolean;\n    selectorLabel?: string;\n  }>;\n};\n\nexport const LanguagesQueryDocument = gql`\n  query LanguagesQuery {\n    Languages {\n      id\n      label\n      code\n      isCustom\n      selectorLabel\n    }\n  }\n`;\n\n/**\n * __useLanguagesQueryQuery__\n *\n * To run a query within a React component, call `useLanguagesQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useLanguagesQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLanguagesQueryQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLanguagesQueryQuery(\n  baseOptions?: Apollo.QueryHookOptions<LanguagesQueryQuery, LanguagesQueryQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<LanguagesQueryQuery, LanguagesQueryQueryVariables>(\n    LanguagesQueryDocument,\n    options\n  );\n}\nexport function useLanguagesQueryLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<LanguagesQueryQuery, LanguagesQueryQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<LanguagesQueryQuery, LanguagesQueryQueryVariables>(\n    LanguagesQueryDocument,\n    options\n  );\n}\nexport type LanguagesQueryQueryHookResult = ReturnType<typeof useLanguagesQueryQuery>;\nexport type LanguagesQueryLazyQueryHookResult = ReturnType<typeof useLanguagesQueryLazyQuery>;\nexport type LanguagesQueryQueryResult = Apollo.QueryResult<\n  LanguagesQueryQuery,\n  LanguagesQueryQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { ContentFragmentFragment } from './ContentFragment.generated';\nimport { gql } from '@apollo/client';\nimport { ContentFragmentFragmentDoc } from './ContentFragment.generated';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type ContentsQueryVariables = Types.Exact<{\n  ids: Array<Types.Scalars['ID']> | Types.Scalars['ID'];\n}>;\n\nexport type ContentsQuery = {\n  __typename?: 'Query';\n  QueryContents: Array<{ __typename?: 'Content' } & ContentFragmentFragment>;\n};\n\nexport const ContentsDocument = gql`\n  query Contents($ids: [ID!]!) {\n    QueryContents(ids: $ids) {\n      ...ContentFragment\n    }\n  }\n  ${ContentFragmentFragmentDoc}\n`;\n\n/**\n * __useContentsQuery__\n *\n * To run a query within a React component, call `useContentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useContentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useContentsQuery({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useContentsQuery(\n  baseOptions: Apollo.QueryHookOptions<ContentsQuery, ContentsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ContentsQuery, ContentsQueryVariables>(ContentsDocument, options);\n}\nexport function useContentsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ContentsQuery, ContentsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ContentsQuery, ContentsQueryVariables>(ContentsDocument, options);\n}\nexport type ContentsQueryHookResult = ReturnType<typeof useContentsQuery>;\nexport type ContentsLazyQueryHookResult = ReturnType<typeof useContentsLazyQuery>;\nexport type ContentsQueryResult = Apollo.QueryResult<ContentsQuery, ContentsQueryVariables>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type RssItemsQueryVariables = Types.Exact<{\n  feedUrl: Types.Scalars['String'];\n}>;\n\nexport type RssItemsQuery = {\n  __typename?: 'Query';\n  RssItems: Array<{ __typename?: 'RssItem'; title?: string; link?: string }>;\n};\n\nexport const RssItemsDocument = gql`\n  query RssItems($feedUrl: String!) {\n    RssItems(feedUrl: $feedUrl) {\n      title\n      link\n    }\n  }\n`;\n\n/**\n * __useRssItemsQuery__\n *\n * To run a query within a React component, call `useRssItemsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRssItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRssItemsQuery({\n *   variables: {\n *      feedUrl: // value for 'feedUrl'\n *   },\n * });\n */\nexport function useRssItemsQuery(\n  baseOptions: Apollo.QueryHookOptions<RssItemsQuery, RssItemsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<RssItemsQuery, RssItemsQueryVariables>(RssItemsDocument, options);\n}\nexport function useRssItemsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<RssItemsQuery, RssItemsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<RssItemsQuery, RssItemsQueryVariables>(RssItemsDocument, options);\n}\nexport type RssItemsQueryHookResult = ReturnType<typeof useRssItemsQuery>;\nexport type RssItemsLazyQueryHookResult = ReturnType<typeof useRssItemsLazyQuery>;\nexport type RssItemsQueryResult = Apollo.QueryResult<RssItemsQuery, RssItemsQueryVariables>;\n","import * as Types from '../global-types';\n\nimport { ContentFragmentFragment } from './ContentFragment.generated';\nimport { gql } from '@apollo/client';\nimport { ContentFragmentFragmentDoc } from './ContentFragment.generated';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserRecentContentQueryVariables = Types.Exact<{\n  limit?: Types.InputMaybe<Types.Scalars['Int']>;\n}>;\n\nexport type UserRecentContentQuery = {\n  __typename?: 'Query';\n  UserRecentContent: Array<{ __typename?: 'Content' } & ContentFragmentFragment>;\n};\n\nexport const UserRecentContentDocument = gql`\n  query UserRecentContent($limit: Int) {\n    UserRecentContent(limit: $limit) {\n      ...ContentFragment\n    }\n  }\n  ${ContentFragmentFragmentDoc}\n`;\n\n/**\n * __useUserRecentContentQuery__\n *\n * To run a query within a React component, call `useUserRecentContentQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserRecentContentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserRecentContentQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useUserRecentContentQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserRecentContentQuery, UserRecentContentQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserRecentContentQuery, UserRecentContentQueryVariables>(\n    UserRecentContentDocument,\n    options\n  );\n}\nexport function useUserRecentContentLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserRecentContentQuery, UserRecentContentQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserRecentContentQuery, UserRecentContentQueryVariables>(\n    UserRecentContentDocument,\n    options\n  );\n}\nexport type UserRecentContentQueryHookResult = ReturnType<typeof useUserRecentContentQuery>;\nexport type UserRecentContentLazyQueryHookResult = ReturnType<typeof useUserRecentContentLazyQuery>;\nexport type UserRecentContentQueryResult = Apollo.QueryResult<\n  UserRecentContentQuery,\n  UserRecentContentQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserContentItemsQueryVariables = Types.Exact<{\n  query?: Types.InputMaybe<Types.Scalars['String']>;\n  kind?: Types.InputMaybe<Array<Types.ContentKind> | Types.ContentKind>;\n  sortColumn?: Types.InputMaybe<Types.SortColumn>;\n  sortDirection?: Types.InputMaybe<Types.SortDirection>;\n}>;\n\nexport type UserContentItemsQuery = {\n  __typename?: 'Query';\n  UserContentItems?: Array<{\n    __typename?: 'Content';\n    asset?: string;\n    title?: string;\n    sessionTitle?: string;\n    kind?: Types.ContentKind;\n    id: string;\n    slug: string;\n    meetingStartDate?: string;\n    contentTypeLabel?: string;\n    availabilityStatus?: string;\n    courseStartDate?: string;\n    courseEndDate?: string;\n    coursePresold: boolean;\n    description?: string;\n    displayCourse?: string;\n    displayCourseSlug?: string;\n    displayDate?: string;\n    courseGracePeriodEnded: boolean;\n    authors?: Array<string>;\n    publishDate?: string;\n    source?: string;\n    expiresAt?: string;\n    currentUserMayReschedule: boolean;\n    timeZone?: string;\n    embeddedEnabled?: boolean;\n    currentUserUnmetCoursePrerequisites?: Array<string>;\n    currentUserUnmetLearningPathPrerequisites?: Array<string>;\n    hasChildren: boolean;\n    hideCourseDescription: boolean;\n    isActive: boolean;\n    waitlistingEnabled: boolean;\n    waitlistingTriggered: boolean;\n  }>;\n};\n\nexport const UserContentItemsDocument = gql`\n  query UserContentItems(\n    $query: String\n    $kind: [ContentKind!]\n    $sortColumn: SortColumn\n    $sortDirection: SortDirection\n  ) {\n    UserContentItems(\n      query: $query\n      kind: $kind\n      sortColumn: $sortColumn\n      sortDirection: $sortDirection\n    ) {\n      asset\n      title\n      sessionTitle\n      kind\n      id\n      slug\n      meetingStartDate\n      contentTypeLabel\n      availabilityStatus\n      courseStartDate\n      courseEndDate\n      coursePresold\n      description\n      displayCourse\n      displayCourseSlug\n      displayDate\n      courseGracePeriodEnded\n      authors\n      publishDate\n      source\n      expiresAt\n      currentUserMayReschedule\n      timeZone\n      embeddedEnabled\n      currentUserUnmetCoursePrerequisites\n      currentUserUnmetLearningPathPrerequisites\n      hasChildren\n      hideCourseDescription\n      isActive\n      waitlistingEnabled\n      waitlistingTriggered\n    }\n  }\n`;\n\n/**\n * __useUserContentItemsQuery__\n *\n * To run a query within a React component, call `useUserContentItemsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserContentItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserContentItemsQuery({\n *   variables: {\n *      query: // value for 'query'\n *      kind: // value for 'kind'\n *      sortColumn: // value for 'sortColumn'\n *      sortDirection: // value for 'sortDirection'\n *   },\n * });\n */\nexport function useUserContentItemsQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserContentItemsQuery, UserContentItemsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserContentItemsQuery, UserContentItemsQueryVariables>(\n    UserContentItemsDocument,\n    options\n  );\n}\nexport function useUserContentItemsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserContentItemsQuery, UserContentItemsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserContentItemsQuery, UserContentItemsQueryVariables>(\n    UserContentItemsDocument,\n    options\n  );\n}\nexport type UserContentItemsQueryHookResult = ReturnType<typeof useUserContentItemsQuery>;\nexport type UserContentItemsLazyQueryHookResult = ReturnType<typeof useUserContentItemsLazyQuery>;\nexport type UserContentItemsQueryResult = Apollo.QueryResult<\n  UserContentItemsQuery,\n  UserContentItemsQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserArchivesQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type UserArchivesQuery = {\n  __typename?: 'Query';\n  UserArchives?: Array<{\n    __typename?: 'ArchivedContent';\n    id: string;\n    user?: string;\n    resource?: string;\n    resourceType?: string;\n    status?: string;\n    archivedAt?: string;\n    name?: string;\n    reinstatable: boolean;\n    waitlistActive: boolean;\n  }>;\n};\n\nexport const UserArchivesDocument = gql`\n  query UserArchives {\n    UserArchives {\n      id\n      user\n      resource\n      resourceType\n      status\n      archivedAt\n      name\n      reinstatable\n      waitlistActive\n    }\n  }\n`;\n\n/**\n * __useUserArchivesQuery__\n *\n * To run a query within a React component, call `useUserArchivesQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserArchivesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserArchivesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserArchivesQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserArchivesQuery, UserArchivesQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserArchivesQuery, UserArchivesQueryVariables>(\n    UserArchivesDocument,\n    options\n  );\n}\nexport function useUserArchivesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserArchivesQuery, UserArchivesQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserArchivesQuery, UserArchivesQueryVariables>(\n    UserArchivesDocument,\n    options\n  );\n}\nexport type UserArchivesQueryHookResult = ReturnType<typeof useUserArchivesQuery>;\nexport type UserArchivesLazyQueryHookResult = ReturnType<typeof useUserArchivesLazyQuery>;\nexport type UserArchivesQueryResult = Apollo.QueryResult<\n  UserArchivesQuery,\n  UserArchivesQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserWaitlistQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type UserWaitlistQuery = {\n  __typename?: 'Query';\n  UserWaitlist?: Array<{\n    __typename?: 'Content';\n    id: string;\n    contentTypeLabel?: string;\n    title?: string;\n    kind?: Types.ContentKind;\n    slug: string;\n    displayCourse?: string;\n    displayCourseSlug?: string;\n  }>;\n};\n\nexport const UserWaitlistDocument = gql`\n  query UserWaitlist {\n    UserWaitlist {\n      id\n      contentTypeLabel\n      title\n      kind\n      slug\n      displayCourse\n      displayCourseSlug\n    }\n  }\n`;\n\n/**\n * __useUserWaitlistQuery__\n *\n * To run a query within a React component, call `useUserWaitlistQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserWaitlistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserWaitlistQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserWaitlistQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserWaitlistQuery, UserWaitlistQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserWaitlistQuery, UserWaitlistQueryVariables>(\n    UserWaitlistDocument,\n    options\n  );\n}\nexport function useUserWaitlistLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserWaitlistQuery, UserWaitlistQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserWaitlistQuery, UserWaitlistQueryVariables>(\n    UserWaitlistDocument,\n    options\n  );\n}\nexport type UserWaitlistQueryHookResult = ReturnType<typeof useUserWaitlistQuery>;\nexport type UserWaitlistLazyQueryHookResult = ReturnType<typeof useUserWaitlistLazyQuery>;\nexport type UserWaitlistQueryResult = Apollo.QueryResult<\n  UserWaitlistQuery,\n  UserWaitlistQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserBookmarksQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type UserBookmarksQuery = {\n  __typename?: 'Query';\n  UserBookmarks?: Array<{\n    __typename?: 'BookmarkFolder';\n    id: string;\n    name: string;\n    defaultFolder?: boolean;\n    bookmarkCount?: number;\n  }>;\n};\n\nexport const UserBookmarksDocument = gql`\n  query UserBookmarks {\n    UserBookmarks {\n      id\n      name\n      defaultFolder\n      bookmarkCount\n    }\n  }\n`;\n\n/**\n * __useUserBookmarksQuery__\n *\n * To run a query within a React component, call `useUserBookmarksQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserBookmarksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserBookmarksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserBookmarksQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserBookmarksQuery, UserBookmarksQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserBookmarksQuery, UserBookmarksQueryVariables>(\n    UserBookmarksDocument,\n    options\n  );\n}\nexport function useUserBookmarksLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserBookmarksQuery, UserBookmarksQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserBookmarksQuery, UserBookmarksQueryVariables>(\n    UserBookmarksDocument,\n    options\n  );\n}\nexport type UserBookmarksQueryHookResult = ReturnType<typeof useUserBookmarksQuery>;\nexport type UserBookmarksLazyQueryHookResult = ReturnType<typeof useUserBookmarksLazyQuery>;\nexport type UserBookmarksQueryResult = Apollo.QueryResult<\n  UserBookmarksQuery,\n  UserBookmarksQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserCertificatesQueryVariables = Types.Exact<{\n  query?: Types.InputMaybe<Types.Scalars['String']>;\n  includeExpiredCertificates?: Types.InputMaybe<Types.Scalars['Boolean']>;\n}>;\n\nexport type UserCertificatesQuery = {\n  __typename?: 'Query';\n  UserCertificates?: Array<{\n    __typename?: 'Certificate';\n    id: string;\n    resourceId?: string;\n    expirationDate?: string;\n    isExpired: boolean;\n    externalResourceTitle?: string;\n    url: string;\n    source?: string;\n    contentItem?: {\n      __typename?: 'Content';\n      id: string;\n      asset?: string;\n      courseEndDate?: string;\n      courseStartDate?: string;\n      coursePresold: boolean;\n      description?: string;\n      kind?: Types.ContentKind;\n      slug: string;\n      availabilityStatus?: string;\n      contentTypeLabel?: string;\n      title?: string;\n      timeZone?: string;\n    };\n  }>;\n};\n\nexport const UserCertificatesDocument = gql`\n  query UserCertificates($query: String, $includeExpiredCertificates: Boolean) {\n    UserCertificates(query: $query, includeExpiredCertificates: $includeExpiredCertificates) {\n      id\n      resourceId\n      expirationDate\n      isExpired\n      externalResourceTitle\n      url\n      source\n      contentItem {\n        id\n        asset\n        courseEndDate\n        courseStartDate\n        coursePresold\n        description\n        kind\n        slug\n        availabilityStatus\n        contentTypeLabel\n        title\n        timeZone\n      }\n    }\n  }\n`;\n\n/**\n * __useUserCertificatesQuery__\n *\n * To run a query within a React component, call `useUserCertificatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCertificatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCertificatesQuery({\n *   variables: {\n *      query: // value for 'query'\n *      includeExpiredCertificates: // value for 'includeExpiredCertificates'\n *   },\n * });\n */\nexport function useUserCertificatesQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserCertificatesQuery, UserCertificatesQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserCertificatesQuery, UserCertificatesQueryVariables>(\n    UserCertificatesDocument,\n    options\n  );\n}\nexport function useUserCertificatesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserCertificatesQuery, UserCertificatesQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserCertificatesQuery, UserCertificatesQueryVariables>(\n    UserCertificatesDocument,\n    options\n  );\n}\nexport type UserCertificatesQueryHookResult = ReturnType<typeof useUserCertificatesQuery>;\nexport type UserCertificatesLazyQueryHookResult = ReturnType<typeof useUserCertificatesLazyQuery>;\nexport type UserCertificatesQueryResult = Apollo.QueryResult<\n  UserCertificatesQuery,\n  UserCertificatesQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type ContentGroupsQueryVariables = Types.Exact<{\n  query?: Types.InputMaybe<Types.Scalars['String']>;\n  includeExpiredCertificates?: Types.InputMaybe<Types.Scalars['Boolean']>;\n}>;\n\nexport type ContentGroupsQuery = {\n  __typename?: 'Query';\n  UserContentGroups?: Array<{\n    __typename?: 'ContentGroup';\n    kind: Types.ContentGroupKind;\n    count: number;\n  }>;\n};\n\nexport const ContentGroupsDocument = gql`\n  query ContentGroups($query: String, $includeExpiredCertificates: Boolean) {\n    UserContentGroups(query: $query, includeExpiredCertificates: $includeExpiredCertificates) {\n      kind\n      count\n    }\n  }\n`;\n\n/**\n * __useContentGroupsQuery__\n *\n * To run a query within a React component, call `useContentGroupsQuery` and pass it any options that fit your needs.\n * When your component renders, `useContentGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useContentGroupsQuery({\n *   variables: {\n *      query: // value for 'query'\n *      includeExpiredCertificates: // value for 'includeExpiredCertificates'\n *   },\n * });\n */\nexport function useContentGroupsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ContentGroupsQuery, ContentGroupsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ContentGroupsQuery, ContentGroupsQueryVariables>(\n    ContentGroupsDocument,\n    options\n  );\n}\nexport function useContentGroupsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ContentGroupsQuery, ContentGroupsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ContentGroupsQuery, ContentGroupsQueryVariables>(\n    ContentGroupsDocument,\n    options\n  );\n}\nexport type ContentGroupsQueryHookResult = ReturnType<typeof useContentGroupsQuery>;\nexport type ContentGroupsLazyQueryHookResult = ReturnType<typeof useContentGroupsLazyQuery>;\nexport type ContentGroupsQueryResult = Apollo.QueryResult<\n  ContentGroupsQuery,\n  ContentGroupsQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserBookmarksByFolderQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\nexport type UserBookmarksByFolderQuery = {\n  __typename?: 'Query';\n  UserBookmarksByFolder?: Array<{\n    __typename?: 'Bookmark';\n    id: string;\n    topicId?: string;\n    note?: string;\n    createdAt: string;\n    course: {\n      __typename?: 'Course';\n      id: string;\n      title?: string;\n      slug: string;\n      status?: Types.Status;\n      courseGroup?: {\n        __typename?: 'CourseGroup';\n        id: string;\n        authors?: Array<string>;\n        source?: string;\n        asset?: string;\n        kind?: Types.CourseGroupKind;\n        contentType?: { __typename?: 'ContentType'; label?: string };\n      };\n    };\n  }>;\n};\n\nexport const UserBookmarksByFolderDocument = gql`\n  query UserBookmarksByFolder($id: ID!) {\n    UserBookmarksByFolder(id: $id) {\n      id\n      course {\n        id\n        title\n        slug\n        status\n        courseGroup {\n          id\n          authors\n          source\n          asset\n          kind\n          contentType {\n            label\n          }\n        }\n      }\n      topicId\n      note\n      createdAt\n    }\n  }\n`;\n\n/**\n * __useUserBookmarksByFolderQuery__\n *\n * To run a query within a React component, call `useUserBookmarksByFolderQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserBookmarksByFolderQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserBookmarksByFolderQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUserBookmarksByFolderQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    UserBookmarksByFolderQuery,\n    UserBookmarksByFolderQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserBookmarksByFolderQuery, UserBookmarksByFolderQueryVariables>(\n    UserBookmarksByFolderDocument,\n    options\n  );\n}\nexport function useUserBookmarksByFolderLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    UserBookmarksByFolderQuery,\n    UserBookmarksByFolderQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserBookmarksByFolderQuery, UserBookmarksByFolderQueryVariables>(\n    UserBookmarksByFolderDocument,\n    options\n  );\n}\nexport type UserBookmarksByFolderQueryHookResult = ReturnType<typeof useUserBookmarksByFolderQuery>;\nexport type UserBookmarksByFolderLazyQueryHookResult = ReturnType<\n  typeof useUserBookmarksByFolderLazyQuery\n>;\nexport type UserBookmarksByFolderQueryResult = Apollo.QueryResult<\n  UserBookmarksByFolderQuery,\n  UserBookmarksByFolderQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserCourseCompletionProgressQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\nexport type UserCourseCompletionProgressQuery = {\n  __typename?: 'Query';\n  UserCourseCompletionProgress?: Array<{\n    __typename?: 'CourseCompletionCriteriaProgress';\n    type?: Types.CourseCompletionCriteriaType;\n    required?: Array<string>;\n    completed?: Array<string>;\n    percent: number;\n  }>;\n};\n\nexport const UserCourseCompletionProgressDocument = gql`\n  query UserCourseCompletionProgress($id: ID!) {\n    UserCourseCompletionProgress(id: $id) {\n      type\n      required\n      completed\n      percent\n    }\n  }\n`;\n\n/**\n * __useUserCourseCompletionProgressQuery__\n *\n * To run a query within a React component, call `useUserCourseCompletionProgressQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCourseCompletionProgressQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCourseCompletionProgressQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUserCourseCompletionProgressQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    UserCourseCompletionProgressQuery,\n    UserCourseCompletionProgressQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    UserCourseCompletionProgressQuery,\n    UserCourseCompletionProgressQueryVariables\n  >(UserCourseCompletionProgressDocument, options);\n}\nexport function useUserCourseCompletionProgressLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    UserCourseCompletionProgressQuery,\n    UserCourseCompletionProgressQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    UserCourseCompletionProgressQuery,\n    UserCourseCompletionProgressQueryVariables\n  >(UserCourseCompletionProgressDocument, options);\n}\nexport type UserCourseCompletionProgressQueryHookResult = ReturnType<\n  typeof useUserCourseCompletionProgressQuery\n>;\nexport type UserCourseCompletionProgressLazyQueryHookResult = ReturnType<\n  typeof useUserCourseCompletionProgressLazyQuery\n>;\nexport type UserCourseCompletionProgressQueryResult = Apollo.QueryResult<\n  UserCourseCompletionProgressQuery,\n  UserCourseCompletionProgressQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserCourseProgressQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\nexport type UserCourseProgressQuery = {\n  __typename?: 'Query';\n  UserCourseProgress?: {\n    __typename?: 'UserProgress';\n    totalViews?: number;\n    totalTime?: number;\n    percentComplete?: number;\n  };\n};\n\nexport const UserCourseProgressDocument = gql`\n  query UserCourseProgress($id: ID!) {\n    UserCourseProgress(id: $id) {\n      totalViews\n      totalTime\n      percentComplete\n    }\n  }\n`;\n\n/**\n * __useUserCourseProgressQuery__\n *\n * To run a query within a React component, call `useUserCourseProgressQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCourseProgressQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCourseProgressQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUserCourseProgressQuery(\n  baseOptions: Apollo.QueryHookOptions<UserCourseProgressQuery, UserCourseProgressQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserCourseProgressQuery, UserCourseProgressQueryVariables>(\n    UserCourseProgressDocument,\n    options\n  );\n}\nexport function useUserCourseProgressLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    UserCourseProgressQuery,\n    UserCourseProgressQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserCourseProgressQuery, UserCourseProgressQueryVariables>(\n    UserCourseProgressDocument,\n    options\n  );\n}\nexport type UserCourseProgressQueryHookResult = ReturnType<typeof useUserCourseProgressQuery>;\nexport type UserCourseProgressLazyQueryHookResult = ReturnType<\n  typeof useUserCourseProgressLazyQuery\n>;\nexport type UserCourseProgressQueryResult = Apollo.QueryResult<\n  UserCourseProgressQuery,\n  UserCourseProgressQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserCourseAwardCountsQueryVariables = Types.Exact<{\n  courseId: Types.Scalars['ID'];\n}>;\n\nexport type UserCourseAwardCountsQuery = {\n  __typename?: 'Query';\n  UserCourseAwardCounts: Array<{\n    __typename?: 'UserAwardCount';\n    id: string;\n    label?: string;\n    icon?: Types.AwardTypeIcon;\n    count?: number;\n  }>;\n};\n\nexport const UserCourseAwardCountsDocument = gql`\n  query UserCourseAwardCounts($courseId: ID!) {\n    UserCourseAwardCounts(courseId: $courseId) {\n      id\n      label\n      icon\n      count\n    }\n  }\n`;\n\n/**\n * __useUserCourseAwardCountsQuery__\n *\n * To run a query within a React component, call `useUserCourseAwardCountsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCourseAwardCountsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCourseAwardCountsQuery({\n *   variables: {\n *      courseId: // value for 'courseId'\n *   },\n * });\n */\nexport function useUserCourseAwardCountsQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    UserCourseAwardCountsQuery,\n    UserCourseAwardCountsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserCourseAwardCountsQuery, UserCourseAwardCountsQueryVariables>(\n    UserCourseAwardCountsDocument,\n    options\n  );\n}\nexport function useUserCourseAwardCountsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    UserCourseAwardCountsQuery,\n    UserCourseAwardCountsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserCourseAwardCountsQuery, UserCourseAwardCountsQueryVariables>(\n    UserCourseAwardCountsDocument,\n    options\n  );\n}\nexport type UserCourseAwardCountsQueryHookResult = ReturnType<typeof useUserCourseAwardCountsQuery>;\nexport type UserCourseAwardCountsLazyQueryHookResult = ReturnType<\n  typeof useUserCourseAwardCountsLazyQuery\n>;\nexport type UserCourseAwardCountsQueryResult = Apollo.QueryResult<\n  UserCourseAwardCountsQuery,\n  UserCourseAwardCountsQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserCourseCollaborationsQueryVariables = Types.Exact<{\n  courseId: Types.Scalars['ID'];\n}>;\n\nexport type UserCourseCollaborationsQuery = {\n  __typename?: 'Query';\n  UserCourseCollaborations: number;\n};\n\nexport const UserCourseCollaborationsDocument = gql`\n  query UserCourseCollaborations($courseId: ID!) {\n    UserCourseCollaborations(courseId: $courseId)\n  }\n`;\n\n/**\n * __useUserCourseCollaborationsQuery__\n *\n * To run a query within a React component, call `useUserCourseCollaborationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCourseCollaborationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCourseCollaborationsQuery({\n *   variables: {\n *      courseId: // value for 'courseId'\n *   },\n * });\n */\nexport function useUserCourseCollaborationsQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    UserCourseCollaborationsQuery,\n    UserCourseCollaborationsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserCourseCollaborationsQuery, UserCourseCollaborationsQueryVariables>(\n    UserCourseCollaborationsDocument,\n    options\n  );\n}\nexport function useUserCourseCollaborationsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    UserCourseCollaborationsQuery,\n    UserCourseCollaborationsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserCourseCollaborationsQuery, UserCourseCollaborationsQueryVariables>(\n    UserCourseCollaborationsDocument,\n    options\n  );\n}\nexport type UserCourseCollaborationsQueryHookResult = ReturnType<\n  typeof useUserCourseCollaborationsQuery\n>;\nexport type UserCourseCollaborationsLazyQueryHookResult = ReturnType<\n  typeof useUserCourseCollaborationsLazyQuery\n>;\nexport type UserCourseCollaborationsQueryResult = Apollo.QueryResult<\n  UserCourseCollaborationsQuery,\n  UserCourseCollaborationsQueryVariables\n>;\n","import * as Types from '../global-types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type UserCertificateFieldsQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type UserCertificateFieldsQuery = {\n  __typename?: 'Query';\n  UserCertificateFields?: Array<{\n    __typename?: 'CertificateField';\n    id: string;\n    type: Types.CertificateFieldType;\n    label: string;\n    awardTypeId?: string;\n    awardType?: { __typename?: 'AwardType'; id: string; pluralLabel?: string };\n  }>;\n};\n\nexport const UserCertificateFieldsDocument = gql`\n  query UserCertificateFields {\n    UserCertificateFields {\n      id\n      type\n      label\n      awardTypeId\n      awardType {\n        id\n        pluralLabel\n      }\n    }\n  }\n`;\n\n/**\n * __useUserCertificateFieldsQuery__\n *\n * To run a query within a React component, call `useUserCertificateFieldsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCertificateFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCertificateFieldsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserCertificateFieldsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    UserCertificateFieldsQuery,\n    UserCertificateFieldsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UserCertificateFieldsQuery, UserCertificateFieldsQueryVariables>(\n    UserCertificateFieldsDocument,\n    options\n  );\n}\nexport function useUserCertificateFieldsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    UserCertificateFieldsQuery,\n    UserCertificateFieldsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UserCertificateFieldsQuery, UserCertificateFieldsQueryVariables>(\n    UserCertificateFieldsDocument,\n    options\n  );\n}\nexport type UserCertificateFieldsQueryHookResult = ReturnType<typeof useUserCertificateFieldsQuery>;\nexport type UserCertificateFieldsLazyQueryHookResult = ReturnType<\n  typeof useUserCertificateFieldsLazyQuery\n>;\nexport type UserCertificateFieldsQueryResult = Apollo.QueryResult<\n  UserCertificateFieldsQuery,\n  UserCertificateFieldsQueryVariables\n>;\n","import React from 'react';\nimport { ContentKind } from '../../graphql/global-types';\nimport { useCourseGroupBySlugQuery } from '../../graphql/queries';\nimport { useLearningPathBySlugQuery } from '../../graphql/queries/LearningPathBySlug.generated';\n\nconst Stars = (props: { score: number }) => {\n  const maskWidth = `${props.score}%`;\n\n  return (\n    <svg width=\"90\" height=\"18\" viewBox=\"0 0 90 18\">\n      <symbol id=\"bg-star\">\n        <path\n          d=\"M7.85879 1.51237C8.21879 0.407172 9.78239 0.407172 10.1412 1.51237L11.4252 5.46277C11.5036 5.70336 11.6561 5.91299 11.8609 6.0617C12.0656 6.21041 12.3121 6.29059 12.5652 6.29077H16.7196C17.8824 6.29077 18.3648 7.77877 17.4252 8.46277L14.0652 10.9036C13.86 11.0524 13.7073 11.2624 13.6288 11.5034C13.5503 11.7444 13.5502 12.0041 13.6284 12.2452L14.9124 16.1956C15.2724 17.3008 14.0064 18.2212 13.0644 17.5372L9.70439 15.0964C9.49944 14.9476 9.25266 14.8674 8.99939 14.8674C8.74612 14.8674 8.49935 14.9476 8.29439 15.0964L4.93439 17.5372C3.99359 18.2212 2.72879 17.3008 3.08759 16.1956L4.37159 12.2452C4.4498 12.0041 4.44966 11.7444 4.37119 11.5034C4.29272 11.2624 4.13996 11.0524 3.93479 10.9036L0.575993 8.46397C-0.363607 7.77997 0.119993 6.29197 1.28159 6.29197H5.43479C5.68805 6.29204 5.93484 6.21198 6.13982 6.06325C6.34481 5.91452 6.49748 5.70475 6.57599 5.46397L7.85999 1.51357L7.85879 1.51237Z\"\n          fill=\"#D1D5DB\"\n        />\n      </symbol>\n      <symbol id=\"star\">\n        <path\n          d=\"M7.85879 1.51237C8.21879 0.407172 9.78239 0.407172 10.1412 1.51237L11.4252 5.46277C11.5036 5.70336 11.6561 5.91299 11.8609 6.0617C12.0656 6.21041 12.3121 6.29059 12.5652 6.29077H16.7196C17.8824 6.29077 18.3648 7.77877 17.4252 8.46277L14.0652 10.9036C13.86 11.0524 13.7073 11.2624 13.6288 11.5034C13.5503 11.7444 13.5502 12.0041 13.6284 12.2452L14.9124 16.1956C15.2724 17.3008 14.0064 18.2212 13.0644 17.5372L9.70439 15.0964C9.49944 14.9476 9.25266 14.8674 8.99939 14.8674C8.74612 14.8674 8.49935 14.9476 8.29439 15.0964L4.93439 17.5372C3.99359 18.2212 2.72879 17.3008 3.08759 16.1956L4.37159 12.2452C4.4498 12.0041 4.44966 11.7444 4.37119 11.5034C4.29272 11.2624 4.13996 11.0524 3.93479 10.9036L0.575993 8.46397C-0.363607 7.77997 0.119993 6.29197 1.28159 6.29197H5.43479C5.68805 6.29204 5.93484 6.21198 6.13982 6.06325C6.34481 5.91452 6.49748 5.70475 6.57599 5.46397L7.85999 1.51357L7.85879 1.51237Z\"\n          fill=\"#FAAD4D\"\n        />\n      </symbol>\n      <mask id=\"bg-stars\">\n        <use href=\"#bg-star\" transform=\"translate(0 0)\" />\n        <use href=\"#bg-star\" transform=\"translate(18 0)\" />\n        <use href=\"#bg-star\" transform=\"translate(36 0)\" />\n        <use href=\"#bg-star\" transform=\"translate(54 0)\" />\n        <use href=\"#bg-star\" transform=\"translate(72 0)\" />\n      </mask>\n      <mask id=\"stars\">\n        <use href=\"#star\" transform=\"translate(0 0)\" />\n        <use href=\"#star\" transform=\"translate(18 0)\" />\n        <use href=\"#star\" transform=\"translate(36 0)\" />\n        <use href=\"#star\" transform=\"translate(54 0)\" />\n        <use href=\"#star\" transform=\"translate(72 0)\" />\n      </mask>\n      <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"#D1D5DB\" mask=\"url(#bg-stars)\" />\n      <rect x=\"0\" y=\"0\" width={maskWidth} height=\"100%\" fill=\"#FAAD4D\" mask=\"url(#stars)\" />\n    </svg>\n  );\n};\n\nconst ContentHeader = (props: {\n  contentKind: ContentKind;\n  slug: string;\n  showStars: boolean;\n  showImage: boolean;\n}): JSX.Element => {\n  let title: string | undefined,\n    description: string | undefined,\n    rating: number | undefined,\n    ratingsCount: number | undefined,\n    asset: string | undefined,\n    name: string | undefined,\n    shortDescription: string | undefined;\n\n  function LearningPathContentKind() {\n    const { data, error } = useLearningPathBySlugQuery({\n      variables: { slug: props.slug }\n    });\n    if (error) {\n      console.log(error);\n    }\n    if (data && data.LearningPathBySlug) {\n      ({ name, shortDescription, asset } = data.LearningPathBySlug);\n    }\n    return { title: name, description: shortDescription, asset };\n  }\n\n  function CourseGroupContentKind() {\n    const { data, error } = useCourseGroupBySlugQuery({\n      variables: { slug: props.slug }\n    });\n    if (error) {\n      console.log(error);\n    }\n    if (data && data.CourseGroupBySlug) {\n      ({ title, description, rating, ratingsCount, asset } = data.CourseGroupBySlug);\n    }\n    return { title, description, rating, ratingsCount, asset };\n  }\n\n  if (props.contentKind === 'learningPath') {\n    ({ title, description, asset } = LearningPathContentKind());\n  } else {\n    ({ title, description, rating, ratingsCount, asset } = CourseGroupContentKind());\n  }\n\n  return (\n    // container\n    <div className=\"py-24 px-20\">\n      <div className=\"px-1\">\n        {/* header */}\n        <div className=\"text-5xl font-bold pb-2 font-primary\">{title}</div>\n        {/* description */}\n        <div className=\"text-lg text-slate-400 pb-2.5 font-primary\">{description}</div>\n        {/* stars */}\n        {props.showStars && props.contentKind !== 'learningPath' && (\n          <div className=\"flex pb-8\">\n            <>\n              {rating && (\n                <>\n                  <Stars score={rating} />\n                  <div className=\"font-bold px-1\">{(rating / 20).toFixed(1)}</div>\n                </>\n              )}\n              {`(${ratingsCount} Reviews)`}\n            </>\n          </div>\n        )}\n      </div>\n      {/* image */}\n      {props.showImage && asset && <img src={asset} className=\"w-[600px]\" />}\n    </div>\n  );\n};\n\nContentHeader.displayName = 'ContentHeader';\nexport default ContentHeader;\n"],"names":["isObjectLike","value","invariant","condition","message","LineRegExp","getLocation","source","position","lastLineStart","line","match","printLocation","location","printSourceLocation","sourceLocation","firstLineColumnOffset","body","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","lines","locationLine","subLineIndex","subLineColumnNum","subLines","i","printPrefixedLines","subLine","existingLines","_","padLen","prefix","toNormalizedOptions","args","firstArg","GraphQLError","rawArgs","_this$nodes","_nodeLocations$","_ref","nodes","positions","path","originalError","extensions","undefinedIfEmpty","nodeLocations","node","loc","pos","originalExtensions","output","formattedError","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","Token","token","nextToken","readNextToken","isPunctuatorTokenKind","kind","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","isTrailingSurrogate","printCodePointAt","lexer","char","createToken","start","end","col","bodyLength","readComment","readBlockString","readString","isDigit","readNumber","isNameStart","readName","firstCode","isFloat","readDigits","chunkStart","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","point","size","readHexDigit","read16BitHexCode","trailingCode","lineStart","currentLine","blockLines","dedentBlockStringLines","isNameContinue","parse","options","Parser","sourceObj","isSource","Source","Kind","hasDescription","keywordToken","OperationTypeNode","operation","name","operationToken","nameOrAlias","alias","isConst","item","hasTypeCondition","varName","directives","type","innerType","operationTypes","interfaces","fields","defaultValue","types","values","getTokenDesc","repeatable","locations","startToken","Location","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","maxTokens","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","cacheKeyFromLoc","processFragments","ast","seenKeys","definitions","fragmentDefinition","fragmentName","sourceKey","sourceKeySet","__assign","stripLoc","doc","workSet","key","parseDocument","cacheKey","parsed","gql","literals","_i","result","arg","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","extras","gql_1","useApolloClient","override","context","useContext","getApolloContext","client","didWarnUncachedGetSnapshot","uSESKey","realHook","React","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","_a","React.useState","inst","forceUpdate","canUseLayoutEffect","React.useLayoutEffect","checkIfSnapshotChanged","React.useEffect","DocumentType","cache","operationName","parser","document","cached","variables","fragments","queries","mutations","subscriptions","x","definition","payload","verifyDocumentType","requiredOperationName","usedOperationName","hasOwnProperty","useQuery","query","useInternalState","stateRef","useRef","InternalState","state","useState","setTick","tick","previous","maybeDeepFreeze","NetworkStatus","canUseWeakMap","previousResult","previousData","_this","concast","resolve","obsQuery","useCallback","onNext","equal","onError","error","last","subscription","watchQueryOptions","currentWatchQueryOptions","toMerge","globalDefaults","compact","mergeOptions","_b","skip","otherOptions","__rest","_c","fetchPolicy","_d","initialFetchPolicy","data","useMemo","ssrAllowed","nextResult","error_1","isNonEmptyArray","ApolloError","queryResult","resultWithoutPartial","EAGER_METHODS","useLazyQuery","execOptionsRef","optionsRef","queryRef","merged","internalState","useQueryResult","eagerMethods","_loop_1","method","EAGER_METHODS_1","execute","executeOptions","promise","ContentFragmentFragmentDoc","LocationFragmentFragmentDoc","CatalogMetaFragmentFragmentDoc","defaultOptions","CatalogContentDocument","useCatalogContentQuery","baseOptions","Apollo.useQuery","useCatalogContentLazyQuery","Apollo.useLazyQuery","CatalogDocument","useCatalogQuery","useCatalogLazyQuery","CourseGroupBySlugDocument","useCourseGroupBySlugQuery","useCourseGroupBySlugLazyQuery","LearningPathBySlugDocument","useLearningPathBySlugQuery","useLearningPathBySlugLazyQuery","LanguagesQueryDocument","useLanguagesQueryQuery","useLanguagesQueryLazyQuery","ContentsDocument","useContentsQuery","useContentsLazyQuery","RssItemsDocument","useRssItemsQuery","useRssItemsLazyQuery","UserRecentContentDocument","useUserRecentContentQuery","useUserRecentContentLazyQuery","UserContentItemsDocument","useUserContentItemsQuery","useUserContentItemsLazyQuery","UserArchivesDocument","useUserArchivesQuery","useUserArchivesLazyQuery","UserWaitlistDocument","useUserWaitlistQuery","useUserWaitlistLazyQuery","UserBookmarksDocument","useUserBookmarksQuery","useUserBookmarksLazyQuery","UserCertificatesDocument","useUserCertificatesQuery","useUserCertificatesLazyQuery","ContentGroupsDocument","useContentGroupsQuery","useContentGroupsLazyQuery","UserBookmarksByFolderDocument","useUserBookmarksByFolderQuery","useUserBookmarksByFolderLazyQuery","UserCourseCompletionProgressDocument","useUserCourseCompletionProgressQuery","useUserCourseCompletionProgressLazyQuery","UserCourseProgressDocument","useUserCourseProgressQuery","useUserCourseProgressLazyQuery","UserCourseAwardCountsDocument","useUserCourseAwardCountsQuery","useUserCourseAwardCountsLazyQuery","UserCourseCollaborationsDocument","useUserCourseCollaborationsQuery","useUserCourseCollaborationsLazyQuery","UserCertificateFieldsDocument","useUserCertificateFieldsQuery","useUserCertificateFieldsLazyQuery","Stars","props","maskWidth","jsxs","jsx","ContentHeader","title","rating","ratingsCount","asset","shortDescription","LearningPathContentKind","CourseGroupContentKind","Fragment"],"mappings":"kXAIO,SAASA,GAAaC,EAAO,CAClC,OAAO,OAAOA,GAAS,UAAYA,IAAU,IAC/C,CCNO,SAASC,GAAUC,EAAWC,EAAS,CAG5C,GAAI,CAFqB,EAAQD,EAG/B,MAAM,IAAI,MACRC,GAA4B,iCAClC,CAEA,CCPA,MAAMC,GAAa,eASZ,SAASC,EAAYC,EAAQC,EAAU,CAC5C,IAAIC,EAAgB,EAChBC,EAAO,EAEX,UAAWC,KAASJ,EAAO,KAAK,SAASF,EAAU,EAAG,CAGpD,GAFA,OAAOM,EAAM,OAAU,UAAYT,GAAU,EAAK,EAE9CS,EAAM,OAASH,EACjB,MAGFC,EAAgBE,EAAM,MAAQA,EAAM,CAAC,EAAE,OACvCD,GAAQ,EAGV,MAAO,CACL,KAAAA,EACA,OAAQF,EAAW,EAAIC,CAC3B,CACA,CCxBO,SAASG,GAAcC,EAAU,CACtC,OAAOC,GACLD,EAAS,OACTP,EAAYO,EAAS,OAAQA,EAAS,KAAK,CAC/C,CACA,CAKO,SAASC,GAAoBP,EAAQQ,EAAgB,CAC1D,MAAMC,EAAwBT,EAAO,eAAe,OAAS,EACvDU,EAAO,GAAG,SAASD,CAAqB,EAAIT,EAAO,KACnDW,EAAYH,EAAe,KAAO,EAClCI,EAAaZ,EAAO,eAAe,KAAO,EAC1Ca,EAAUL,EAAe,KAAOI,EAChCE,EAAeN,EAAe,OAAS,EAAIC,EAAwB,EACnEM,EAAYP,EAAe,OAASM,EACpCE,EAAc,GAAGhB,EAAO,QAAQa,KAAWE;AAAA,EAC3CE,EAAQP,EAAK,MAAM,cAAc,EACjCQ,EAAeD,EAAMN,CAAS,EAEpC,GAAIO,EAAa,OAAS,IAAK,CAC7B,MAAMC,EAAe,KAAK,MAAMJ,EAAY,EAAE,EACxCK,EAAmBL,EAAY,GAC/BM,EAAW,CAAA,EAEjB,QAASC,EAAI,EAAGA,EAAIJ,EAAa,OAAQI,GAAK,GAC5CD,EAAS,KAAKH,EAAa,MAAMI,EAAGA,EAAI,EAAE,CAAC,EAG7C,OACEN,EACAO,GAAmB,CACjB,CAAC,GAAGV,MAAaQ,EAAS,CAAC,CAAC,EAC5B,GAAGA,EAAS,MAAM,EAAGF,EAAe,CAAC,EAAE,IAAKK,GAAY,CAAC,IAAKA,CAAO,CAAC,EACtE,CAAC,IAAK,IAAI,SAASJ,CAAgB,CAAC,EACpC,CAAC,IAAKC,EAASF,EAAe,CAAC,CAAC,CACxC,CAAO,EAIL,OACEH,EACAO,GAAmB,CAEjB,CAAC,GAAGV,EAAU,MAAOI,EAAMN,EAAY,CAAC,CAAC,EACzC,CAAC,GAAGE,MAAaK,CAAY,EAC7B,CAAC,IAAK,IAAI,SAASH,CAAS,CAAC,EAC7B,CAAC,GAAGF,EAAU,MAAOI,EAAMN,EAAY,CAAC,CAAC,CAC/C,CAAK,CAEL,CAEA,SAASY,GAAmBN,EAAO,CACjC,MAAMQ,EAAgBR,EAAM,OAAO,CAAC,CAACS,EAAGvB,CAAI,IAAMA,IAAS,MAAS,EAC9DwB,EAAS,KAAK,IAAI,GAAGF,EAAc,IAAI,CAAC,CAACG,CAAM,IAAMA,EAAO,MAAM,CAAC,EACzE,OAAOH,EACJ,IAAI,CAAC,CAACG,EAAQzB,CAAI,IAAMyB,EAAO,SAASD,CAAM,GAAKxB,EAAO,IAAMA,EAAO,GAAG,EAC1E,KAAK;AAAA,CAAI,CACd,CC1DA,SAAS0B,GAAoBC,EAAM,CACjC,MAAMC,EAAWD,EAAK,CAAC,EAEvB,OAAIC,GAAY,MAAQ,SAAUA,GAAY,WAAYA,EACjD,CACL,MAAOA,EACP,OAAQD,EAAK,CAAC,EACd,UAAWA,EAAK,CAAC,EACjB,KAAMA,EAAK,CAAC,EACZ,cAAeA,EAAK,CAAC,EACrB,WAAYA,EAAK,CAAC,CACxB,EAGSC,CACT,CAQO,MAAMC,UAAqB,KAAM,CA8CtC,YAAYnC,KAAYoC,EAAS,CAC/B,IAAIC,EAAaC,EAAiBC,EAElC,KAAM,CAAE,MAAAC,EAAO,OAAArC,EAAQ,UAAAsC,EAAW,KAAAC,EAAM,cAAAC,EAAe,WAAAC,CAAY,EACjEZ,GAAoBI,CAAO,EAC7B,MAAMpC,CAAO,EACb,KAAK,KAAO,eACZ,KAAK,KAAO0C,GAA0C,OACtD,KAAK,cACHC,GAEI,OAEN,KAAK,MAAQE,GACX,MAAM,QAAQL,CAAK,EAAIA,EAAQA,EAAQ,CAACA,CAAK,EAAI,MACvD,EACI,MAAMM,EAAgBD,IACnBR,EAAc,KAAK,SAAW,MAAQA,IAAgB,OACnD,OACAA,EAAY,IAAKU,GAASA,EAAK,GAAG,EAAE,OAAQC,GAAQA,GAAO,IAAI,CACzE,EAEI,KAAK,OACH7C,IAEI2C,GAAkB,OAEjBR,EAAkBQ,EAAc,CAAC,KAAO,MACzCR,IAAoB,OAFpB,OAIAA,EAAgB,QACtB,KAAK,UACHG,IAEIK,GAAkB,KAClB,OACAA,EAAc,IAAKE,GAAQA,EAAI,KAAK,GAC1C,KAAK,UACHP,GAAatC,EACTsC,EAAU,IAAKQ,GAAQ/C,EAAYC,EAAQ8C,CAAG,CAAC,EAC/CH,GAAkB,KAClB,OACAA,EAAc,IAAKE,GAAQ9C,EAAY8C,EAAI,OAAQA,EAAI,KAAK,CAAC,EACnE,MAAME,EAAqBtD,GACzB+C,GAAkB,KACd,OACAA,EAAc,UACnB,EACGA,GAAkB,KAChB,OACAA,EAAc,WAChB,OACJ,KAAK,YACFJ,EACCK,GAEIM,KAAwB,MAAQX,IAAS,OAC3CA,EACA,OAAO,OAAO,IAAI,EAGxB,OAAO,iBAAiB,KAAM,CAC5B,QAAS,CACP,SAAU,GACV,WAAY,EACb,EACD,KAAM,CACJ,WAAY,EACb,EACD,MAAO,CACL,WAAY,EACb,EACD,OAAQ,CACN,WAAY,EACb,EACD,UAAW,CACT,WAAY,EACb,EACD,cAAe,CACb,WAAY,EACb,CACP,CAAK,EAMCI,GAAkB,MAElBA,EAAc,MAEd,OAAO,eAAe,KAAM,QAAS,CACnC,MAAOA,EAAc,MACrB,SAAU,GACV,aAAc,EACtB,CAAO,EACQ,MAAM,kBACf,MAAM,kBAAkB,KAAMR,CAAY,EAE1C,OAAO,eAAe,KAAM,QAAS,CACnC,MAAO,MAAK,EAAG,MACf,SAAU,GACV,aAAc,EACtB,CAAO,CAGJ,CAED,IAAK,OAAO,WAAW,GAAI,CACzB,MAAO,cACR,CAED,UAAW,CACT,IAAIgB,EAAS,KAAK,QAElB,GAAI,KAAK,MACP,UAAWJ,KAAQ,KAAK,MAClBA,EAAK,MACPI,GAAU;AAAA;AAAA,EAAS3C,GAAcuC,EAAK,GAAG,WAGpC,KAAK,QAAU,KAAK,UAC7B,UAAWtC,KAAY,KAAK,UAC1B0C,GAAU;AAAA;AAAA,EAASzC,GAAoB,KAAK,OAAQD,CAAQ,EAIhE,OAAO0C,CACR,CAED,QAAS,CACP,MAAMC,EAAiB,CACrB,QAAS,KAAK,OACpB,EAEI,OAAI,KAAK,WAAa,OACpBA,EAAe,UAAY,KAAK,WAG9B,KAAK,MAAQ,OACfA,EAAe,KAAO,KAAK,MAGzB,KAAK,YAAc,MAAQ,OAAO,KAAK,KAAK,UAAU,EAAE,OAAS,IACnEA,EAAe,WAAa,KAAK,YAG5BA,CACR,CACH,CAEA,SAASP,GAAiBQ,EAAO,CAC/B,OAAOA,IAAU,QAAaA,EAAM,SAAW,EAAI,OAAYA,CACjE,CC/NO,SAASC,EAAYnD,EAAQC,EAAUmD,EAAa,CACzD,OAAO,IAAIpB,EAAa,iBAAiBoB,IAAe,CACtD,OAAApD,EACA,UAAW,CAACC,CAAQ,CACxB,CAAG,CACH,CCRA,IAAIoD,GAEH,SAAUA,EAAmB,CAC5BA,EAAkB,MAAW,QAC7BA,EAAkB,SAAc,WAChCA,EAAkB,aAAkB,eACpCA,EAAkB,MAAW,QAC7BA,EAAkB,oBAAyB,sBAC3CA,EAAkB,gBAAqB,kBACvCA,EAAkB,gBAAqB,kBACvCA,EAAkB,oBAAyB,sBAC3CA,EAAkB,OAAY,SAC9BA,EAAkB,OAAY,SAC9BA,EAAkB,OAAY,SAC9BA,EAAkB,iBAAsB,mBACxCA,EAAkB,oBAAyB,sBAC3CA,EAAkB,UAAe,YACjCA,EAAkB,MAAW,QAC7BA,EAAkB,KAAU,OAC5BA,EAAkB,WAAgB,aAClCA,EAAkB,aAAkB,eACpCA,EAAkB,uBAA4B,wBAChD,GAAGA,IAAsBA,EAAoB,CAAE,EAAC,ECrBhD,IAAIC,GAEH,SAAUA,EAAW,CACpBA,EAAU,IAAS,QACnBA,EAAU,IAAS,QACnBA,EAAU,KAAU,IACpBA,EAAU,OAAY,IACtBA,EAAU,IAAS,IACnBA,EAAU,QAAa,IACvBA,EAAU,QAAa,IACvBA,EAAU,OAAY,MACtBA,EAAU,MAAW,IACrBA,EAAU,OAAY,IACtBA,EAAU,GAAQ,IAClBA,EAAU,UAAe,IACzBA,EAAU,UAAe,IACzBA,EAAU,QAAa,IACvBA,EAAU,KAAU,IACpBA,EAAU,QAAa,IACvBA,EAAU,KAAU,OACpBA,EAAU,IAAS,MACnBA,EAAU,MAAW,QACrBA,EAAU,OAAY,SACtBA,EAAU,aAAkB,cAC5BA,EAAU,QAAa,SACzB,GAAGA,IAAcA,EAAY,CAAE,EAAC,ECfzB,MAAMC,EAAM,CAgBjB,YAAYvD,EAAQ,CAClB,MAAMwD,EAAmB,IAAIC,GAAMH,EAAU,IAAK,EAAG,EAAG,EAAG,CAAC,EAC5D,KAAK,OAAStD,EACd,KAAK,UAAYwD,EACjB,KAAK,MAAQA,EACb,KAAK,KAAO,EACZ,KAAK,UAAY,CAClB,CAED,IAAK,OAAO,WAAW,GAAI,CACzB,MAAO,OACR,CAKD,SAAU,CACR,YAAK,UAAY,KAAK,MACP,KAAK,MAAQ,KAAK,UAAW,CAE7C,CAMD,WAAY,CACV,IAAIE,EAAQ,KAAK,MAEjB,GAAIA,EAAM,OAASJ,EAAU,IAC3B,EACE,IAAII,EAAM,KACRA,EAAQA,EAAM,SACT,CAEL,MAAMC,EAAYC,GAAc,KAAMF,EAAM,GAAG,EAE/CA,EAAM,KAAOC,EAEbA,EAAU,KAAOD,EACjBA,EAAQC,QAEHD,EAAM,OAASJ,EAAU,SAGpC,OAAOI,CACR,CACH,CAKO,SAASG,GAAsBC,EAAM,CAC1C,OACEA,IAASR,EAAU,MACnBQ,IAASR,EAAU,QACnBQ,IAASR,EAAU,KACnBQ,IAASR,EAAU,SACnBQ,IAASR,EAAU,SACnBQ,IAASR,EAAU,QACnBQ,IAASR,EAAU,OACnBQ,IAASR,EAAU,QACnBQ,IAASR,EAAU,IACnBQ,IAASR,EAAU,WACnBQ,IAASR,EAAU,WACnBQ,IAASR,EAAU,SACnBQ,IAASR,EAAU,MACnBQ,IAASR,EAAU,OAEvB,CAUA,SAASS,EAAqBC,EAAM,CAClC,OACGA,GAAQ,GAAUA,GAAQ,OAAYA,GAAQ,OAAUA,GAAQ,OAErE,CAUA,SAASC,EAAyBvD,EAAMJ,EAAU,CAChD,OACE4D,GAAmBxD,EAAK,WAAWJ,CAAQ,CAAC,GAC5C6D,GAAoBzD,EAAK,WAAWJ,EAAW,CAAC,CAAC,CAErD,CAEA,SAAS4D,GAAmBF,EAAM,CAChC,OAAOA,GAAQ,OAAUA,GAAQ,KACnC,CAEA,SAASG,GAAoBH,EAAM,CACjC,OAAOA,GAAQ,OAAUA,GAAQ,KACnC,CASA,SAASI,EAAiBC,EAAO/D,EAAU,CACzC,MAAM0D,EAAOK,EAAM,OAAO,KAAK,YAAY/D,CAAQ,EAEnD,GAAI0D,IAAS,OACX,OAAOV,EAAU,IACZ,GAAIU,GAAQ,IAAUA,GAAQ,IAAQ,CAE3C,MAAMM,EAAO,OAAO,cAAcN,CAAI,EACtC,OAAOM,IAAS,IAAM,MAAS,IAAIA,KAGrC,MAAO,KAAON,EAAK,SAAS,EAAE,EAAE,YAAW,EAAG,SAAS,EAAG,GAAG,CAC/D,CAKA,SAASO,EAAYF,EAAOP,EAAMU,EAAOC,EAAK/E,EAAO,CACnD,MAAMS,EAAOkE,EAAM,KACbK,EAAM,EAAIF,EAAQH,EAAM,UAC9B,OAAO,IAAIZ,GAAMK,EAAMU,EAAOC,EAAKtE,EAAMuE,EAAKhF,CAAK,CACrD,CASA,SAASkE,GAAcS,EAAOG,EAAO,CACnC,MAAM9D,EAAO2D,EAAM,OAAO,KACpBM,EAAajE,EAAK,OACxB,IAAIT,EAAWuE,EAEf,KAAOvE,EAAW0E,GAAY,CAC5B,MAAMX,EAAOtD,EAAK,WAAWT,CAAQ,EAErC,OAAQ+D,EAAI,CAeV,IAAK,OAEL,IAAK,GAEL,IAAK,IAEL,IAAK,IAEH,EAAE/D,EACF,SAMF,IAAK,IAEH,EAAEA,EACF,EAAEoE,EAAM,KACRA,EAAM,UAAYpE,EAClB,SAEF,IAAK,IAECS,EAAK,WAAWT,EAAW,CAAC,IAAM,GACpCA,GAAY,EAEZ,EAAEA,EAGJ,EAAEoE,EAAM,KACRA,EAAM,UAAYpE,EAClB,SAGF,IAAK,IAEH,OAAO2E,GAAYP,EAAOpE,CAAQ,EAUpC,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,KAAMrD,EAAUA,EAAW,CAAC,EAElE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,OAAQrD,EAAUA,EAAW,CAAC,EAEpE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,IAAKrD,EAAUA,EAAW,CAAC,EAEjE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,QAASrD,EAAUA,EAAW,CAAC,EAErE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,QAASrD,EAAUA,EAAW,CAAC,EAErE,IAAK,IAEH,GACES,EAAK,WAAWT,EAAW,CAAC,IAAM,IAClCS,EAAK,WAAWT,EAAW,CAAC,IAAM,GAElC,OAAOsE,EAAYF,EAAOf,EAAU,OAAQrD,EAAUA,EAAW,CAAC,EAGpE,MAEF,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,MAAOrD,EAAUA,EAAW,CAAC,EAEnE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,OAAQrD,EAAUA,EAAW,CAAC,EAEpE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,GAAIrD,EAAUA,EAAW,CAAC,EAEhE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,UAAWrD,EAAUA,EAAW,CAAC,EAEvE,IAAK,IAEH,OAAOsE,EAAYF,EAAOf,EAAU,UAAWrD,EAAUA,EAAW,CAAC,EAEvE,IAAK,KAEH,OAAOsE,EAAYF,EAAOf,EAAU,QAASrD,EAAUA,EAAW,CAAC,EAErE,IAAK,KAEH,OAAOsE,EAAYF,EAAOf,EAAU,KAAMrD,EAAUA,EAAW,CAAC,EAElE,IAAK,KAEH,OAAOsE,EAAYF,EAAOf,EAAU,QAASrD,EAAUA,EAAW,CAAC,EAGrE,IAAK,IAEH,OACES,EAAK,WAAWT,EAAW,CAAC,IAAM,IAClCS,EAAK,WAAWT,EAAW,CAAC,IAAM,GAE3B4E,GAAgBR,EAAOpE,CAAQ,EAGjC6E,GAAWT,EAAOpE,CAAQ,CACpC,CAED,GAAI8E,EAAQf,CAAI,GAAKA,IAAS,GAC5B,OAAOgB,GAAWX,EAAOpE,EAAU+D,CAAI,EAGzC,GAAIiB,GAAYjB,CAAI,EAClB,OAAOkB,GAASb,EAAOpE,CAAQ,EAGjC,MAAMkD,EACJkB,EAAM,OACNpE,EACA+D,IAAS,GACL,iFACAD,EAAqBC,CAAI,GAAKC,EAAyBvD,EAAMT,CAAQ,EACrE,yBAAyBmE,EAAiBC,EAAOpE,CAAQ,KACzD,sBAAsBmE,EAAiBC,EAAOpE,CAAQ,IAChE,EAGE,OAAOsE,EAAYF,EAAOf,EAAU,IAAKqB,EAAYA,CAAU,CACjE,CAWA,SAASC,GAAYP,EAAOG,EAAO,CACjC,MAAM9D,EAAO2D,EAAM,OAAO,KACpBM,EAAajE,EAAK,OACxB,IAAIT,EAAWuE,EAAQ,EAEvB,KAAOvE,EAAW0E,GAAY,CAC5B,MAAMX,EAAOtD,EAAK,WAAWT,CAAQ,EAErC,GAAI+D,IAAS,IAAUA,IAAS,GAC9B,MAGF,GAAID,EAAqBC,CAAI,EAC3B,EAAE/D,UACOgE,EAAyBvD,EAAMT,CAAQ,EAChDA,GAAY,MAEZ,OAIJ,OAAOsE,EACLF,EACAf,EAAU,QACVkB,EACAvE,EACAS,EAAK,MAAM8D,EAAQ,EAAGvE,CAAQ,CAClC,CACA,CA+BA,SAAS+E,GAAWX,EAAOG,EAAOW,EAAW,CAC3C,MAAMzE,EAAO2D,EAAM,OAAO,KAC1B,IAAIpE,EAAWuE,EACXR,EAAOmB,EACPC,EAAU,GAMd,GAJIpB,IAAS,KACXA,EAAOtD,EAAK,WAAW,EAAET,CAAQ,GAG/B+D,IAAS,IAGX,GAFAA,EAAOtD,EAAK,WAAW,EAAET,CAAQ,EAE7B8E,EAAQf,CAAI,EACd,MAAMb,EACJkB,EAAM,OACNpE,EACA,6CAA6CmE,EAC3CC,EACApE,CACD,IACT,OAGIA,EAAWoF,EAAWhB,EAAOpE,EAAU+D,CAAI,EAC3CA,EAAOtD,EAAK,WAAWT,CAAQ,EAsBjC,GAnBI+D,IAAS,KACXoB,EAAU,GACVpB,EAAOtD,EAAK,WAAW,EAAET,CAAQ,EACjCA,EAAWoF,EAAWhB,EAAOpE,EAAU+D,CAAI,EAC3CA,EAAOtD,EAAK,WAAWT,CAAQ,IAG7B+D,IAAS,IAAUA,IAAS,OAC9BoB,EAAU,GACVpB,EAAOtD,EAAK,WAAW,EAAET,CAAQ,GAE7B+D,IAAS,IAAUA,IAAS,MAC9BA,EAAOtD,EAAK,WAAW,EAAET,CAAQ,GAGnCA,EAAWoF,EAAWhB,EAAOpE,EAAU+D,CAAI,EAC3CA,EAAOtD,EAAK,WAAWT,CAAQ,GAG7B+D,IAAS,IAAUiB,GAAYjB,CAAI,EACrC,MAAMb,EACJkB,EAAM,OACNpE,EACA,2CAA2CmE,EACzCC,EACApE,CACD,IACP,EAGE,OAAOsE,EACLF,EACAe,EAAU9B,EAAU,MAAQA,EAAU,IACtCkB,EACAvE,EACAS,EAAK,MAAM8D,EAAOvE,CAAQ,CAC9B,CACA,CAKA,SAASoF,EAAWhB,EAAOG,EAAOW,EAAW,CAC3C,GAAI,CAACJ,EAAQI,CAAS,EACpB,MAAMhC,EACJkB,EAAM,OACNG,EACA,2CAA2CJ,EACzCC,EACAG,CACD,IACP,EAGE,MAAM9D,EAAO2D,EAAM,OAAO,KAC1B,IAAIpE,EAAWuE,EAAQ,EAEvB,KAAOO,EAAQrE,EAAK,WAAWT,CAAQ,CAAC,GACtC,EAAEA,EAGJ,OAAOA,CACT,CAsBA,SAAS6E,GAAWT,EAAOG,EAAO,CAChC,MAAM9D,EAAO2D,EAAM,OAAO,KACpBM,EAAajE,EAAK,OACxB,IAAIT,EAAWuE,EAAQ,EACnBc,EAAarF,EACbP,EAAQ,GAEZ,KAAOO,EAAW0E,GAAY,CAC5B,MAAMX,EAAOtD,EAAK,WAAWT,CAAQ,EAErC,GAAI+D,IAAS,GACX,OAAAtE,GAASgB,EAAK,MAAM4E,EAAYrF,CAAQ,EACjCsE,EAAYF,EAAOf,EAAU,OAAQkB,EAAOvE,EAAW,EAAGP,CAAK,EAGxE,GAAIsE,IAAS,GAAQ,CACnBtE,GAASgB,EAAK,MAAM4E,EAAYrF,CAAQ,EACxC,MAAMsF,EACJ7E,EAAK,WAAWT,EAAW,CAAC,IAAM,IAC9BS,EAAK,WAAWT,EAAW,CAAC,IAAM,IAChCuF,GAAgCnB,EAAOpE,CAAQ,EAC/CwF,GAA6BpB,EAAOpE,CAAQ,EAC9CyF,GAAqBrB,EAAOpE,CAAQ,EAC1CP,GAAS6F,EAAO,MAChBtF,GAAYsF,EAAO,KACnBD,EAAarF,EACb,SAGF,GAAI+D,IAAS,IAAUA,IAAS,GAC9B,MAGF,GAAID,EAAqBC,CAAI,EAC3B,EAAE/D,UACOgE,EAAyBvD,EAAMT,CAAQ,EAChDA,GAAY,MAEZ,OAAMkD,EACJkB,EAAM,OACNpE,EACA,oCAAoCmE,EAClCC,EACApE,CACD,IACT,EAIE,MAAMkD,EAAYkB,EAAM,OAAQpE,EAAU,sBAAsB,CAClE,CAEA,SAASuF,GAAgCnB,EAAOpE,EAAU,CACxD,MAAMS,EAAO2D,EAAM,OAAO,KAC1B,IAAIsB,EAAQ,EACRC,EAAO,EAEX,KAAOA,EAAO,IAAI,CAChB,MAAM5B,EAAOtD,EAAK,WAAWT,EAAW2F,GAAM,EAE9C,GAAI5B,IAAS,IAAQ,CAEnB,GAAI4B,EAAO,GAAK,CAAC7B,EAAqB4B,CAAK,EACzC,MAGF,MAAO,CACL,MAAO,OAAO,cAAcA,CAAK,EACjC,KAAAC,CACR,EAKI,GAFAD,EAASA,GAAS,EAAKE,EAAa7B,CAAI,EAEpC2B,EAAQ,EACV,MAIJ,MAAMxC,EACJkB,EAAM,OACNpE,EACA,qCAAqCS,EAAK,MACxCT,EACAA,EAAW2F,CACZ,KACL,CACA,CAEA,SAASH,GAA6BpB,EAAOpE,EAAU,CACrD,MAAMS,EAAO2D,EAAM,OAAO,KACpBL,EAAO8B,GAAiBpF,EAAMT,EAAW,CAAC,EAEhD,GAAI8D,EAAqBC,CAAI,EAC3B,MAAO,CACL,MAAO,OAAO,cAAcA,CAAI,EAChC,KAAM,CACZ,EAIE,GAAIE,GAAmBF,CAAI,GAGvBtD,EAAK,WAAWT,EAAW,CAAC,IAAM,IAClCS,EAAK,WAAWT,EAAW,CAAC,IAAM,IAClC,CACA,MAAM8F,EAAeD,GAAiBpF,EAAMT,EAAW,CAAC,EAExD,GAAIkE,GAAoB4B,CAAY,EAOlC,MAAO,CACL,MAAO,OAAO,cAAc/B,EAAM+B,CAAY,EAC9C,KAAM,EAChB,EAKE,MAAM5C,EACJkB,EAAM,OACNpE,EACA,qCAAqCS,EAAK,MAAMT,EAAUA,EAAW,CAAC,KAC1E,CACA,CASA,SAAS6F,GAAiBpF,EAAMT,EAAU,CAGxC,OACG4F,EAAanF,EAAK,WAAWT,CAAQ,CAAC,GAAK,GAC3C4F,EAAanF,EAAK,WAAWT,EAAW,CAAC,CAAC,GAAK,EAC/C4F,EAAanF,EAAK,WAAWT,EAAW,CAAC,CAAC,GAAK,EAChD4F,EAAanF,EAAK,WAAWT,EAAW,CAAC,CAAC,CAE9C,CAgBA,SAAS4F,EAAa7B,EAAM,CAC1B,OAAOA,GAAQ,IAAUA,GAAQ,GAC7BA,EAAO,GACPA,GAAQ,IAAUA,GAAQ,GAC1BA,EAAO,GACPA,GAAQ,IAAUA,GAAQ,IAC1BA,EAAO,GACP,EACN,CAcA,SAAS0B,GAAqBrB,EAAOpE,EAAU,CAC7C,MAAMS,EAAO2D,EAAM,OAAO,KAG1B,OAFa3D,EAAK,WAAWT,EAAW,CAAC,EAE7B,CACV,IAAK,IAEH,MAAO,CACL,MAAO,IACP,KAAM,CACd,EAEI,IAAK,IAEH,MAAO,CACL,MAAO,KACP,KAAM,CACd,EAEI,IAAK,IAEH,MAAO,CACL,MAAO,IACP,KAAM,CACd,EAEI,IAAK,IAEH,MAAO,CACL,MAAO,KACP,KAAM,CACd,EAEI,IAAK,KAEH,MAAO,CACL,MAAO,KACP,KAAM,CACd,EAEI,IAAK,KAEH,MAAO,CACL,MAAO;AAAA,EACP,KAAM,CACd,EAEI,IAAK,KAEH,MAAO,CACL,MAAO,KACP,KAAM,CACd,EAEI,IAAK,KAEH,MAAO,CACL,MAAO,IACP,KAAM,CACd,CACG,CAED,MAAMkD,EACJkB,EAAM,OACNpE,EACA,uCAAuCS,EAAK,MAC1CT,EACAA,EAAW,CACZ,KACL,CACA,CAcA,SAAS4E,GAAgBR,EAAOG,EAAO,CACrC,MAAM9D,EAAO2D,EAAM,OAAO,KACpBM,EAAajE,EAAK,OACxB,IAAIsF,EAAY3B,EAAM,UAClBpE,EAAWuE,EAAQ,EACnBc,EAAarF,EACbgG,EAAc,GAClB,MAAMC,EAAa,CAAA,EAEnB,KAAOjG,EAAW0E,GAAY,CAC5B,MAAMX,EAAOtD,EAAK,WAAWT,CAAQ,EAErC,GACE+D,IAAS,IACTtD,EAAK,WAAWT,EAAW,CAAC,IAAM,IAClCS,EAAK,WAAWT,EAAW,CAAC,IAAM,GAClC,CACAgG,GAAevF,EAAK,MAAM4E,EAAYrF,CAAQ,EAC9CiG,EAAW,KAAKD,CAAW,EAC3B,MAAMvC,EAAQa,EACZF,EACAf,EAAU,aACVkB,EACAvE,EAAW,EACXkG,GAAuBD,CAAU,EAAE,KAAK;AAAA,CAAI,CACpD,EACM,OAAA7B,EAAM,MAAQ6B,EAAW,OAAS,EAClC7B,EAAM,UAAY2B,EACXtC,EAGT,GACEM,IAAS,IACTtD,EAAK,WAAWT,EAAW,CAAC,IAAM,IAClCS,EAAK,WAAWT,EAAW,CAAC,IAAM,IAClCS,EAAK,WAAWT,EAAW,CAAC,IAAM,GAClC,CACAgG,GAAevF,EAAK,MAAM4E,EAAYrF,CAAQ,EAC9CqF,EAAarF,EAAW,EAExBA,GAAY,EACZ,SAGF,GAAI+D,IAAS,IAAUA,IAAS,GAAQ,CACtCiC,GAAevF,EAAK,MAAM4E,EAAYrF,CAAQ,EAC9CiG,EAAW,KAAKD,CAAW,EAEvBjC,IAAS,IAAUtD,EAAK,WAAWT,EAAW,CAAC,IAAM,GACvDA,GAAY,EAEZ,EAAEA,EAGJgG,EAAc,GACdX,EAAarF,EACb+F,EAAY/F,EACZ,SAGF,GAAI8D,EAAqBC,CAAI,EAC3B,EAAE/D,UACOgE,EAAyBvD,EAAMT,CAAQ,EAChDA,GAAY,MAEZ,OAAMkD,EACJkB,EAAM,OACNpE,EACA,oCAAoCmE,EAClCC,EACApE,CACD,IACT,EAIE,MAAMkD,EAAYkB,EAAM,OAAQpE,EAAU,sBAAsB,CAClE,CAUA,SAASiF,GAASb,EAAOG,EAAO,CAC9B,MAAM9D,EAAO2D,EAAM,OAAO,KACpBM,EAAajE,EAAK,OACxB,IAAIT,EAAWuE,EAAQ,EAEvB,KAAOvE,EAAW0E,GAAY,CAC5B,MAAMX,EAAOtD,EAAK,WAAWT,CAAQ,EAErC,GAAImG,GAAepC,CAAI,EACrB,EAAE/D,MAEF,OAIJ,OAAOsE,EACLF,EACAf,EAAU,KACVkB,EACAvE,EACAS,EAAK,MAAM8D,EAAOvE,CAAQ,CAC9B,CACA,CCt3BO,SAASoG,GAAMrG,EAAQsG,EAAS,CAErC,OADe,IAAIC,GAAOvG,EAAQsG,CAAO,EAC3B,eAChB,CA6DO,MAAMC,EAAO,CAClB,YAAYvG,EAAQsG,EAAU,GAAI,CAChC,MAAME,EAAYC,GAASzG,CAAM,EAAIA,EAAS,IAAI0G,GAAO1G,CAAM,EAC/D,KAAK,OAAS,IAAIuD,GAAMiD,CAAS,EACjC,KAAK,SAAWF,EAChB,KAAK,cAAgB,CACtB,CAKD,WAAY,CACV,MAAM5C,EAAQ,KAAK,YAAYJ,EAAU,IAAI,EAC7C,OAAO,KAAK,KAAKI,EAAO,CACtB,KAAMiD,EAAK,KACX,MAAOjD,EAAM,KACnB,CAAK,CACF,CAMD,eAAgB,CACd,OAAO,KAAK,KAAK,KAAK,OAAO,MAAO,CAClC,KAAMiD,EAAK,SACX,YAAa,KAAK,KAChBrD,EAAU,IACV,KAAK,gBACLA,EAAU,GACX,CACP,CAAK,CACF,CAyBD,iBAAkB,CAChB,GAAI,KAAK,KAAKA,EAAU,OAAO,EAC7B,OAAO,KAAK,2BAGd,MAAMsD,EAAiB,KAAK,kBACtBC,EAAeD,EACjB,KAAK,OAAO,UAAW,EACvB,KAAK,OAAO,MAEhB,GAAIC,EAAa,OAASvD,EAAU,KAAM,CACxC,OAAQuD,EAAa,MAAK,CACxB,IAAK,SACH,OAAO,KAAK,wBAEd,IAAK,SACH,OAAO,KAAK,4BAEd,IAAK,OACH,OAAO,KAAK,4BAEd,IAAK,YACH,OAAO,KAAK,+BAEd,IAAK,QACH,OAAO,KAAK,2BAEd,IAAK,OACH,OAAO,KAAK,0BAEd,IAAK,QACH,OAAO,KAAK,iCAEd,IAAK,YACH,OAAO,KAAK,0BACf,CAED,GAAID,EACF,MAAMzD,EACJ,KAAK,OAAO,OACZ,KAAK,OAAO,MAAM,MAClB,8EACV,EAGM,OAAQ0D,EAAa,MAAK,CACxB,IAAK,QACL,IAAK,WACL,IAAK,eACH,OAAO,KAAK,2BAEd,IAAK,WACH,OAAO,KAAK,0BAEd,IAAK,SACH,OAAO,KAAK,0BACf,EAGH,MAAM,KAAK,WAAWA,CAAY,CACnC,CAQD,0BAA2B,CACzB,MAAMrC,EAAQ,KAAK,OAAO,MAE1B,GAAI,KAAK,KAAKlB,EAAU,OAAO,EAC7B,OAAO,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,qBACX,UAAWG,EAAkB,MAC7B,KAAM,OACN,oBAAqB,CAAE,EACvB,WAAY,CAAE,EACd,aAAc,KAAK,kBAAmB,CAC9C,CAAO,EAGH,MAAMC,EAAY,KAAK,qBACvB,IAAIC,EAEJ,OAAI,KAAK,KAAK1D,EAAU,IAAI,IAC1B0D,EAAO,KAAK,aAGP,KAAK,KAAKxC,EAAO,CACtB,KAAMmC,EAAK,qBACX,UAAAI,EACA,KAAAC,EACA,oBAAqB,KAAK,yBAA0B,EACpD,WAAY,KAAK,gBAAgB,EAAK,EACtC,aAAc,KAAK,kBAAmB,CAC5C,CAAK,CACF,CAKD,oBAAqB,CACnB,MAAMC,EAAiB,KAAK,YAAY3D,EAAU,IAAI,EAEtD,OAAQ2D,EAAe,MAAK,CAC1B,IAAK,QACH,OAAOH,EAAkB,MAE3B,IAAK,WACH,OAAOA,EAAkB,SAE3B,IAAK,eACH,OAAOA,EAAkB,YAC5B,CAED,MAAM,KAAK,WAAWG,CAAc,CACrC,CAKD,0BAA2B,CACzB,OAAO,KAAK,aACV3D,EAAU,QACV,KAAK,wBACLA,EAAU,OAChB,CACG,CAKD,yBAA0B,CACxB,OAAO,KAAK,KAAK,KAAK,OAAO,MAAO,CAClC,KAAMqD,EAAK,oBACX,SAAU,KAAK,cAAe,EAC9B,MAAO,KAAK,YAAYrD,EAAU,KAAK,EAAG,KAAK,sBAC/C,aAAc,KAAK,oBAAoBA,EAAU,MAAM,EACnD,KAAK,uBAAwB,EAC7B,OACJ,WAAY,KAAK,qBAAsB,CAC7C,CAAK,CACF,CAKD,eAAgB,CACd,MAAMkB,EAAQ,KAAK,OAAO,MAC1B,YAAK,YAAYlB,EAAU,MAAM,EAC1B,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,SACX,KAAM,KAAK,UAAW,CAC5B,CAAK,CACF,CAOD,mBAAoB,CAClB,OAAO,KAAK,KAAK,KAAK,OAAO,MAAO,CAClC,KAAMA,EAAK,cACX,WAAY,KAAK,KACfrD,EAAU,QACV,KAAK,eACLA,EAAU,OACX,CACP,CAAK,CACF,CAQD,gBAAiB,CACf,OAAO,KAAK,KAAKA,EAAU,MAAM,EAC7B,KAAK,cAAe,EACpB,KAAK,WAAU,CACpB,CAOD,YAAa,CACX,MAAMkB,EAAQ,KAAK,OAAO,MACpB0C,EAAc,KAAK,YACzB,IAAIC,EACAH,EAEJ,OAAI,KAAK,oBAAoB1D,EAAU,KAAK,GAC1C6D,EAAQD,EACRF,EAAO,KAAK,aAEZA,EAAOE,EAGF,KAAK,KAAK1C,EAAO,CACtB,KAAMmC,EAAK,MACX,MAAAQ,EACA,KAAAH,EACA,UAAW,KAAK,eAAe,EAAK,EACpC,WAAY,KAAK,gBAAgB,EAAK,EACtC,aAAc,KAAK,KAAK1D,EAAU,OAAO,EACrC,KAAK,kBAAmB,EACxB,MACV,CAAK,CACF,CAKD,eAAe8D,EAAS,CACtB,MAAMC,EAAOD,EAAU,KAAK,mBAAqB,KAAK,cACtD,OAAO,KAAK,aAAa9D,EAAU,QAAS+D,EAAM/D,EAAU,OAAO,CACpE,CAKD,cAAc8D,EAAU,GAAO,CAC7B,MAAM5C,EAAQ,KAAK,OAAO,MACpBwC,EAAO,KAAK,YAClB,YAAK,YAAY1D,EAAU,KAAK,EACzB,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,SACX,KAAAK,EACA,MAAO,KAAK,kBAAkBI,CAAO,CAC3C,CAAK,CACF,CAED,oBAAqB,CACnB,OAAO,KAAK,cAAc,EAAI,CAC/B,CAUD,eAAgB,CACd,MAAM5C,EAAQ,KAAK,OAAO,MAC1B,KAAK,YAAYlB,EAAU,MAAM,EACjC,MAAMgE,EAAmB,KAAK,sBAAsB,IAAI,EAExD,MAAI,CAACA,GAAoB,KAAK,KAAKhE,EAAU,IAAI,EACxC,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,gBACX,KAAM,KAAK,kBAAmB,EAC9B,WAAY,KAAK,gBAAgB,EAAK,CAC9C,CAAO,EAGI,KAAK,KAAKnC,EAAO,CACtB,KAAMmC,EAAK,gBACX,cAAeW,EAAmB,KAAK,eAAgB,EAAG,OAC1D,WAAY,KAAK,gBAAgB,EAAK,EACtC,aAAc,KAAK,kBAAmB,CAC5C,CAAK,CACF,CAQD,yBAA0B,CACxB,MAAM9C,EAAQ,KAAK,OAAO,MAK1B,OAJA,KAAK,cAAc,UAAU,EAIzB,KAAK,SAAS,+BAAiC,GAC1C,KAAK,KAAKA,EAAO,CACtB,KAAMmC,EAAK,oBACX,KAAM,KAAK,kBAAmB,EAC9B,oBAAqB,KAAK,yBAA0B,EACpD,eAAgB,KAAK,cAAc,IAAI,EAAG,KAAK,kBAC/C,WAAY,KAAK,gBAAgB,EAAK,EACtC,aAAc,KAAK,kBAAmB,CAC9C,CAAO,EAGI,KAAK,KAAKnC,EAAO,CACtB,KAAMmC,EAAK,oBACX,KAAM,KAAK,kBAAmB,EAC9B,eAAgB,KAAK,cAAc,IAAI,EAAG,KAAK,kBAC/C,WAAY,KAAK,gBAAgB,EAAK,EACtC,aAAc,KAAK,kBAAmB,CAC5C,CAAK,CACF,CAKD,mBAAoB,CAClB,GAAI,KAAK,OAAO,MAAM,QAAU,KAC9B,MAAM,KAAK,aAGb,OAAO,KAAK,WACb,CAqBD,kBAAkBS,EAAS,CACzB,MAAM1D,EAAQ,KAAK,OAAO,MAE1B,OAAQA,EAAM,KAAI,CAChB,KAAKJ,EAAU,UACb,OAAO,KAAK,UAAU8D,CAAO,EAE/B,KAAK9D,EAAU,QACb,OAAO,KAAK,YAAY8D,CAAO,EAEjC,KAAK9D,EAAU,IACb,YAAK,aAAY,EACV,KAAK,KAAKI,EAAO,CACtB,KAAMiD,EAAK,IACX,MAAOjD,EAAM,KACvB,CAAS,EAEH,KAAKJ,EAAU,MACb,YAAK,aAAY,EACV,KAAK,KAAKI,EAAO,CACtB,KAAMiD,EAAK,MACX,MAAOjD,EAAM,KACvB,CAAS,EAEH,KAAKJ,EAAU,OACf,KAAKA,EAAU,aACb,OAAO,KAAK,qBAEd,KAAKA,EAAU,KAGb,OAFA,KAAK,aAAY,EAETI,EAAM,MAAK,CACjB,IAAK,OACH,OAAO,KAAK,KAAKA,EAAO,CACtB,KAAMiD,EAAK,QACX,MAAO,EACrB,CAAa,EAEH,IAAK,QACH,OAAO,KAAK,KAAKjD,EAAO,CACtB,KAAMiD,EAAK,QACX,MAAO,EACrB,CAAa,EAEH,IAAK,OACH,OAAO,KAAK,KAAKjD,EAAO,CACtB,KAAMiD,EAAK,IACzB,CAAa,EAEH,QACE,OAAO,KAAK,KAAKjD,EAAO,CACtB,KAAMiD,EAAK,KACX,MAAOjD,EAAM,KAC3B,CAAa,CACJ,CAEH,KAAKJ,EAAU,OACb,GAAI8D,EAGF,GAFA,KAAK,YAAY9D,EAAU,MAAM,EAE7B,KAAK,OAAO,MAAM,OAASA,EAAU,KAAM,CAC7C,MAAMiE,EAAU,KAAK,OAAO,MAAM,MAClC,MAAMpE,EACJ,KAAK,OAAO,OACZO,EAAM,MACN,yBAAyB6D,uBACvC,MAEY,OAAM,KAAK,WAAW7D,CAAK,EAI/B,OAAO,KAAK,gBAEd,QACE,MAAM,KAAK,YACd,CACF,CAED,wBAAyB,CACvB,OAAO,KAAK,kBAAkB,EAAI,CACnC,CAED,oBAAqB,CACnB,MAAMA,EAAQ,KAAK,OAAO,MAC1B,YAAK,aAAY,EACV,KAAK,KAAKA,EAAO,CACtB,KAAMiD,EAAK,OACX,MAAOjD,EAAM,MACb,MAAOA,EAAM,OAASJ,EAAU,YACtC,CAAK,CACF,CAOD,UAAU8D,EAAS,CACjB,MAAMC,EAAO,IAAM,KAAK,kBAAkBD,CAAO,EAEjD,OAAO,KAAK,KAAK,KAAK,OAAO,MAAO,CAClC,KAAMT,EAAK,KACX,OAAQ,KAAK,IAAIrD,EAAU,UAAW+D,EAAM/D,EAAU,SAAS,CACrE,CAAK,CACF,CASD,YAAY8D,EAAS,CACnB,MAAMC,EAAO,IAAM,KAAK,iBAAiBD,CAAO,EAEhD,OAAO,KAAK,KAAK,KAAK,OAAO,MAAO,CAClC,KAAMT,EAAK,OACX,OAAQ,KAAK,IAAIrD,EAAU,QAAS+D,EAAM/D,EAAU,OAAO,CACjE,CAAK,CACF,CAKD,iBAAiB8D,EAAS,CACxB,MAAM5C,EAAQ,KAAK,OAAO,MACpBwC,EAAO,KAAK,YAClB,YAAK,YAAY1D,EAAU,KAAK,EACzB,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,aACX,KAAAK,EACA,MAAO,KAAK,kBAAkBI,CAAO,CAC3C,CAAK,CACF,CAMD,gBAAgBA,EAAS,CACvB,MAAMI,EAAa,CAAA,EAEnB,KAAO,KAAK,KAAKlE,EAAU,EAAE,GAC3BkE,EAAW,KAAK,KAAK,eAAeJ,CAAO,CAAC,EAG9C,OAAOI,CACR,CAED,sBAAuB,CACrB,OAAO,KAAK,gBAAgB,EAAI,CACjC,CAOD,eAAeJ,EAAS,CACtB,MAAM5C,EAAQ,KAAK,OAAO,MAC1B,YAAK,YAAYlB,EAAU,EAAE,EACtB,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,UACX,KAAM,KAAK,UAAW,EACtB,UAAW,KAAK,eAAeS,CAAO,CAC5C,CAAK,CACF,CASD,oBAAqB,CACnB,MAAM5C,EAAQ,KAAK,OAAO,MAC1B,IAAIiD,EAEJ,GAAI,KAAK,oBAAoBnE,EAAU,SAAS,EAAG,CACjD,MAAMoE,EAAY,KAAK,qBACvB,KAAK,YAAYpE,EAAU,SAAS,EACpCmE,EAAO,KAAK,KAAKjD,EAAO,CACtB,KAAMmC,EAAK,UACX,KAAMe,CACd,CAAO,OAEDD,EAAO,KAAK,iBAGd,OAAI,KAAK,oBAAoBnE,EAAU,IAAI,EAClC,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,cACX,KAAAc,CACR,CAAO,EAGIA,CACR,CAKD,gBAAiB,CACf,OAAO,KAAK,KAAK,KAAK,OAAO,MAAO,CAClC,KAAMd,EAAK,WACX,KAAM,KAAK,UAAW,CAC5B,CAAK,CACF,CAED,iBAAkB,CAChB,OAAO,KAAK,KAAKrD,EAAU,MAAM,GAAK,KAAK,KAAKA,EAAU,YAAY,CACvE,CAKD,kBAAmB,CACjB,GAAI,KAAK,kBACP,OAAO,KAAK,oBAEf,CAOD,uBAAwB,CACtB,MAAMkB,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,QAAQ,EAC3B,MAAMoE,EAAa,KAAK,uBAClBG,EAAiB,KAAK,KAC1BrE,EAAU,QACV,KAAK,6BACLA,EAAU,OAChB,EACI,OAAO,KAAK,KAAKkB,EAAO,CACtB,KAAMmC,EAAK,kBACX,YAAAvD,EACA,WAAAoE,EACA,eAAAG,CACN,CAAK,CACF,CAKD,8BAA+B,CAC7B,MAAMnD,EAAQ,KAAK,OAAO,MACpBuC,EAAY,KAAK,qBACvB,KAAK,YAAYzD,EAAU,KAAK,EAChC,MAAMmE,EAAO,KAAK,iBAClB,OAAO,KAAK,KAAKjD,EAAO,CACtB,KAAMmC,EAAK,0BACX,UAAAI,EACA,KAAAU,CACN,CAAK,CACF,CAKD,2BAA4B,CAC1B,MAAMjD,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,QAAQ,EAC3B,MAAM4D,EAAO,KAAK,YACZQ,EAAa,KAAK,uBACxB,OAAO,KAAK,KAAKhD,EAAO,CACtB,KAAMmC,EAAK,uBACX,YAAAvD,EACA,KAAA4D,EACA,WAAAQ,CACN,CAAK,CACF,CAOD,2BAA4B,CAC1B,MAAMhD,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,MAAM,EACzB,MAAM4D,EAAO,KAAK,YACZY,EAAa,KAAK,4BAClBJ,EAAa,KAAK,uBAClBK,EAAS,KAAK,wBACpB,OAAO,KAAK,KAAKrD,EAAO,CACtB,KAAMmC,EAAK,uBACX,YAAAvD,EACA,KAAA4D,EACA,WAAAY,EACA,WAAAJ,EACA,OAAAK,CACN,CAAK,CACF,CAOD,2BAA4B,CAC1B,OAAO,KAAK,sBAAsB,YAAY,EAC1C,KAAK,cAAcvE,EAAU,IAAK,KAAK,cAAc,EACrD,EACL,CAOD,uBAAwB,CACtB,OAAO,KAAK,aACVA,EAAU,QACV,KAAK,qBACLA,EAAU,OAChB,CACG,CAMD,sBAAuB,CACrB,MAAMkB,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACnB4D,EAAO,KAAK,YACZlF,EAAO,KAAK,oBAClB,KAAK,YAAYwB,EAAU,KAAK,EAChC,MAAMmE,EAAO,KAAK,qBACZD,EAAa,KAAK,uBACxB,OAAO,KAAK,KAAKhD,EAAO,CACtB,KAAMmC,EAAK,iBACX,YAAAvD,EACA,KAAA4D,EACA,UAAWlF,EACX,KAAA2F,EACA,WAAAD,CACN,CAAK,CACF,CAKD,mBAAoB,CAClB,OAAO,KAAK,aACVlE,EAAU,QACV,KAAK,mBACLA,EAAU,OAChB,CACG,CAMD,oBAAqB,CACnB,MAAMkB,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACnB4D,EAAO,KAAK,YAClB,KAAK,YAAY1D,EAAU,KAAK,EAChC,MAAMmE,EAAO,KAAK,qBAClB,IAAIK,EAEA,KAAK,oBAAoBxE,EAAU,MAAM,IAC3CwE,EAAe,KAAK,0BAGtB,MAAMN,EAAa,KAAK,uBACxB,OAAO,KAAK,KAAKhD,EAAO,CACtB,KAAMmC,EAAK,uBACX,YAAAvD,EACA,KAAA4D,EACA,KAAAS,EACA,aAAAK,EACA,WAAAN,CACN,CAAK,CACF,CAMD,8BAA+B,CAC7B,MAAMhD,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,WAAW,EAC9B,MAAM4D,EAAO,KAAK,YACZY,EAAa,KAAK,4BAClBJ,EAAa,KAAK,uBAClBK,EAAS,KAAK,wBACpB,OAAO,KAAK,KAAKrD,EAAO,CACtB,KAAMmC,EAAK,0BACX,YAAAvD,EACA,KAAA4D,EACA,WAAAY,EACA,WAAAJ,EACA,OAAAK,CACN,CAAK,CACF,CAMD,0BAA2B,CACzB,MAAMrD,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,OAAO,EAC1B,MAAM4D,EAAO,KAAK,YACZQ,EAAa,KAAK,uBAClBO,EAAQ,KAAK,wBACnB,OAAO,KAAK,KAAKvD,EAAO,CACtB,KAAMmC,EAAK,sBACX,YAAAvD,EACA,KAAA4D,EACA,WAAAQ,EACA,MAAAO,CACN,CAAK,CACF,CAOD,uBAAwB,CACtB,OAAO,KAAK,oBAAoBzE,EAAU,MAAM,EAC5C,KAAK,cAAcA,EAAU,KAAM,KAAK,cAAc,EACtD,EACL,CAMD,yBAA0B,CACxB,MAAMkB,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,MAAM,EACzB,MAAM4D,EAAO,KAAK,YACZQ,EAAa,KAAK,uBAClBQ,EAAS,KAAK,4BACpB,OAAO,KAAK,KAAKxD,EAAO,CACtB,KAAMmC,EAAK,qBACX,YAAAvD,EACA,KAAA4D,EACA,WAAAQ,EACA,OAAAQ,CACN,CAAK,CACF,CAOD,2BAA4B,CAC1B,OAAO,KAAK,aACV1E,EAAU,QACV,KAAK,yBACLA,EAAU,OAChB,CACG,CAKD,0BAA2B,CACzB,MAAMkB,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACnB4D,EAAO,KAAK,qBACZQ,EAAa,KAAK,uBACxB,OAAO,KAAK,KAAKhD,EAAO,CACtB,KAAMmC,EAAK,sBACX,YAAAvD,EACA,KAAA4D,EACA,WAAAQ,CACN,CAAK,CACF,CAKD,oBAAqB,CACnB,GACE,KAAK,OAAO,MAAM,QAAU,QAC5B,KAAK,OAAO,MAAM,QAAU,SAC5B,KAAK,OAAO,MAAM,QAAU,OAE5B,MAAMrE,EACJ,KAAK,OAAO,OACZ,KAAK,OAAO,MAAM,MAClB,GAAG8E,EACD,KAAK,OAAO,KACb,qDACT,EAGI,OAAO,KAAK,WACb,CAMD,gCAAiC,CAC/B,MAAMzD,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,OAAO,EAC1B,MAAM4D,EAAO,KAAK,YACZQ,EAAa,KAAK,uBAClBK,EAAS,KAAK,6BACpB,OAAO,KAAK,KAAKrD,EAAO,CACtB,KAAMmC,EAAK,6BACX,YAAAvD,EACA,KAAA4D,EACA,WAAAQ,EACA,OAAAK,CACN,CAAK,CACF,CAOD,4BAA6B,CAC3B,OAAO,KAAK,aACVvE,EAAU,QACV,KAAK,mBACLA,EAAU,OAChB,CACG,CAeD,0BAA2B,CACzB,MAAMuD,EAAe,KAAK,OAAO,UAAS,EAE1C,GAAIA,EAAa,OAASvD,EAAU,KAClC,OAAQuD,EAAa,MAAK,CACxB,IAAK,SACH,OAAO,KAAK,uBAEd,IAAK,SACH,OAAO,KAAK,2BAEd,IAAK,OACH,OAAO,KAAK,2BAEd,IAAK,YACH,OAAO,KAAK,8BAEd,IAAK,QACH,OAAO,KAAK,0BAEd,IAAK,OACH,OAAO,KAAK,yBAEd,IAAK,QACH,OAAO,KAAK,+BACf,CAGH,MAAM,KAAK,WAAWA,CAAY,CACnC,CASD,sBAAuB,CACrB,MAAMrC,EAAQ,KAAK,OAAO,MAC1B,KAAK,cAAc,QAAQ,EAC3B,KAAK,cAAc,QAAQ,EAC3B,MAAMgD,EAAa,KAAK,uBAClBG,EAAiB,KAAK,aAC1BrE,EAAU,QACV,KAAK,6BACLA,EAAU,OAChB,EAEI,GAAIkE,EAAW,SAAW,GAAKG,EAAe,SAAW,EACvD,MAAM,KAAK,aAGb,OAAO,KAAK,KAAKnD,EAAO,CACtB,KAAMmC,EAAK,iBACX,WAAAa,EACA,eAAAG,CACN,CAAK,CACF,CAMD,0BAA2B,CACzB,MAAMnD,EAAQ,KAAK,OAAO,MAC1B,KAAK,cAAc,QAAQ,EAC3B,KAAK,cAAc,QAAQ,EAC3B,MAAMwC,EAAO,KAAK,YACZQ,EAAa,KAAK,uBAExB,GAAIA,EAAW,SAAW,EACxB,MAAM,KAAK,aAGb,OAAO,KAAK,KAAKhD,EAAO,CACtB,KAAMmC,EAAK,sBACX,KAAAK,EACA,WAAAQ,CACN,CAAK,CACF,CAQD,0BAA2B,CACzB,MAAMhD,EAAQ,KAAK,OAAO,MAC1B,KAAK,cAAc,QAAQ,EAC3B,KAAK,cAAc,MAAM,EACzB,MAAMwC,EAAO,KAAK,YACZY,EAAa,KAAK,4BAClBJ,EAAa,KAAK,uBAClBK,EAAS,KAAK,wBAEpB,GACED,EAAW,SAAW,GACtBJ,EAAW,SAAW,GACtBK,EAAO,SAAW,EAElB,MAAM,KAAK,aAGb,OAAO,KAAK,KAAKrD,EAAO,CACtB,KAAMmC,EAAK,sBACX,KAAAK,EACA,WAAAY,EACA,WAAAJ,EACA,OAAAK,CACN,CAAK,CACF,CAQD,6BAA8B,CAC5B,MAAMrD,EAAQ,KAAK,OAAO,MAC1B,KAAK,cAAc,QAAQ,EAC3B,KAAK,cAAc,WAAW,EAC9B,MAAMwC,EAAO,KAAK,YACZY,EAAa,KAAK,4BAClBJ,EAAa,KAAK,uBAClBK,EAAS,KAAK,wBAEpB,GACED,EAAW,SAAW,GACtBJ,EAAW,SAAW,GACtBK,EAAO,SAAW,EAElB,MAAM,KAAK,aAGb,OAAO,KAAK,KAAKrD,EAAO,CACtB,KAAMmC,EAAK,yBACX,KAAAK,EACA,WAAAY,EACA,WAAAJ,EACA,OAAAK,CACN,CAAK,CACF,CAOD,yBAA0B,CACxB,MAAMrD,EAAQ,KAAK,OAAO,MAC1B,KAAK,cAAc,QAAQ,EAC3B,KAAK,cAAc,OAAO,EAC1B,MAAMwC,EAAO,KAAK,YACZQ,EAAa,KAAK,uBAClBO,EAAQ,KAAK,wBAEnB,GAAIP,EAAW,SAAW,GAAKO,EAAM,SAAW,EAC9C,MAAM,KAAK,aAGb,OAAO,KAAK,KAAKvD,EAAO,CACtB,KAAMmC,EAAK,qBACX,KAAAK,EACA,WAAAQ,EACA,MAAAO,CACN,CAAK,CACF,CAOD,wBAAyB,CACvB,MAAMvD,EAAQ,KAAK,OAAO,MAC1B,KAAK,cAAc,QAAQ,EAC3B,KAAK,cAAc,MAAM,EACzB,MAAMwC,EAAO,KAAK,YACZQ,EAAa,KAAK,uBAClBQ,EAAS,KAAK,4BAEpB,GAAIR,EAAW,SAAW,GAAKQ,EAAO,SAAW,EAC/C,MAAM,KAAK,aAGb,OAAO,KAAK,KAAKxD,EAAO,CACtB,KAAMmC,EAAK,oBACX,KAAAK,EACA,WAAAQ,EACA,OAAAQ,CACN,CAAK,CACF,CAOD,+BAAgC,CAC9B,MAAMxD,EAAQ,KAAK,OAAO,MAC1B,KAAK,cAAc,QAAQ,EAC3B,KAAK,cAAc,OAAO,EAC1B,MAAMwC,EAAO,KAAK,YACZQ,EAAa,KAAK,uBAClBK,EAAS,KAAK,6BAEpB,GAAIL,EAAW,SAAW,GAAKK,EAAO,SAAW,EAC/C,MAAM,KAAK,aAGb,OAAO,KAAK,KAAKrD,EAAO,CACtB,KAAMmC,EAAK,4BACX,KAAAK,EACA,WAAAQ,EACA,OAAAK,CACN,CAAK,CACF,CAQD,0BAA2B,CACzB,MAAMrD,EAAQ,KAAK,OAAO,MACpBpB,EAAc,KAAK,mBACzB,KAAK,cAAc,WAAW,EAC9B,KAAK,YAAYE,EAAU,EAAE,EAC7B,MAAM0D,EAAO,KAAK,YACZlF,EAAO,KAAK,oBACZoG,EAAa,KAAK,sBAAsB,YAAY,EAC1D,KAAK,cAAc,IAAI,EACvB,MAAMC,EAAY,KAAK,0BACvB,OAAO,KAAK,KAAK3D,EAAO,CACtB,KAAMmC,EAAK,qBACX,YAAAvD,EACA,KAAA4D,EACA,UAAWlF,EACX,WAAAoG,EACA,UAAAC,CACN,CAAK,CACF,CAOD,yBAA0B,CACxB,OAAO,KAAK,cAAc7E,EAAU,KAAM,KAAK,sBAAsB,CACtE,CA6BD,wBAAyB,CACvB,MAAMkB,EAAQ,KAAK,OAAO,MACpBwC,EAAO,KAAK,YAElB,GAAI,OAAO,UAAU,eAAe,KAAK3D,EAAmB2D,EAAK,KAAK,EACpE,OAAOA,EAGT,MAAM,KAAK,WAAWxC,CAAK,CAC5B,CAQD,KAAK4D,EAAYxF,EAAM,CACrB,OAAI,KAAK,SAAS,aAAe,KAC/BA,EAAK,IAAM,IAAIyF,GACbD,EACA,KAAK,OAAO,UACZ,KAAK,OAAO,MACpB,GAGWxF,CACR,CAKD,KAAKkB,EAAM,CACT,OAAO,KAAK,OAAO,MAAM,OAASA,CACnC,CAMD,YAAYA,EAAM,CAChB,MAAMJ,EAAQ,KAAK,OAAO,MAE1B,GAAIA,EAAM,OAASI,EACjB,YAAK,aAAY,EACVJ,EAGT,MAAMP,EACJ,KAAK,OAAO,OACZO,EAAM,MACN,YAAY4E,GAAiBxE,CAAI,YAAYmE,EAAavE,CAAK,IACrE,CACG,CAMD,oBAAoBI,EAAM,CAGxB,OAFc,KAAK,OAAO,MAEhB,OAASA,GACjB,KAAK,aAAY,EACV,IAGF,EACR,CAMD,cAAcpE,EAAO,CACnB,MAAMgE,EAAQ,KAAK,OAAO,MAE1B,GAAIA,EAAM,OAASJ,EAAU,MAAQI,EAAM,QAAUhE,EACnD,KAAK,aAAY,MAEjB,OAAMyD,EACJ,KAAK,OAAO,OACZO,EAAM,MACN,aAAahE,aAAiBuI,EAAavE,CAAK,IACxD,CAEG,CAMD,sBAAsBhE,EAAO,CAC3B,MAAMgE,EAAQ,KAAK,OAAO,MAE1B,OAAIA,EAAM,OAASJ,EAAU,MAAQI,EAAM,QAAUhE,GACnD,KAAK,aAAY,EACV,IAGF,EACR,CAKD,WAAW6I,EAAS,CAClB,MAAM7E,EACJ6E,GAAmD,KAAK,OAAO,MACjE,OAAOpF,EACL,KAAK,OAAO,OACZO,EAAM,MACN,cAAcuE,EAAavE,CAAK,IACtC,CACG,CAOD,IAAI8E,EAAUC,EAASC,EAAW,CAChC,KAAK,YAAYF,CAAQ,EACzB,MAAMnG,EAAQ,CAAA,EAEd,KAAO,CAAC,KAAK,oBAAoBqG,CAAS,GACxCrG,EAAM,KAAKoG,EAAQ,KAAK,IAAI,CAAC,EAG/B,OAAOpG,CACR,CAQD,aAAamG,EAAUC,EAASC,EAAW,CACzC,GAAI,KAAK,oBAAoBF,CAAQ,EAAG,CACtC,MAAMnG,EAAQ,CAAA,EAEd,GACEA,EAAM,KAAKoG,EAAQ,KAAK,IAAI,CAAC,QACtB,CAAC,KAAK,oBAAoBC,CAAS,GAE5C,OAAOrG,EAGT,MAAO,EACR,CAOD,KAAKmG,EAAUC,EAASC,EAAW,CACjC,KAAK,YAAYF,CAAQ,EACzB,MAAMnG,EAAQ,CAAA,EAEd,GACEA,EAAM,KAAKoG,EAAQ,KAAK,IAAI,CAAC,QACtB,CAAC,KAAK,oBAAoBC,CAAS,GAE5C,OAAOrG,CACR,CAOD,cAAcsG,EAAeF,EAAS,CACpC,KAAK,oBAAoBE,CAAa,EACtC,MAAMtG,EAAQ,CAAA,EAEd,GACEA,EAAM,KAAKoG,EAAQ,KAAK,IAAI,CAAC,QACtB,KAAK,oBAAoBE,CAAa,GAE/C,OAAOtG,CACR,CAED,cAAe,CACb,KAAM,CAAE,UAAAuG,CAAS,EAAK,KAAK,SAErBlF,EAAQ,KAAK,OAAO,QAAO,EAEjC,GAAIkF,IAAc,QAAalF,EAAM,OAASJ,EAAU,MACtD,EAAE,KAAK,cAEH,KAAK,cAAgBsF,GACvB,MAAMzF,EACJ,KAAK,OAAO,OACZO,EAAM,MACN,+BAA+BkF,4BACzC,CAGG,CACH,CAKA,SAASX,EAAavE,EAAO,CAC3B,MAAMhE,EAAQgE,EAAM,MACpB,OAAO4E,GAAiB5E,EAAM,IAAI,GAAKhE,GAAS,KAAO,KAAKA,KAAW,GACzE,CAKA,SAAS4I,GAAiBxE,EAAM,CAC9B,OAAOD,GAAsBC,CAAI,EAAI,IAAIA,KAAUA,CACrD,CCj/CA,IAAI+E,EAAW,IAAI,IACfC,EAAoB,IAAI,IACxBC,GAAwB,GACxBC,EAAgC,GACpC,SAASC,GAAUC,EAAQ,CACvB,OAAOA,EAAO,QAAQ,UAAW,GAAG,EAAE,KAAI,CAC9C,CACA,SAASC,GAAgBtG,EAAK,CAC1B,OAAOoG,GAAUpG,EAAI,OAAO,KAAK,UAAUA,EAAI,MAAOA,EAAI,GAAG,CAAC,CAClE,CACA,SAASuG,GAAiBC,EAAK,CAC3B,IAAIC,EAAW,IAAI,IACfC,EAAc,CAAA,EAClB,OAAAF,EAAI,YAAY,QAAQ,SAAUG,EAAoB,CAClD,GAAIA,EAAmB,OAAS,qBAAsB,CAClD,IAAIC,EAAeD,EAAmB,KAAK,MACvCE,EAAYP,GAAgBK,EAAmB,GAAG,EAClDG,EAAeb,EAAkB,IAAIW,CAAY,EACjDE,GAAgB,CAACA,EAAa,IAAID,CAAS,EACvCX,IACA,QAAQ,KAAK,+BAAiCU,EAAe;AAAA;AAAA,6EAEuB,EAGlFE,GACNb,EAAkB,IAAIW,EAAcE,EAAe,IAAI,GAAG,EAE9DA,EAAa,IAAID,CAAS,EACrBJ,EAAS,IAAII,CAAS,IACvBJ,EAAS,IAAII,CAAS,EACtBH,EAAY,KAAKC,CAAkB,QAIvCD,EAAY,KAAKC,CAAkB,CAE/C,CAAK,EACMI,EAASA,EAAS,GAAIP,CAAG,EAAG,CAAE,YAAaE,CAAW,CAAE,CACnE,CACA,SAASM,GAASC,EAAK,CACnB,IAAIC,EAAU,IAAI,IAAID,EAAI,WAAW,EACrCC,EAAQ,QAAQ,SAAUnH,EAAM,CACxBA,EAAK,KACL,OAAOA,EAAK,IAChB,OAAO,KAAKA,CAAI,EAAE,QAAQ,SAAUoH,EAAK,CACrC,IAAItK,EAAQkD,EAAKoH,CAAG,EAChBtK,GAAS,OAAOA,GAAU,UAC1BqK,EAAQ,IAAIrK,CAAK,CAEjC,CAAS,CACT,CAAK,EACD,IAAImD,EAAMiH,EAAI,IACd,OAAIjH,IACA,OAAOA,EAAI,WACX,OAAOA,EAAI,UAERiH,CACX,CACA,SAASG,GAAcjK,EAAQ,CAC3B,IAAIkK,EAAWjB,GAAUjJ,CAAM,EAC/B,GAAI,CAAC6I,EAAS,IAAIqB,CAAQ,EAAG,CACzB,IAAIC,EAAS9D,GAAMrG,EAAQ,CACvB,8BAA+BgJ,EAC/B,6BAA8BA,CAC1C,CAAS,EACD,GAAI,CAACmB,GAAUA,EAAO,OAAS,WAC3B,MAAM,IAAI,MAAM,+BAA+B,EAEnDtB,EAAS,IAAIqB,EAAUL,GAAST,GAAiBe,CAAM,CAAC,CAAC,EAE7D,OAAOtB,EAAS,IAAIqB,CAAQ,CAChC,CACO,SAASE,EAAIC,EAAU,CAE1B,QADIvI,EAAO,CAAA,EACFwI,EAAK,EAAGA,EAAK,UAAU,OAAQA,IACpCxI,EAAKwI,EAAK,CAAC,EAAI,UAAUA,CAAE,EAE3B,OAAOD,GAAa,WACpBA,EAAW,CAACA,CAAQ,GAExB,IAAIE,EAASF,EAAS,CAAC,EACvB,OAAAvI,EAAK,QAAQ,SAAU0I,EAAKlJ,EAAG,CACvBkJ,GAAOA,EAAI,OAAS,WACpBD,GAAUC,EAAI,IAAI,OAAO,KAGzBD,GAAUC,EAEdD,GAAUF,EAAS/I,EAAI,CAAC,CAChC,CAAK,EACM2I,GAAcM,CAAM,CAC/B,CACO,SAASE,IAAc,CAC1B5B,EAAS,MAAK,EACdC,EAAkB,MAAK,CAC3B,CACO,SAAS4B,IAA0B,CACtC3B,GAAwB,EAC5B,CACO,SAAS4B,IAAsC,CAClD3B,EAAgC,EACpC,CACO,SAAS4B,IAAuC,CACnD5B,EAAgC,EACpC,CACA,IAAI6B,EAAS,CACT,IAAKT,EACL,YAAaK,GACb,wBAAyBC,GACzB,oCAAqCC,GACrC,qCAAsCC,EAC1C,GACC,SAAUE,EAAO,CACdA,EAAM,IAAMD,EAAO,IAAKC,EAAM,YAAcD,EAAO,YAAaC,EAAM,wBAA0BD,EAAO,wBAAyBC,EAAM,oCAAsCD,EAAO,oCAAqCC,EAAM,qCAAuCD,EAAO,oCAChR,GAAGT,IAAQA,EAAM,CAAE,EAAC,EACpBA,EAAI,QAAaA,ECnHV,SAASW,GAAgBC,EAAU,CACtC,IAAIC,EAAUC,EAAAA,WAAWC,GAAgB,CAAE,EACvCC,EAASJ,GAAYC,EAAQ,OACjC,eAAUtL,EAAU,CAAC,CAACyL,EAAQ,oKAEA,EAAIzL,EAAU,CAAC,CAACyL,EAAQ,EAAE,EACjDA,CACX,CCPA,IAAIC,GAA6B,GAC7BC,GAAU,uBACVC,GAAWC,GAAMF,EAAO,EACjBG,GAAuBF,IAAa,SAAUG,EAAWC,EAAaC,EAAmB,CAChG,IAAIlM,EAAQiM,IACR,SACA,CAACN,IACD3L,IAAUiM,EAAW,IACrBN,GAA6B,GAC7B,SAAW1L,EAAU,MAAM,sEAAsE,GAErG,IAAIkM,EAAKC,EAAAA,SAAe,CAAE,KAAM,CAAE,MAAOpM,EAAO,YAAaiM,CAAW,CAAI,CAAA,EAAGI,EAAOF,EAAG,CAAC,EAAE,KAAMG,EAAcH,EAAG,CAAC,EACpH,OAAII,GACAC,EAAAA,gBAAsB,UAAY,CAC9B,OAAO,OAAOH,EAAM,CAAE,MAAOrM,EAAO,YAAaiM,CAAW,CAAE,EAC1DQ,EAAuBJ,CAAI,GAC3BC,EAAY,CAAE,KAAMD,CAAI,CAAE,CAEjC,EAAE,CAACL,EAAWhM,EAAOiM,CAAW,CAAC,EAGlC,OAAO,OAAOI,EAAM,CAAE,MAAOrM,EAAO,YAAaiM,CAAW,CAAE,EAElES,EAAAA,UAAgB,UAAY,CACxB,OAAID,EAAuBJ,CAAI,GAC3BC,EAAY,CAAE,KAAMD,CAAI,CAAE,EAEvBL,EAAU,UAA6B,CACtCS,EAAuBJ,CAAI,GAC3BC,EAAY,CAAE,KAAMD,CAAI,CAAE,CAE1C,CAAS,CACT,EAAO,CAACL,CAAS,CAAC,EACPhM,CACX,EACA,SAASyM,EAAuBN,EAAI,CAChC,IAAInM,EAAQmM,EAAG,MAAOF,EAAcE,EAAG,YACvC,GAAI,CACA,OAAOnM,IAAUiM,GACpB,MACD,CACI,MAAO,EACV,CACL,CC7CU,IAACU,GACV,SAAUA,EAAc,CACrBA,EAAaA,EAAa,MAAW,CAAC,EAAI,QAC1CA,EAAaA,EAAa,SAAc,CAAC,EAAI,WAC7CA,EAAaA,EAAa,aAAkB,CAAC,EAAI,cACrD,GAAGA,IAAiBA,EAAe,CAAE,EAAC,EACtC,IAAIC,GAAQ,IAAI,IACT,SAASC,GAAc9E,EAAM,CAChC,IAAIT,EACJ,OAAQS,EAAI,CACR,KAAK4E,EAAa,MACdrF,EAAO,QACP,MACJ,KAAKqF,EAAa,SACdrF,EAAO,WACP,MACJ,KAAKqF,EAAa,aACdrF,EAAO,eACP,KACP,CACD,OAAOA,CACX,CACO,SAASwF,GAAOC,EAAU,CAC7B,IAAIC,EAASJ,GAAM,IAAIG,CAAQ,EAC/B,GAAIC,EACA,OAAOA,EACX,IAAIC,EAAWlF,EAAMT,EACrB,QAAUrH,EAAU,CAAC,CAAC8M,GAAY,CAAC,CAACA,EAAS,KAAM,eAAe,OAAOA,EAAU,4CAA4C,EAC3H,6GAC2C,EAAI9M,EAAU,CAAC,CAAC8M,GAAY,CAAC,CAACA,EAAS,KAAM,EAAE,EAK9F,QAJIG,EAAY,CAAA,EACZC,EAAU,CAAA,EACVC,EAAY,CAAA,EACZC,EAAgB,CAAA,EACXzC,EAAK,EAAGuB,EAAKY,EAAS,YAAanC,EAAKuB,EAAG,OAAQvB,IAAM,CAC9D,IAAI0C,EAAInB,EAAGvB,CAAE,EACb,GAAI0C,EAAE,OAAS,qBAAsB,CACjCJ,EAAU,KAAKI,CAAC,EAChB,SAEJ,GAAIA,EAAE,OAAS,sBACX,OAAQA,EAAE,UAAS,CACf,IAAK,QACDH,EAAQ,KAAKG,CAAC,EACd,MACJ,IAAK,WACDF,EAAU,KAAKE,CAAC,EAChB,MACJ,IAAK,eACDD,EAAc,KAAKC,CAAC,EACpB,KACP,EAGT,QAAUrN,EAAU,CAACiN,EAAU,QAC1BC,EAAQ,QAAUC,EAAU,QAAUC,EAAc,OAAS,uHACF,EAAIpN,EAAU,CAACiN,EAAU,QACpFC,EAAQ,QAAUC,EAAU,QAAUC,EAAc,OAAS,EAAE,EACpE,QAAUpN,EAAUkN,EAAQ,OAASC,EAAU,OAASC,EAAc,QAAU,EAAG,4EAC/E,GAAG,OAAON,EAAU,OAAO,EAAE,OAAOI,EAAQ,OAAQ,YAAY,EAAE,OAAOE,EAAc,OAAQ,GAAG,EAClG,qBAAqB,OAAOD,EAAU,OAAQ,cAAc,EAC5D,uEAAuE,EAAInN,EAAUkN,EAAQ,OAASC,EAAU,OAASC,EAAc,QAAU,EAAG,EAAE,EAC1JtF,EAAOoF,EAAQ,OAASR,EAAa,MAAQA,EAAa,SACtD,CAACQ,EAAQ,QAAU,CAACC,EAAU,SAC9BrF,EAAO4E,EAAa,cACxB,IAAI9C,EAAcsD,EAAQ,OACpBA,EACAC,EAAU,OACNA,EACAC,EACV,QAAUpN,EAAU4J,EAAY,SAAW,EAAG,sDAAsD,OAAOkD,EAAU,OAAO,EACxH,GAAG,OAAOlD,EAAY,OAAQ,gBAAgB,EAC9C,uEAAuE,EAAI5J,EAAU4J,EAAY,SAAW,EAAG,EAAE,EACrH,IAAI0D,EAAa1D,EAAY,CAAC,EAC9BoD,EAAYM,EAAW,qBAAuB,GAC1CA,EAAW,MAAQA,EAAW,KAAK,OAAS,OAC5CjG,EAAOiG,EAAW,KAAK,MAGvBjG,EAAO,OAEX,IAAIkG,EAAU,CAAE,KAAMlG,EAAM,KAAMS,EAAM,UAAWkF,GACnD,OAAAL,GAAM,IAAIG,EAAUS,CAAO,EACpBA,CACX,CACO,SAASC,GAAmBV,EAAUhF,EAAM,CAC/C,IAAIV,EAAYyF,GAAOC,CAAQ,EAC3BW,EAAwBb,GAAc9E,CAAI,EAC1C4F,EAAoBd,GAAcxF,EAAU,IAAI,EACpD,QAAUpH,EAAUoH,EAAU,OAASU,EAAM,aAAa,OAAO2F,EAAuB,sBAAsB,EAC1G,GAAG,OAAOA,EAAuB,UAAU,EAAE,OAAOC,EAAmB,oBAAoB,CAAC,EAAI1N,EAAUoH,EAAU,OAASU,EAAM,EAAE,CAC7I,CChFA,IAAI6F,GAAiB,OAAO,UAAU,eAC/B,SAASC,EAASC,EAAOlH,EAAS,CACrC,OAAIA,IAAY,SAAUA,EAAU,OAAO,OAAO,IAAI,GAC/CmH,GAAiB1C,GAAgBzE,EAAQ,MAAM,EAAGkH,CAAK,EAAE,SAASlH,CAAO,CACpF,CACO,SAASmH,GAAiBrC,EAAQoC,EAAO,CAC5C,IAAIE,EAAWC,EAAAA,UACX,CAACD,EAAS,SACVtC,IAAWsC,EAAS,QAAQ,QAC5BF,IAAUE,EAAS,QAAQ,SAC3BA,EAAS,QAAU,IAAIE,GAAcxC,EAAQoC,EAAOE,EAAS,OAAO,GAExE,IAAIG,EAAQH,EAAS,QACjB7B,EAAKiC,EAAAA,SAAS,CAAC,EAAWjC,EAAG,CAAC,EAAG,IAAAkC,EAAUlC,EAAG,CAAC,EACnD,OAAAgC,EAAM,YAAc,UAAY,CAC5BE,EAAQ,SAAUC,EAAM,CAAE,OAAOA,EAAO,CAAE,CAAE,CACpD,EACWH,CACX,CACA,IAAID,GAAiB,UAAY,CAC7B,SAASA,EAAcxC,EAAQoC,EAAOS,EAAU,CAC5C,KAAK,OAAS7C,EACd,KAAK,MAAQoC,EACb,KAAK,kBAAoBU,GAAgB,CACrC,QAAS,GACT,KAAM,OACN,MAAO,OACP,cAAeC,EAAc,OACzC,CAAS,EACD,KAAK,kBAAoBD,GAAgB,CACrC,QAAS,GACT,KAAM,OACN,MAAO,OACP,cAAeC,EAAc,KACzC,CAAS,EACD,KAAK,mBAAqB,IAAKC,GAAgB,QAAU,KACzDjB,GAAmBK,EAAOnB,EAAa,KAAK,EAC5C,IAAIgC,EAAiBJ,GAAYA,EAAS,OACtCK,EAAeD,GAAkBA,EAAe,KAChDC,IACA,KAAK,aAAeA,EAE3B,CACD,OAAAV,EAAc,UAAU,YAAc,UAAY,CAC9C,SAAWjO,EAAU,KAAK,mEAAmE,CACrG,EACIiO,EAAc,UAAU,aAAe,SAAUtH,EAAS,CACtD,IAAIiI,EAAQ,KACR1C,EACAvF,EAAQ,OACR,OAAO,OAAO,KAAM,CAAE,MAAOA,EAAQ,KAAK,CAAE,EAEhD,KAAK,kBAAoB,KAAK,wBAAwB,KAAK,iBAAmBA,CAAO,EACrF,IAAIkI,EAAU,KAAK,WAAW,mBAAmB,KAAK,mBAAkB,CAAE,EAC1E,YAAK,eAAiB3C,EAAK,KAAK,UAAY,MAAQA,IAAO,OAAS,OAASA,EAAG,OAAS,KAAK,aAC9F,KAAK,OAAS,OACd,KAAK,YAAW,EACT,IAAI,QAAQ,SAAU4C,EAAS,CAClC,IAAIlE,EACJiE,EAAQ,UAAU,CACd,KAAM,SAAU9O,EAAO,CACnB6K,EAAS7K,CACZ,EACD,MAAO,UAAY,CACf+O,EAAQF,EAAM,cAAcA,EAAM,WAAW,iBAAkB,CAAA,CAAC,CACnE,EACD,SAAU,UAAY,CAClBE,EAAQF,EAAM,cAAchE,CAAM,CAAC,CACtC,CACjB,CAAa,CACb,CAAS,CACT,EACIqD,EAAc,UAAU,SAAW,SAAUtH,EAAS,CAClD,IAAIiI,EAAQ,KACZ,KAAK,eAAiBrD,EAAAA,WAAWC,GAAkB,CAAA,EAAE,eACrD,KAAK,WAAW7E,CAAO,EACvB,IAAIoI,EAAW,KAAK,qBAChBnE,EAASkB,GAAqBkD,EAAAA,YAAY,UAAY,CACtD,GAAIJ,EAAM,eACN,OAAO,UAAY,CAAA,EAEvB,IAAIK,EAAS,UAAY,CACrB,IAAIP,EAAiBE,EAAM,OACvBhE,EAASmE,EAAS,mBAClBL,GACAA,EAAe,UAAY9D,EAAO,SAClC8D,EAAe,gBAAkB9D,EAAO,eACxCsE,EAAMR,EAAe,KAAM9D,EAAO,IAAI,GAG1CgE,EAAM,UAAUhE,CAAM,CACtC,EACgBuE,EAAU,SAAUC,EAAO,CAC3B,IAAIC,EAAON,EAAS,KACpBO,EAAa,YAAW,EACxB,GAAI,CACAP,EAAS,iBAAgB,EACzBO,EAAeP,EAAS,UAAUE,EAAQE,CAAO,CACpD,QACO,CACJJ,EAAS,KAAUM,CACtB,CACD,GAAI,CAAC1B,GAAe,KAAKyB,EAAO,eAAe,EAC3C,MAAMA,EAEV,IAAIV,EAAiBE,EAAM,QACvB,CAACF,GACAA,GAAkBA,EAAe,SAClC,CAACQ,EAAME,EAAOV,EAAe,KAAK,IAClCE,EAAM,UAAU,CACZ,KAAOF,GAAkBA,EAAe,KACxC,MAAOU,EACP,QAAS,GACT,cAAeZ,EAAc,KACrD,CAAqB,CAErB,EACgBc,EAAeP,EAAS,UAAUE,EAAQE,CAAO,EACrD,OAAO,UAAY,CAAE,OAAO,WAAW,UAAY,CAAE,OAAOG,EAAa,YAAa,EAAG,EACrG,EAAW,CACCP,EACA,KAAK,eACL,KAAK,OAAO,qBACf,CAAA,EAAG,UAAY,CAAE,OAAOH,EAAM,iBAAgB,CAAG,EAAI,UAAY,CAAE,OAAOA,EAAM,iBAAkB,CAAG,CAAA,EACtG,YAAK,2BAA2BhE,CAAM,EAC/B,KAAK,cAAcA,CAAM,CACxC,EACIqD,EAAc,UAAU,WAAa,SAAUtH,EAAS,CACpD,IAAIuF,EACAqD,EAAoB,KAAK,wBAAwB,KAAK,iBAAmB5I,CAAO,EAChF6I,EAA2B,KAAK,kBAC/BN,EAAMK,EAAmBC,CAAwB,IAClD,KAAK,kBAAoBD,EACrBC,GAA4B,KAAK,aACjC,KAAK,WAAW,UAAU,KAAK,mBAAoB,CAAA,EACnD,KAAK,eAAiBtD,EAAK,KAAK,UAAY,MAAQA,IAAO,OAAS,OAASA,EAAG,OAAS,KAAK,aAC9F,KAAK,OAAS,SAGtB,KAAK,YAAcvF,EAAQ,aAAesH,EAAc,UAAU,YAClE,KAAK,QAAUtH,EAAQ,SAAWsH,EAAc,UAAU,SACrD,KAAK,gBAAkB,KAAK,OAAO,wBACpC,KAAK,iBAAiB,MAAQ,IAC9B,CAAC,KAAK,iBAAiB,KACvB,KAAK,OAAS,KAAK,kBAEd,KAAK,iBAAiB,MAC3B,KAAK,kBAAkB,cAAgB,UACvC,KAAK,OAAS,KAAK,mBAEd,KAAK,SAAW,KAAK,mBAC1B,KAAK,SAAW,KAAK,qBACrB,KAAK,OAAS,OAE1B,EACIA,EAAc,UAAU,mBAAqB,UAAY,CACrD,IAAIwB,EAAU,CAAA,EACVC,EAAiB,KAAK,OAAO,eAAe,WAChD,OAAIA,GACAD,EAAQ,KAAKC,CAAc,EAC3B,KAAK,iBAAiB,gBACtBD,EAAQ,KAAK,KAAK,iBAAiB,cAAc,EAErDA,EAAQ,KAAKE,GAAQ,KAAK,YAAc,KAAK,WAAW,QAAS,KAAK,iBAAiB,CAAC,EACjFF,EAAQ,OAAOG,CAAY,CAC1C,EACI3B,EAAc,UAAU,wBAA0B,SAAU/B,EAAI,CAC5D,IAAI2D,EACA3D,IAAO,SAAUA,EAAK,CAAE,GACzB,IAAC4D,EAAO5D,EAAG,KAAYA,EAAG,IAAmBA,EAAG,YAAuBA,EAAG,QAA0BA,EAAG,eAAe,IAAC6D,EAAeC,GAAO9D,EAAI,CAAC,OAAQ,MAAO,cAAe,UAAW,gBAAgB,CAAC,EAC3MqD,EAAoB,OAAO,OAAOQ,EAAc,CAAE,MAAO,KAAK,KAAK,CAAE,EASzE,GARI,KAAK,iBACJR,EAAkB,cAAgB,gBAC/BA,EAAkB,cAAgB,uBACtCA,EAAkB,YAAc,eAE/BA,EAAkB,YACnBA,EAAkB,UAAY,IAE9BO,EAAM,CACN,IAAIG,EAAKV,EAAkB,YAAaW,EAAcD,IAAO,OAAS,KAAK,sBAAqB,EAAKA,EAAIE,EAAKZ,EAAkB,mBAAoBa,EAAqBD,IAAO,OAASD,EAAcC,EACvM,OAAO,OAAOZ,EAAmB,CAC7B,mBAAoBa,EACpB,YAAa,SAC7B,CAAa,OAEKb,EAAkB,cACxBA,EAAkB,cACZM,EAAK,KAAK,cAAgB,MAAQA,IAAO,OAAS,OAASA,EAAG,QAAQ,qBACpE,KAAK,sBAAqB,GAEtC,OAAON,CACf,EACItB,EAAc,UAAU,sBAAwB,UAAY,CACxD,IAAI/B,EAAI2D,EACR,QAAU3D,EAAK,KAAK,iBAAiB,kBAAoB,MAAQA,IAAO,OAAS,OAASA,EAAG,gBACvF2D,EAAK,KAAK,OAAO,eAAe,cAAgB,MAAQA,IAAO,OAAS,OAASA,EAAG,cACtF,aACZ,EACI5B,EAAc,UAAU,YAAc,SAAUoC,EAAM,CAAA,EACtDpC,EAAc,UAAU,QAAU,SAAUmB,EAAO,CAAA,EACnDnB,EAAc,UAAU,mBAAqB,UAAY,CACrD,IAAIc,EAAW,KAAK,WAChB,KAAK,gBACE,KAAK,eAAe,iBAAiB,KAAK,iBAAiB,GAC3D,KAAK,YACL,KAAK,OAAO,WAAW,KAAK,mBAAoB,CAAA,EAC3D,KAAK,eAAiBuB,UAAQ,UAAY,CAAE,MAAQ,CAChD,QAASvB,EAAS,QAAQ,KAAKA,CAAQ,EACvC,UAAWA,EAAS,UAAU,KAAKA,CAAQ,EAC3C,UAAWA,EAAS,UAAU,KAAKA,CAAQ,EAC3C,YAAaA,EAAS,YAAY,KAAKA,CAAQ,EAC/C,aAAcA,EAAS,aAAa,KAAKA,CAAQ,EACjD,YAAaA,EAAS,YAAY,KAAKA,CAAQ,EAC/C,gBAAiBA,EAAS,gBAAgB,KAAKA,CAAQ,CACnE,CAAa,EAAE,CAACA,CAAQ,CAAC,EACjB,IAAIwB,EAAa,EAAE,KAAK,iBAAiB,MAAQ,IAC7C,KAAK,iBAAiB,MAC1B,OAAI,KAAK,gBAAkBA,IACvB,KAAK,eAAe,sBAAsBxB,CAAQ,EAC9CA,EAAS,iBAAkB,EAAC,SAC5B,KAAK,eAAe,0BAA0BA,CAAQ,GAGvDA,CACf,EACId,EAAc,UAAU,UAAY,SAAUuC,EAAY,CACtD,IAAI9B,EAAiB,KAAK,OACtBA,GAAkBA,EAAe,OACjC,KAAK,aAAeA,EAAe,MAEvC,KAAK,OAAS8B,EACd,KAAK,YAAW,EAChB,KAAK,uBAAuBA,CAAU,CAC9C,EACIvC,EAAc,UAAU,uBAAyB,SAAUrD,EAAQ,CAC/D,IAAIgE,EAAQ,KACZ,GAAI,CAAChE,EAAO,QAAS,CACjB,IAAI6F,EAAU,KAAK,cAAc7F,CAAM,EACvC,QAAQ,UAAU,KAAK,UAAY,CAC3B6F,EACA7B,EAAM,QAAQ6B,CAAO,EAEhB7F,EAAO,MACZgE,EAAM,YAAYhE,EAAO,IAAI,CAEjD,CAAa,EAAE,MAAM,SAAUwE,EAAO,CACtB,SAAWpP,EAAU,KAAKoP,CAAK,CAC/C,CAAa,EAEb,EACInB,EAAc,UAAU,cAAgB,SAAUrD,EAAQ,CACtD,OAAO8F,GAAgB9F,EAAO,MAAM,EAC9B,IAAI+F,GAAY,CAAE,cAAe/F,EAAO,MAAM,CAAE,EAChDA,EAAO,KACrB,EACIqD,EAAc,UAAU,iBAAmB,UAAY,CACnD,OAAK,KAAK,QACN,KAAK,uBAAuB,KAAK,OAAS,KAAK,WAAW,iBAAgB,CAAE,EAEzE,KAAK,MACpB,EACIA,EAAc,UAAU,cAAgB,SAAUrD,EAAQ,CACtD,IAAIgG,EAAc,KAAK,mBAAmB,IAAIhG,CAAM,EACpD,GAAIgG,EACA,OAAOA,EACR,IAACP,EAAOzF,EAAO,KAAgBA,EAAO,YAASiG,EAAuBb,GAAOpF,EAAQ,CAAC,OAAQ,SAAS,CAAC,EAC3G,YAAK,mBAAmB,IAAIA,EAAQgG,EAAc3G,EAASA,EAASA,EAAS,CAAE,KAAMoG,CAAM,EAAEQ,CAAoB,EAAG,KAAK,cAAc,EAAG,CAAE,OAAQ,KAAK,OAAQ,WAAY,KAAK,WAAY,UAAW,KAAK,WAAW,UAAW,OAAQ,CAAC,KAAK,iBAAiB,KAAM,aAAc,KAAK,YAAc,CAAA,CAAC,EACvS,CAACD,EAAY,OAASF,GAAgB9F,EAAO,MAAM,IACnDgG,EAAY,MAAQ,IAAID,GAAY,CAAE,cAAe/F,EAAO,MAAM,CAAE,GAEjEgG,CACf,EACI3C,EAAc,UAAU,2BAA6B,SAAUrD,EAAQ,CAC/DA,EAAO,SACP,KAAK,iBAAiB,gBACtB,CAACA,EAAO,UACP,CAACA,EAAO,MAAQ,OAAO,KAAKA,EAAO,IAAI,EAAE,SAAW,IACrD,KAAK,WAAW,QAAQ,cAAgB,eACxC,OAAO,OAAOA,EAAQ,CAClB,QAAS,GACT,cAAe4D,EAAc,OAC7C,CAAa,EACD,KAAK,WAAW,UAE5B,EACWP,CACX,ICtSI6C,GAAgB,CAChB,UACA,YACA,YACA,cACA,eACA,iBACJ,EACO,SAASC,EAAalD,EAAOlH,EAAS,CACzC,IAAIuF,EACA8E,EAAiBhD,EAAAA,SACjBiD,EAAajD,EAAAA,SACbkD,EAAWlD,EAAAA,SACXmD,EAASH,EAAe,QAAUpB,EAAajJ,EAASqK,EAAe,OAAO,EAAIrK,EAClFmG,GAAYZ,EAAKiF,GAAW,KAA4B,OAASA,EAAO,SAAW,MAAQjF,IAAO,OAASA,EAAK2B,EACpHoD,EAAW,QAAUE,EACrBD,EAAS,QAAUpE,EACnB,IAAIsE,EAAgBtD,GAAiB1C,GAAgBzE,GAAWA,EAAQ,MAAM,EAAGmG,CAAQ,EACrFuE,EAAiBD,EAAc,SAASnH,EAASA,EAAS,CAAE,EAAEkH,CAAM,EAAG,CAAE,KAAM,CAACH,EAAe,OAAO,CAAE,CAAC,EACzGZ,EAAqBiB,EAAe,WAAW,QAAQ,oBACvDD,EAAc,sBAAqB,EACnCxG,EAAS,OAAO,OAAOyG,EAAgB,CACvC,OAAQ,CAAC,CAACL,EAAe,OACjC,CAAK,EACGM,EAAehB,EAAAA,QAAQ,UAAY,CAYnC,QAXIgB,EAAe,CAAA,EACfC,EAAU,SAAUlH,GAAK,CACzB,IAAImH,GAAS5G,EAAOP,EAAG,EACvBiH,EAAajH,EAAG,EAAI,UAAY,CAC5B,OAAK2G,EAAe,UAChBA,EAAe,QAAU,OAAO,OAAO,IAAI,EAC3CI,EAAc,YAAW,GAEtBI,GAAO,MAAM,KAAM,SAAS,CACnD,CACA,EACiB7G,EAAK,EAAG8G,EAAkBX,GAAenG,EAAK8G,EAAgB,OAAQ9G,IAAM,CACjF,IAAIN,GAAMoH,EAAgB9G,CAAE,EAC5B4G,EAAQlH,EAAG,EAEf,OAAOiH,CACV,EAAE,CAAE,CAAA,EACL,OAAO,OAAO1G,EAAQ0G,CAAY,EAClC,IAAII,EAAU1C,cAAY,SAAU2C,EAAgB,CAChDX,EAAe,QAAUW,EAAiB1H,EAASA,EAAS,CAAE,EAAE0H,CAAc,EAAG,CAAE,YAAaA,EAAe,aAAevB,CAAoB,CAAA,EAAI,CAClJ,YAAaA,CACzB,EACQ,IAAIzJ,EAAUiJ,EAAaqB,EAAW,QAAShH,EAAS,CAAE,MAAOiH,EAAS,OAAS,EAAEF,EAAe,OAAO,CAAC,EACxGY,EAAUR,EACT,aAAanH,EAASA,EAAS,CAAE,EAAEtD,CAAO,EAAG,CAAE,KAAM,EAAK,CAAE,CAAC,EAC7D,KAAK,SAAUiK,EAAa,CAAE,OAAO,OAAO,OAAOA,EAAaU,CAAY,CAAE,CAAE,EACrF,OAAAM,EAAQ,MAAM,UAAY,CAAA,CAAG,EACtBA,CACV,EAAE,CAAE,CAAA,EACL,MAAO,CAACF,EAAS9G,CAAM,CAC3B,CCqBO,MAAMiH,EAA6BpH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EChE7BqH,GAA8BrH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECiC9BsH,GAAiCtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECxC9CuH,GAAA,CAAA,EA2BOC,GAAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA+BoH;AAAA,IAkClCC;AAAA,IACAC;AAAA,EA4BG,SAAAG,GAAAC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcH,GACZtL,CACA,CAEJ,CACO,SAAA0L,GAAAF,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcL,GACZtL,CACA,CAEJ,4kBC/GA,MAAAqL,GAAA,CAAA,EAeOO,GAAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAwBoH;AAAA,EA6BxB,SAAAW,GAAAL,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAAG,GAAA5L,CAAA,CACF,CACO,SAAA8L,GAAAN,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAAC,GAAA5L,CAAA,CACF,2hBCzDA,MAAAqL,GAAA,CAAA,EAiBOU,GAAAjI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,SAAAkI,EAAAR,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcM,GACZ/L,CACA,CAEJ,CACO,SAAAiM,GAAAT,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcI,GACZ/L,CACA,CAEJ,+lBC9DA,MAAAqL,GAAA,CAAA,EAeOa,GAAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,SAAAqI,EAAAX,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcS,GACZlM,CACA,CAEJ,CACO,SAAAoM,GAAAZ,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcO,GACZlM,CACA,CAEJ,smBC7DA,MAAAqL,GAAA,CAAA,EAeOgB,GAAAvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,SAAAwI,GAAAd,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcY,GACZrM,CACA,CAEJ,CACO,SAAAuM,GAAAf,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcU,GACZrM,CACA,CAEJ,4kBCzDA,MAAAqL,GAAA,CAAA,EAUOmB,GAAA1I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAyBoH;AAAA,EAyBzB,SAAAuB,GAAAjB,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAAe,GAAAxM,CAAA,CACF,CACO,SAAA0M,GAAAlB,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAAa,GAAAxM,CAAA,CACF,kiBChDA,MAAAqL,GAAA,CAAA,EAUOsB,GAAA7I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,SAAA8I,GAAApB,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAAkB,GAAA3M,CAAA,CACF,CACO,SAAA6M,GAAArB,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAAgB,GAAA3M,CAAA,CACF,kiBC5CA,MAAAqL,GAAA,CAAA,EAUOyB,GAAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAkCoH;AAAA,EAyBlC,SAAA6B,GAAAvB,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcqB,GACZ9M,CACA,CAEJ,CACO,SAAAgN,GAAAxB,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcmB,GACZ9M,CACA,CAEJ,imBCtDA,MAAAqL,GAAA,CAAA,EA8CO4B,GAAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmEA,SAAAoJ,GAAA1B,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcwB,GACZjN,CACA,CAEJ,CACO,SAAAmN,GAAA3B,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcsB,GACZjN,CACA,CAEJ,0lBClIA,MAAAqL,GAAA,CAAA,EAmBO+B,GAAAtJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,SAAAuJ,GAAA7B,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAc2B,GACZpN,CACA,CAEJ,CACO,SAAAsN,GAAA9B,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcyB,GACZpN,CACA,CAEJ,8jBCnEA,MAAAqL,GAAA,CAAA,EAiBOkC,GAAAzJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BA,SAAA0J,GAAAhC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAc8B,GACZvN,CACA,CAEJ,CACO,SAAAyN,GAAAjC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAc4B,GACZvN,CACA,CAEJ,8jBC/DA,MAAAqL,GAAA,CAAA,EAcOqC,GAAA5J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,SAAA6J,GAAAnC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAciC,GACZ1N,CACA,CAEJ,CACO,SAAA4N,GAAApC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAc+B,GACZ1N,CACA,CAEJ,qkBCzDA,MAAAqL,GAAA,CAAA,EAmCOwC,GAAA/J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6CA,SAAAgK,GAAAtC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcoC,GACZ7N,CACA,CAEJ,CACO,SAAA+N,GAAAvC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAckC,GACZ7N,CACA,CAEJ,0lBCjGA,MAAAqL,GAAA,CAAA,EAeO2C,GAAAlK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,SAAAmK,GAAAzC,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcuC,GACZhO,CACA,CAEJ,CACO,SAAAkO,GAAA1C,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcqC,GACZhO,CACA,CAEJ,qkBC1DA,MAAAqL,GAAA,CAAA,EAgCO8C,GAAArK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2CA,SAAAsK,GAAA5C,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAc0C,GACZnO,CACA,CAEJ,CACO,SAAAqO,GAAA7C,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcwC,GACZnO,CACA,CAEJ,6nBClGA,MAAAqL,GAAA,CAAA,EAgBOiD,GAAAxK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,SAAAyK,GAAA/C,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAA6C,GAAAtO,CAAA,CAIF,CACO,SAAAwO,GAAAhD,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAA2C,GAAAtO,CAAA,CAIF,8qBClEA,MAAAqL,GAAA,CAAA,EAeOoD,GAAA3K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,SAAA4K,GAAAlD,EAAA,CAGL,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcgD,GACZzO,CACA,CAEJ,CACO,SAAA2O,GAAAnD,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAc8C,GACZzO,CACA,CAEJ,wmBC7DA,MAAAqL,GAAA,CAAA,EAgBOuD,GAAA9K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,SAAA+K,GAAArD,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcmD,GACZ5O,CACA,CAEJ,CACO,SAAA8O,GAAAtD,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAciD,GACZ5O,CACA,CAEJ,6nBClEA,MAAAqL,GAAA,CAAA,EAUO0D,GAAAjL;AAAA;AAAA;AAAA;AAAA,EAsBA,SAAAkL,GAAAxD,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcsD,GACZ/O,CACA,CAEJ,CACO,SAAAiP,GAAAzD,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcoD,GACZ/O,CACA,CAEJ,kpBCvDA,MAAAqL,GAAA,CAAA,EAeO6D,GAAApL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BA,SAAAqL,GAAA3D,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAC,EAAcyD,GACZlP,CACA,CAEJ,CACO,SAAAoP,GAAA5D,EAAA,CAML,MAAAxL,EAAA,CAAA,GAAAqL,GAAA,GAAAG,CAAA,EACA,OAAAG,EAAcuD,GACZlP,CACA,CAEJ,6nBCnEA,MAAAqP,GAAAC,GAAA,CACE,MAAAC,EAAA,GAAAD,EAAA,SAEA,OAAAE,EAAA,MAAA,CAAA,MAAA,KAAA,OAAA,KAAA,QAAA,YAAA,SAAA,CAEIC,EAAA,SAAA,CAAA,GAAA,UAAA,SAAAA,EACE,OAAC,CAAA,EAAA,s4BACG,KAAA,SACG,CAAA,EAAA,EAETA,EAAA,SAAA,CAAA,GAAA,OAAA,SAAAA,EAEE,OAAC,CAAA,EAAA,s4BACG,KAAA,SACG,CAAA,EAAA,EAETD,EAAA,OAAA,CAAA,GAAA,WAAA,SAAA,CAEEC,EAAA,MAAA,CAAA,KAAA,WAAA,UAAA,iBAAA,EAAgDA,EAAA,MAAA,CAAA,KAAA,WAAA,UAAA,kBAAA,EACCA,EAAA,MAAA,CAAA,KAAA,WAAA,UAAA,kBAAA,EACAA,EAAA,MAAA,CAAA,KAAA,WAAA,UAAA,kBAAA,EACAA,EAAA,MAAA,CAAA,KAAA,WAAA,UAAA,kBAAA,CACA,EAAA,EACnDD,EAAA,OAAA,CAAA,GAAA,QAAA,SAAA,CAEEC,EAAA,MAAA,CAAA,KAAA,QAAA,UAAA,iBAAA,EAA6CA,EAAA,MAAA,CAAA,KAAA,QAAA,UAAA,kBAAA,EACCA,EAAA,MAAA,CAAA,KAAA,QAAA,UAAA,kBAAA,EACAA,EAAA,MAAA,CAAA,KAAA,QAAA,UAAA,kBAAA,EACAA,EAAA,MAAA,CAAA,KAAA,QAAA,UAAA,kBAAA,CACA,EAAA,EAChDA,EAAA,OAAA,CAAA,EAAA,IAAA,EAAA,IAAA,MAAA,OAAA,OAAA,OAAA,KAAA,UAAA,KAAA,iBAAA,EACkFA,EAAA,OAAA,CAAA,EAAA,IAAA,EAAA,IAAA,MAAAF,EAAA,OAAA,OAAA,KAAA,UAAA,KAAA,cAAA,CACE,CAAA,CAAA,CAG1F,EAEAG,EAAAJ,GAAA,CAME,IAAAK,EAAA7S,EAAA8S,EAAAC,EAAAC,EAAApP,EAAAqP,EAQA,SAAAC,GAAA,CACE,KAAA,CAAA,KAAAtG,EAAA,MAAAjB,CAAA,EAAA0D,EAAA,CAAmD,UAAA,CAAA,KAAAmD,EAAA,IAAA,CACnB,CAAA,EAEhC,OAAA7G,GACE,QAAA,IAAAA,CAAA,EAEFiB,GAAAA,EAAA,qBACE,CAAA,KAAAhJ,EAAA,iBAAAqP,EAAA,MAAAD,CAAA,EAAApG,EAAA,oBAEF,CAAA,MAAAhJ,EAAA,YAAAqP,EAAA,MAAAD,CAAA,CAA2D,CAG7D,SAAAG,GAAA,CACE,KAAA,CAAA,KAAAvG,EAAA,MAAAjB,CAAA,EAAAuD,EAAA,CAAkD,UAAA,CAAA,KAAAsD,EAAA,IAAA,CAClB,CAAA,EAEhC,OAAA7G,GACE,QAAA,IAAAA,CAAA,EAEFiB,GAAAA,EAAA,oBACE,CAAA,MAAAiG,EAAA,YAAA7S,EAAA,OAAA8S,EAAA,aAAAC,EAAA,MAAAC,CAAA,EAAApG,EAAA,mBAEF,CAAA,MAAAiG,EAAA,YAAA7S,EAAA,OAAA8S,EAAA,aAAAC,EAAA,MAAAC,CAAA,CAAyD,CAG3D,OAAAR,EAAA,cAAA,eACE,CAAA,MAAAK,EAAA,YAAA7S,EAAA,MAAAgT,CAAA,EAAAE,EAAA,EAEA,CAAA,MAAAL,EAAA,YAAA7S,EAAA,OAAA8S,EAAA,aAAAC,EAAA,MAAAC,CAAA,EAAAG,IAGFT,EAAA,MAAA,CAAA,UAAA,cAAA,SAAA,CAGIA,EAAA,MAAA,CAAA,UAAA,OAAA,SAAA,CAEEC,EAAA,MAAA,CAAA,UAAA,uCAAA,SAAAE,EAAA,EAA6DF,EAAA,MAAA,CAAA,UAAA,6CAAA,SAAA3S,EAAA,EAEYwS,EAAA,WAAAA,EAAA,cAAA,gBAAAG,EAAA,MAAA,CAAA,UAAA,YAAA,SAAAD,EAAAU,GAAA,CAAA,SAAA,CAKlEN,GAAAJ,EAAAU,GAAA,CAAA,SAAA,CAEGT,EAAAJ,GAAA,CAAA,MAAAO,CAAA,CAAA,EAAsBH,EAAA,MAAA,CAAA,UAAA,iBAAA,UAAAG,EAAA,IAAA,QAAA,CAAA,CAAA,CAAA,CACoC,EAAA,EAC5D,IAAAC,YAEG,CAAA,CAAA,CAAA,CAAA,CAET,EAAA,EAEJP,EAAA,WAAAQ,GAAAL,EAAA,MAAA,CAAA,IAAAK,EAAA,UAAA,YAAA,CAEoE,EAAA,CAG1E,EAEAJ,EAAA,YAAA","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}