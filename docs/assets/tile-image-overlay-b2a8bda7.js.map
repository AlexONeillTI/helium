{"version":3,"file":"tile-image-overlay-b2a8bda7.js","sources":["../../packages/featured-content/src/types.ts","../../packages/featured-content/src/featured-content.tsx","../../packages/featured-content/src/variants/sidebar/wrapper.tsx","../../packages/featured-content/src/variants/sidebar/rss.tsx","../../packages/featured-content/src/variants/sidebar/default.tsx","../../packages/featured-content/src/variants/content/utils.ts","../../packages/featured-content/src/variants/content/wrapper.tsx","../../packages/featured-content/src/variants/content/item-link-wrapper.tsx","../../packages/featured-content/src/variants/content/icons.tsx","../../packages/featured-content/src/variants/content/item-queue-button.tsx","../../packages/featured-content/src/variants/content/item-asset-block.tsx","../../packages/featured-content/src/variants/content/item-completed-block.tsx","../../packages/featured-content/src/variants/content/tile-standard-layout.tsx","../../packages/featured-content/src/variants/content/tile-descriptive-layout.tsx","../../packages/featured-content/src/variants/content/multi-carousel.tsx","../../packages/featured-content/src/variants/content/carousel.tsx","../../packages/featured-content/src/variants/content/tile-image-overlay.tsx"],"sourcesContent":["import { HydratedContentItem, GlobalTypes } from '@thoughtindustries/content';\nimport { ReactNode, SyntheticEvent } from 'react';\n\nexport interface FeaturedContentSidebarBaseProps {\n  /** title of sidebar */\n  title?: string;\n  /** children */\n  children?: ReactNode;\n}\n\nexport interface FeaturedContentSidebarRssProps extends FeaturedContentSidebarBaseProps {\n  /** url of rss feed */\n  feedUrl: string;\n}\n\nexport enum SidebarPosition {\n  Left = 'left',\n  Right = 'right'\n}\n\nexport type HeaderOptions = {\n  /** title that appears on the item group */\n  title?: string;\n  /** open link in new tab */\n  linkOpenInNewTab?: boolean;\n  /** link text */\n  linkText?: string;\n  /** link url */\n  linkUrl?: string;\n};\n\nexport interface FeaturedContentContentProps {\n  /** row item count in desktop view */\n  desktopColumnCount: number;\n  /** options to display header */\n  headerOptions?: HeaderOptions;\n  /** add applicaple item to queue event handler */\n  onAddedToQueue: (item: FeaturedContentContentItem) => Promise<boolean | void>;\n  /** optional on item click event handler */\n  onClick?: (evt: SyntheticEvent, item: FeaturedContentContentItem) => void;\n  /** children */\n  children: ReactNode;\n}\n\nexport type FeaturedContentContentCarouselProps = Omit<\n  FeaturedContentContentProps,\n  'desktopColumnCount' | 'onAddedToQueue'\n>;\n\nexport type FeaturedContentContentItemRibbon = GlobalTypes.Ribbon;\n\nexport type FeaturedContentHydratedContentItem = HydratedContentItem;\n\nexport interface FeaturedContentStaticContentItem {\n  asset?: string;\n  description?: string;\n  href?: string;\n  isActive: boolean;\n  title?: string;\n  linkOpenInNewTab?: boolean;\n}\n\nexport type FeaturedContentContentItem =\n  | FeaturedContentStaticContentItem\n  | FeaturedContentHydratedContentItem;\n\nexport type FeaturedContentContentItemProps = FeaturedContentContentItem;\n\ninterface FeaturedContentBaseContextType {\n  /** row item count in desktop view */\n  desktopColumnCount: number;\n  /** add applicaple item to queue event handler */\n  onAddedToQueue: (item: FeaturedContentContentItem) => Promise<boolean | void>;\n  /** optional on item click event handler */\n  onClick?: (evt: SyntheticEvent, item: FeaturedContentContentItem) => void;\n}\n\nexport type FeaturedContentTileStandardLayoutContextType = FeaturedContentBaseContextType;\n\nexport type FeaturedContentTileDescriptiveLayoutContextType = FeaturedContentBaseContextType;\n\nexport type FeaturedContentMultiCarouselContextType = FeaturedContentBaseContextType;\n\nexport type FeaturedContentCarouselContextType = Pick<FeaturedContentBaseContextType, 'onClick'>;\n\nexport type FeaturedContentTileImageOverlayContextType = FeaturedContentBaseContextType;\n\nexport interface FeaturedContentProps {\n  /** node for sidebar */\n  sidebar?: ReactNode;\n  /** position of sidebar */\n  sidebarPosition?: SidebarPosition;\n  /** children */\n  children: ReactNode;\n}\n","import React from 'react';\nimport { SidebarPosition, FeaturedContentProps } from './types';\n\nconst FeaturedContent = ({\n  sidebar,\n  sidebarPosition,\n  children\n}: FeaturedContentProps): JSX.Element => {\n  const wrappedSidebar = sidebar && <div className=\"relative\">{sidebar}</div>;\n  const wrappedChildren = (\n    <div className={sidebar ? 'md:col-span-3' : 'md:col-span-full'}>{children}</div>\n  );\n  return (\n    <div className=\"w-auto -ml-4 -mr-4 mt-0 mb-0 max-w-none\">\n      <div className=\"w-full relative pl-4 pr-4 grid grid-cols-1 md:grid-cols-4 gap-8\">\n        {sidebarPosition === SidebarPosition.Left && wrappedSidebar}\n        {wrappedChildren}\n        {sidebarPosition === SidebarPosition.Right && wrappedSidebar}\n      </div>\n    </div>\n  );\n};\n\nFeaturedContent.displayName = 'FeaturedContent';\n\nexport default FeaturedContent;\n","import React from 'react';\nimport { Header } from '@thoughtindustries/header';\nimport { FeaturedContentSidebarBaseProps } from '../../types';\n\ntype FeaturedContentSidebarWrapperProps = FeaturedContentSidebarBaseProps;\n\nconst SidebarWrapper = ({ title, children }: FeaturedContentSidebarWrapperProps): JSX.Element => (\n  <div className=\"md:h-full md:absolute md:left-0 w-full\">\n    {title && <Header title={title} alternateTitleDisplay />}\n    <div className=\"overflow-y-scroll text-sm md:h-full\">{children}</div>\n  </div>\n);\n\nSidebarWrapper.displayName = 'SidebarWrapper';\n\nexport default SidebarWrapper;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FeaturedContentSidebarRssProps } from '../../types';\nimport SidebarWrapper from './wrapper';\nimport { useRssItemsQuery } from '@thoughtindustries/content';\n\nconst SidebarRss = ({ title, feedUrl }: FeaturedContentSidebarRssProps): JSX.Element => {\n  const { t } = useTranslation();\n  const { data, loading, error } = useRssItemsQuery({\n    variables: { feedUrl }\n  });\n  let content;\n  if (loading || error) {\n    content = <h5>{t('please-wait')}</h5>;\n  } else {\n    content = (\n      <>\n        {data &&\n          data.RssItems.map(({ title, link }, index) => (\n            <a key={index} href={link} className=\"block mb-4\">\n              {title}\n            </a>\n          ))}\n      </>\n    );\n  }\n\n  return <SidebarWrapper title={title}>{content}</SidebarWrapper>;\n};\n\nSidebarRss.displayName = 'SidebarRss';\n\nexport default SidebarRss;\n","import React from 'react';\nimport { FeaturedContentSidebarBaseProps } from '../../types';\nimport SidebarWrapper from './wrapper';\n\nconst SidebarDefault = ({ title, children }: FeaturedContentSidebarBaseProps): JSX.Element => (\n  <SidebarWrapper title={title}>{children}</SidebarWrapper>\n);\n\nSidebarDefault.displayName = 'SidebarDefault';\n\nexport default SidebarDefault;\n","/**\n * in tailwind JIT mode, dynamic values like `md:grid-cols-${count}` are not supported.\n * use static complete strings instead.\n * @param desktopColumnCount\n * @returns\n */\nexport const tileClassnameByDesktopColumnCount = (desktopColumnCount: number): string => {\n  switch (desktopColumnCount) {\n    case 2:\n      return 'md:grid-cols-2';\n    case 3:\n      return 'md:grid-cols-3';\n    case 4:\n      return 'md:grid-cols-4';\n    case 5:\n      return 'md:grid-cols-5';\n  }\n  return '';\n};\n\nexport const limitText = (text: string, maxLength: number): string => {\n  if (text.length > maxLength) {\n    return `${text.substring(0, maxLength)}...`;\n  }\n  return text;\n};\n","import React, { ReactNode } from 'react';\nimport { Header } from '@thoughtindustries/header';\nimport { HeaderOptions } from '../../types';\n\ninterface FeaturedContentContentWrapperProps {\n  headerOptions: HeaderOptions;\n  children: ReactNode;\n}\n\nconst ContentWrapper = ({\n  headerOptions,\n  children\n}: FeaturedContentContentWrapperProps): JSX.Element => {\n  const { title, ...restHeaderProps } = headerOptions;\n  return (\n    <>\n      {title && <Header title={title} {...restHeaderProps} alternateTitleDisplay />}\n      {children}\n    </>\n  );\n};\n\nContentWrapper.displayName = 'ContentWrapper';\n\nexport default ContentWrapper;\n","import React, { ReactNode, SyntheticEvent, useCallback } from 'react';\nimport { FeaturedContentContentItem, FeaturedContentStaticContentItem } from '../../types';\n\ninterface ItemLinkWrapperProps {\n  children: ReactNode;\n  onClick?: (evt: SyntheticEvent, item: FeaturedContentContentItem) => void;\n  item: FeaturedContentContentItem;\n}\n\nconst ItemLinkWrapper = ({ children, onClick, item }: ItemLinkWrapperProps): JSX.Element => {\n  const { isActive, href } = item;\n  const { linkOpenInNewTab } = item as FeaturedContentStaticContentItem;\n\n  const itemIsActiveOrWebinarOrEvent = !!isActive;\n\n  const handleClick = useCallback(\n    (evt: SyntheticEvent) => {\n      onClick && onClick(evt, item);\n    },\n    [item, onClick]\n  );\n  const linkProps: {\n    className: string;\n    href?: string;\n    onClick: (evt: SyntheticEvent) => void;\n    target?: string;\n  } = {\n    href,\n    onClick: handleClick,\n    className: `block text-gray-800 ${!itemIsActiveOrWebinarOrEvent ? 'cursor-default' : ''}`\n  };\n  if (linkOpenInNewTab) {\n    linkProps.target = '_blank';\n  }\n  return <a {...linkProps}>{children}</a>;\n};\n\nItemLinkWrapper.displayName = 'ItemLinkWrapper';\n\nexport default ItemLinkWrapper;\n","import React from 'react';\n\nexport const IconLeft = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-5 w-5\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n  </svg>\n);\n\nexport const IconRight = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-5 w-5\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n  </svg>\n);\n\nexport const PlusIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    className=\"w-full h-full\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n    />\n  </svg>\n);\n\nexport const CheckCircleIcon = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"w-full h-full\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n","import React, { SyntheticEvent, useCallback, useState } from 'react';\nimport clsx from 'clsx';\nimport { useTranslation } from 'react-i18next';\nimport { FeaturedContentContentItem } from '../../types';\nimport { PlusIcon, CheckCircleIcon } from './icons';\n\ninterface ItemQueueButtonProps {\n  item: FeaturedContentContentItem;\n  onClickAsync: (item: FeaturedContentContentItem) => Promise<boolean | void>;\n  classNames?: string;\n}\n\nconst ItemQueueButton = ({\n  item,\n  onClickAsync,\n  classNames = ''\n}: ItemQueueButtonProps): JSX.Element => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [wasAddedToQueue, setWasAddedToQueue] = useState<boolean>(false);\n  const { t } = useTranslation();\n  const handleClick = useCallback(\n    async (evt: SyntheticEvent) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (!!wasAddedToQueue || isLoading) {\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        await onClickAsync(item);\n        setWasAddedToQueue(true);\n      } catch (e: unknown) {\n        // handle error\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [wasAddedToQueue, isLoading, item, onClickAsync]\n  );\n\n  const btnClassNames = clsx([\n    'inline-block pl-0 mb-1 text-xs border-none rounded-sm cursor-pointer inline-block font-normal leading-normal m-0 p-0 relative text-center no-underline transition-colors ease-in-out duration-200 hover:text-link-hover',\n    { 'cursor-default': wasAddedToQueue },\n    classNames\n  ]);\n\n  return (\n    <button onClick={handleClick} className={btnClassNames}>\n      {wasAddedToQueue && (\n        <span className=\"flex items-center gap-x-1\">\n          <i className=\"inline-block w-3 h-3 text-green-600\" aria-label=\"check\">\n            <CheckCircleIcon />\n          </i>{' '}\n          {t('course-added-to-queue')}\n        </span>\n      )}\n      {!wasAddedToQueue && (\n        <span className=\"flex items-center gap-x-1\">\n          <i className=\"inline-block w-3 h-3\" aria-label=\"plus\">\n            <PlusIcon />\n          </i>{' '}\n          {t('course-add-to-queue')}\n        </span>\n      )}\n    </button>\n  );\n};\n\nItemQueueButton.displayName = 'ItemQueueButton';\n\nexport default ItemQueueButton;\n","import React from 'react';\nimport clsx from 'clsx';\n\ninterface ItemAssetBlockProps {\n  asset?: string;\n  classNames?: string;\n}\n\nconst ItemAssetBlock = ({ asset, classNames = '' }: ItemAssetBlockProps): JSX.Element => (\n  <img\n    className={clsx(['max-w-full h-auto', classNames])}\n    src={\n      asset ||\n      'https://d36ai2hkxl16us.cloudfront.net/thoughtindustries/image/upload/v1440546308/qj7eo4nseeiigiec5huh.png'\n    }\n  />\n);\n\nItemAssetBlock.displayName = 'ItemAssetBlock';\n\nexport default ItemAssetBlock;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst ItemCompletedBlock = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"block absolute h-full left-0 top-0 w-full text-center bg-white bg-opacity-80 z-1\">\n      <div className=\"absolute w-full top-1/2 transform -translate-y-1/2\">\n        <div>\n          <i\n            className=\"bg-white text-3xl inline-block p-4 rounded-full border-4 border-solid border-white border-opacity-50 my-0 mx-auto bg-clip-padding\"\n            aria-label=\"Completed\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"30\"\n              height=\"30\"\n              viewBox=\"0 0 24 24\"\n              fill=\"#5bb65c\"\n            >\n              <path d=\"M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z\" />\n            </svg>\n          </i>\n        </div>\n        <p className=\"mt-1 text-base\">{t('course-completed-decal')}</p>\n      </div>\n    </div>\n  );\n};\n\nItemCompletedBlock.displayName = 'ItemCompletedBlock';\n\nexport default ItemCompletedBlock;\n","import React, { createContext, useContext, useMemo } from 'react';\nimport clsx from 'clsx';\nimport { formatTime } from '@thoughtindustries/content';\nimport {\n  FeaturedContentContentProps,\n  FeaturedContentContentItemProps,\n  FeaturedContentTileStandardLayoutContextType,\n  FeaturedContentContentItemRibbon,\n  FeaturedContentHydratedContentItem\n} from '../../types';\nimport { tileClassnameByDesktopColumnCount, limitText } from './utils';\nimport ContentWrapper from './wrapper';\nimport ItemLinkWrapper from './item-link-wrapper';\nimport ItemQueueButton from './item-queue-button';\nimport ItemAssetBlock from './item-asset-block';\nimport ItemCompletedBlock from './item-completed-block';\n\nconst ContentTileStandardLayoutContext = createContext<\n  FeaturedContentTileStandardLayoutContextType | undefined\n>(undefined);\n\nfunction useContentTileStandardLayoutContext() {\n  const context = useContext(ContentTileStandardLayoutContext);\n  if (!context) {\n    throw new Error('No context found for ContentTileStandardLayout');\n  }\n  return context;\n}\n\nconst ContentTileStandardLayout = ({\n  headerOptions = {},\n  desktopColumnCount,\n  children,\n  onAddedToQueue,\n  onClick\n}: FeaturedContentContentProps): JSX.Element => {\n  const value = useMemo(\n    () => ({\n      desktopColumnCount,\n      onAddedToQueue,\n      onClick\n    }),\n    [desktopColumnCount, onAddedToQueue, onClick]\n  );\n\n  return (\n    <ContentTileStandardLayoutContext.Provider value={value}>\n      <ContentWrapper headerOptions={headerOptions}>\n        <ul\n          className={clsx([\n            'grid gap-5 grid-cols-1',\n            tileClassnameByDesktopColumnCount(desktopColumnCount)\n          ])}\n        >\n          {children}\n        </ul>\n      </ContentWrapper>\n    </ContentTileStandardLayoutContext.Provider>\n  );\n};\n\nconst ItemTitleBlock = ({\n  title,\n  courseStartDate,\n  timeZone\n}: {\n  title: string;\n  courseStartDate?: string;\n  timeZone?: string;\n}) => (\n  <p className=\"mb-1\">\n    {title}\n    {courseStartDate && (\n      <>\n        <br />\n        <span className=\"text-xs text-gray-700\">\n          {formatTime(courseStartDate, timeZone, 'MM/DD/YYYY')}\n        </span>\n      </>\n    )}\n  </p>\n);\n\nconst ItemSourceBlock = ({\n  contentTypeLabel,\n  source\n}: {\n  contentTypeLabel?: string;\n  source?: string;\n}) => (\n  <div className=\"text-xs text-gray-700\">\n    {contentTypeLabel && <strong>{contentTypeLabel}</strong>}\n    {contentTypeLabel && source && <>|{source}</>}\n    {!contentTypeLabel && source && <strong>{source}</strong>}\n  </div>\n);\n\n// TODO: might consider extracting as common component\nconst Star = ({ marked }: { marked: boolean }) => (\n  <span className=\"text-accent\">{marked ? '\\u2605' : '\\u2606'}</span>\n);\nconst Stars = ({ gradePercentage }: { gradePercentage: number }) => {\n  let stars: number;\n\n  stars = gradePercentage * 0.05;\n  const remainder = stars % 0.5;\n\n  if (remainder > 0) {\n    stars = stars - remainder + 0.5;\n  }\n\n  return (\n    <div>\n      {Array.from({ length: 5 }, (v, i) => (\n        <Star key={`star-${i}`} marked={stars > i} />\n      ))}\n    </div>\n  );\n};\n\n// TODO: might consider extracting as common component\nconst ItemRibbon = ({\n  ribbon,\n  attached\n}: {\n  ribbon: FeaturedContentContentItemRibbon;\n  attached: boolean;\n}) => {\n  const { contrastColor, color, darkerColor, label } = ribbon;\n  const wrapperStyles = {\n    color: contrastColor,\n    backgroundColor: color\n  };\n  const wrapperClassnames = `text-xs font-normal leading-none absolute right-0 uppercase max-w-1/2 overflow-ellipsis z-10 px-1.5 py-1 -top-1 whitespace-no-wrap ${\n    attached ? '-right-2' : ''\n  }`;\n  const cornerStyles = {\n    borderTopColor: darkerColor,\n    borderLeftColor: darkerColor\n  };\n  return (\n    <div className={wrapperClassnames} style={wrapperStyles}>\n      {attached && (\n        <div\n          className=\"right-0 block border-4 border-solid h-0 w-0 absolute border-transparent top-full\"\n          style={cornerStyles}\n        ></div>\n      )}\n      {label}\n    </div>\n  );\n};\n\nconst ItemCtaBlock = ({\n  isActive,\n  callToAction\n}: {\n  isActive?: boolean;\n  callToAction?: string;\n}) => {\n  if (isActive) {\n    return (\n      <span className=\"border-none rounded-sm cursor-pointer inline-block text-sm font-normal leading-normal m-0 p-0 relative text-center no-underline transition-colors ease-in-out duration-200 text-accent float-right text-left h-auto hover:text-accent\">\n        {callToAction}\n      </span>\n    );\n  }\n\n  return <span className=\"text-xs\">{callToAction}</span>;\n};\n\nconst ItemPriceBlock = ({\n  priceInCents,\n  hasAvailability,\n  suggestedRetailPriceInCents\n}: {\n  priceInCents?: number;\n  hasAvailability?: boolean;\n  suggestedRetailPriceInCents?: number;\n}) => {\n  if (hasAvailability) {\n    return null;\n  }\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  });\n\n  const priceFormat = (priceInCents: number) => formatter.format(priceInCents / 100);\n\n  return (\n    <>\n      <span>{priceFormat(priceInCents as number)}</span>\n      {suggestedRetailPriceInCents && (\n        <span className=\"line-through text-gray-700 text-xs\">\n          {priceFormat(suggestedRetailPriceInCents as number)}\n        </span>\n      )}\n    </>\n  );\n};\n\nconst Item = ({ ...item }: FeaturedContentContentItemProps): JSX.Element => {\n  const { asset, title, description, isActive } = item;\n  const {\n    ribbon,\n    isCompleted,\n    courseStartDate,\n    contentTypeLabel,\n    source,\n    authors,\n    rating,\n    canAddToQueue,\n    callToAction,\n    priceInCents,\n    hasAvailability,\n    suggestedRetailPriceInCents,\n    timeZone\n  } = item as FeaturedContentHydratedContentItem;\n  const { onAddedToQueue, onClick, desktopColumnCount } = useContentTileStandardLayoutContext();\n\n  const columnCountIsOneOrTwo = desktopColumnCount === 1 || desktopColumnCount === 2;\n  const gridItemDesktopClassnames = columnCountIsOneOrTwo ? ' md:grid-cols-2 md:gap-x-2' : '';\n  const assetWrapperDesktopClassnames = columnCountIsOneOrTwo ? ' md:p-2' : '';\n  const displayAuthors = authors?.length ? authors.join(', ') : null;\n\n  return (\n    <li>\n      <ItemLinkWrapper item={item} onClick={onClick}>\n        <div\n          className={`grid grid-cols-1${gridItemDesktopClassnames} border border-solid border-gray-300 relative`}\n        >\n          {ribbon && <ItemRibbon ribbon={ribbon} attached />}\n          <div className={`relative${assetWrapperDesktopClassnames}`}>\n            {isCompleted && <ItemCompletedBlock />}\n            <ItemAssetBlock asset={asset} />\n          </div>\n          <div className=\"p-2.5\">\n            {title && (\n              <ItemTitleBlock title={title} courseStartDate={courseStartDate} timeZone={timeZone} />\n            )}\n            <ItemSourceBlock contentTypeLabel={contentTypeLabel} source={source} />\n            {displayAuthors && <p className=\"text-xs mb-1 text-gray-700\">{displayAuthors}</p>}\n            {description && (\n              <p className=\"text-xs text-gray-700 pt-1 mb-0 overflow-hidden\">\n                {limitText(description, 75)}\n              </p>\n            )}\n            {rating && <Stars gradePercentage={rating} />}\n            <hr className=\"my-3\" />\n            <div className=\"text-base leading-none\">\n              {canAddToQueue && (\n                <div className=\"flex flex-wrap-reverse justify-between items-end\">\n                  <span>\n                    <ItemQueueButton item={item} onClickAsync={onAddedToQueue} />\n                  </span>\n                  <span>\n                    <ItemCtaBlock isActive={isActive} callToAction={callToAction} />\n                  </span>\n                </div>\n              )}\n              {!canAddToQueue && priceInCents && (\n                <>\n                  <ItemPriceBlock\n                    priceInCents={priceInCents}\n                    hasAvailability={hasAvailability}\n                    suggestedRetailPriceInCents={suggestedRetailPriceInCents}\n                  />\n                  <ItemCtaBlock isActive callToAction={callToAction} />\n                </>\n              )}\n              {!canAddToQueue && !priceInCents && (\n                <ItemCtaBlock isActive={isActive} callToAction={callToAction} />\n              )}\n            </div>\n          </div>\n        </div>\n      </ItemLinkWrapper>\n    </li>\n  );\n};\n\nContentTileStandardLayout.displayName = 'ContentTileStandardLayout';\nContentTileStandardLayout.Item = Item;\n\nexport default ContentTileStandardLayout;\n","import React, { createContext, useContext, useMemo } from 'react';\nimport clsx from 'clsx';\nimport { formatTime } from '@thoughtindustries/content';\nimport {\n  FeaturedContentContentProps,\n  FeaturedContentContentItemProps,\n  FeaturedContentTileDescriptiveLayoutContextType,\n  FeaturedContentHydratedContentItem\n} from '../../types';\nimport { tileClassnameByDesktopColumnCount, limitText } from './utils';\nimport ContentWrapper from './wrapper';\nimport ItemLinkWrapper from './item-link-wrapper';\nimport ItemQueueButton from './item-queue-button';\nimport ItemAssetBlock from './item-asset-block';\n\nconst ContentTileDescriptiveLayoutContext = createContext<\n  FeaturedContentTileDescriptiveLayoutContextType | undefined\n>(undefined);\n\nfunction useContentTileDescriptiveLayoutContext() {\n  const context = useContext(ContentTileDescriptiveLayoutContext);\n  if (!context) {\n    throw new Error('No context found for ContentTileDescriptiveLayout');\n  }\n  return context;\n}\n\nconst ContentTileDescriptiveLayout = ({\n  headerOptions = {},\n  desktopColumnCount,\n  children,\n  onAddedToQueue,\n  onClick\n}: FeaturedContentContentProps): JSX.Element => {\n  const value = useMemo(\n    () => ({\n      desktopColumnCount,\n      onAddedToQueue,\n      onClick\n    }),\n    [desktopColumnCount, onAddedToQueue, onClick]\n  );\n\n  return (\n    <ContentTileDescriptiveLayoutContext.Provider value={value}>\n      <ContentWrapper headerOptions={headerOptions}>\n        <ul\n          className={clsx([\n            'grid gap-5 grid-cols-1',\n            tileClassnameByDesktopColumnCount(desktopColumnCount)\n          ])}\n        >\n          {children}\n        </ul>\n      </ContentWrapper>\n    </ContentTileDescriptiveLayoutContext.Provider>\n  );\n};\n\nconst ItemTitleBlock = ({\n  title,\n  courseStartDate,\n  timeZone\n}: {\n  title?: string;\n  courseStartDate?: string;\n  timeZone?: string;\n}) => (\n  <>\n    {title && <p className=\"mt-4 mb-0 text-base font-bold\">{title}</p>}\n    {courseStartDate && (\n      <div className=\"text-xs mb-1 text-gray-700\">\n        {formatTime(courseStartDate, timeZone, 'MM/DD/YYYY')}\n      </div>\n    )}\n  </>\n);\n\nconst ItemSourceBlock = ({\n  contentTypeLabel,\n  source\n}: {\n  contentTypeLabel?: string;\n  source?: string;\n}) => (\n  <p className=\"text-xs text-gray-700 mb-1\">\n    {contentTypeLabel && <strong>{contentTypeLabel}</strong>}\n    {contentTypeLabel && source && <>|{source}</>}\n    {!contentTypeLabel && source && <strong>{source}</strong>}\n  </p>\n);\n\nconst Item = ({ ...item }: FeaturedContentContentItemProps): JSX.Element => {\n  const { asset, title, description } = item;\n  const { courseStartDate, contentTypeLabel, source, authors, canAddToQueue, timeZone } =\n    item as FeaturedContentHydratedContentItem;\n  const { onAddedToQueue, onClick, desktopColumnCount } = useContentTileDescriptiveLayoutContext();\n\n  const columnCountIsOneOrTwo = desktopColumnCount === 1 || desktopColumnCount === 2;\n  const gridItemDesktopClassnames = columnCountIsOneOrTwo ? ' md:grid-cols-2 md:gap-x-2' : '';\n  const assetWrapperDesktopClassnames = columnCountIsOneOrTwo ? ' md:p-2' : '';\n  const addToQueueClassnames = columnCountIsOneOrTwo ? ' justify-end' : ' justify-start';\n  const displayAuthors = authors?.length ? authors.join(', ') : null;\n\n  return (\n    <li>\n      <ItemLinkWrapper item={item} onClick={onClick}>\n        <div\n          className={`grid grid-cols-1${gridItemDesktopClassnames} border border-solid border-gray-300 relative`}\n        >\n          <div className={`relative${assetWrapperDesktopClassnames}`}>\n            <ItemAssetBlock asset={asset} />\n          </div>\n          <div className=\"p-2.5\">\n            <ItemTitleBlock title={title} courseStartDate={courseStartDate} timeZone={timeZone} />\n            <ItemSourceBlock contentTypeLabel={contentTypeLabel} source={source} />\n            {displayAuthors && <p className=\"text-xs mb-1 text-gray-700\">{displayAuthors}</p>}\n            {description && (\n              <p className=\"mt-4 text-xs relative before:content-[' '] before:border-text-accent before:border-t-2 before:absolute before:left-0 before:border-solid before:w-8 before:h-0 before:-top-1.5\">\n                {limitText(description, 150)}\n              </p>\n            )}\n            <div className={`text-base leading-none flex${addToQueueClassnames}`}>\n              {canAddToQueue && (\n                <p className=\"-mb-1.5 mt-2 text-xs bottom-0\">\n                  <ItemQueueButton item={item} onClickAsync={onAddedToQueue} />\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </ItemLinkWrapper>\n    </li>\n  );\n};\n\nContentTileDescriptiveLayout.displayName = 'ContentTileDescriptiveLayout';\nContentTileDescriptiveLayout.Item = Item;\n\nexport default ContentTileDescriptiveLayout;\n","import React, { Children, createContext, useContext, useMemo } from 'react';\nimport clsx from 'clsx';\nimport { formatTime } from '@thoughtindustries/content';\nimport {\n  FeaturedContentContentProps,\n  FeaturedContentContentItemProps,\n  FeaturedContentMultiCarouselContextType,\n  FeaturedContentHydratedContentItem\n} from '../../types';\nimport ContentWrapper from './wrapper';\nimport ItemLinkWrapper from './item-link-wrapper';\nimport ItemAssetBlock from './item-asset-block';\nimport ItemCompletedBlock from './item-completed-block';\nimport ItemQueueButton from './item-queue-button';\nimport { IconLeft, IconRight } from './icons';\nimport { useMultiCarouselBehavior } from '@thoughtindustries/hooks';\nimport { limitText } from './utils';\n\nconst ContentMultiCarouselContext = createContext<\n  FeaturedContentMultiCarouselContextType | undefined\n>(undefined);\n\nfunction useContentMultiCarouselContext() {\n  const context = useContext(ContentMultiCarouselContext);\n  if (!context) {\n    throw new Error('No context found for ContentMultiCarouselContext');\n  }\n  return context;\n}\n\nconst ContentMultiCarousel = ({\n  headerOptions = {},\n  desktopColumnCount,\n  children,\n  onAddedToQueue,\n  onClick\n}: FeaturedContentContentProps): JSX.Element => {\n  const totalItems = Children.count(children);\n\n  const { scrollableRef, hasPrevItem, hasNextItem, navigate } =\n    useMultiCarouselBehavior<HTMLUListElement>({\n      desktopColumnCount,\n      itemCount: totalItems\n    });\n\n  const value = useMemo(\n    () => ({\n      desktopColumnCount,\n      onAddedToQueue,\n      onClick\n    }),\n    [desktopColumnCount, onAddedToQueue, onClick]\n  );\n\n  const styles = {\n    touchAction: 'none'\n  };\n  const navBtnBaseClassNames =\n    'no-underline font-normal cursor-pointer p-0 text-center text-gray-600 top-2/4 absolute';\n  const prevNavClassNames = `${navBtnBaseClassNames} left-0`;\n  const nextNavClassNames = `${navBtnBaseClassNames} right-0`;\n\n  return (\n    <ContentMultiCarouselContext.Provider value={value}>\n      <ContentWrapper headerOptions={headerOptions}>\n        <div className=\"whitespace-nowrap overflow-hidden relative\">\n          <ul ref={scrollableRef} style={styles} className=\"transition-all duration-500 flex\">\n            {children}\n          </ul>\n          {hasPrevItem && (\n            <button className={prevNavClassNames} onClick={() => navigate(-1)} aria-label=\"left\">\n              <IconLeft />\n            </button>\n          )}\n          {hasNextItem && (\n            <button className={nextNavClassNames} onClick={() => navigate(1)} aria-label=\"right\">\n              <IconRight />\n            </button>\n          )}\n        </div>\n      </ContentWrapper>\n    </ContentMultiCarouselContext.Provider>\n  );\n};\n\nconst ItemTitleBlock = ({\n  title,\n  courseStartDate,\n  timeZone\n}: {\n  title?: string;\n  courseStartDate?: string;\n  timeZone?: string;\n}) => (\n  <>\n    {title && <h4 className=\"text-sm font-bold mb-2\">{title}</h4>}\n    {courseStartDate && (\n      <div className=\"text-xs text-gray-700 mb-1.5\">\n        {formatTime(courseStartDate, timeZone, 'MM/DD/YYYY')}\n      </div>\n    )}\n  </>\n);\n\nconst ItemSourceBlock = ({\n  contentTypeLabel,\n  source\n}: {\n  contentTypeLabel?: string;\n  source?: string;\n}) => (\n  <p className=\"text-xs text-gray-700 mb-1.5\">\n    {contentTypeLabel && <strong>{contentTypeLabel}</strong>}\n    {contentTypeLabel && source && <>|{source}</>}\n    {!contentTypeLabel && source && <strong>{source}</strong>}\n  </p>\n);\n\n/**\n * in tailwind JIT mode, dynamic values like `md:w-1/${count}` are not supported.\n * use static complete strings instead.\n * @param desktopColumnCount\n * @returns\n */\nconst itemClassnameByDesktopColumnCount = (desktopColumnCount: number): string => {\n  switch (desktopColumnCount) {\n    case 2:\n      return 'md:w-1/2';\n    case 3:\n      return 'md:w-1/3';\n    case 4:\n      return 'md:w-1/4';\n    case 5:\n      return 'md:w-1/5';\n  }\n  return '';\n};\n\nconst Item = ({ ...item }: FeaturedContentContentItemProps): JSX.Element => {\n  const { asset, title, description } = item;\n  const {\n    courseStartDate,\n    contentTypeLabel,\n    source,\n    authors,\n    canAddToQueue,\n    isCompleted,\n    timeZone\n  } = item as FeaturedContentHydratedContentItem;\n  const { onAddedToQueue, onClick, desktopColumnCount } = useContentMultiCarouselContext();\n\n  const classNames = clsx([\n    'px-5 pb-5 text-base flex-none w-full',\n    itemClassnameByDesktopColumnCount(desktopColumnCount)\n  ]);\n  const displayAuthors = authors?.length ? authors.join(', ') : null;\n\n  return (\n    <li className={classNames}>\n      <ItemLinkWrapper item={item} onClick={onClick}>\n        <div className=\"border-r-2 border-solid border-white relative bg-gray-100\">\n          <div className=\"relative\">\n            {isCompleted && <ItemCompletedBlock />}\n            <ItemAssetBlock asset={asset} classNames=\"p-2.5 pb-0\" />\n          </div>\n          <div className=\"text-center py-3 px-1\">\n            <ItemTitleBlock title={title} courseStartDate={courseStartDate} timeZone={timeZone} />\n            <ItemSourceBlock contentTypeLabel={contentTypeLabel} source={source} />\n            {displayAuthors && <p className=\"text-xs mb-1 text-gray-700\">{displayAuthors}</p>}\n            {description && (\n              <p className=\"mt-1.5 mb-0 text-xs relative text-left py-0 px-2\">\n                {limitText(description, 150)}\n              </p>\n            )}\n            {canAddToQueue && (\n              <p className=\"text-xs text-gray-700 text-left mt-1.5 mr-0 -mb-1.5 ml-1.5\">\n                <ItemQueueButton item={item} onClickAsync={onAddedToQueue} />\n              </p>\n            )}\n          </div>\n        </div>\n      </ItemLinkWrapper>\n    </li>\n  );\n};\n\nContentMultiCarousel.displayName = 'ContentMultiCarousel';\nContentMultiCarousel.Item = Item;\n\nexport default ContentMultiCarousel;\n","import React, { Children, createContext, useContext, useMemo } from 'react';\nimport {\n  FeaturedContentContentCarouselProps,\n  FeaturedContentContentItemProps,\n  FeaturedContentCarouselContextType\n} from '../../types';\nimport ContentWrapper from './wrapper';\nimport ItemLinkWrapper from './item-link-wrapper';\nimport ItemAssetBlock from './item-asset-block';\nimport { IconLeft, IconRight } from './icons';\nimport { useCarouselBehavior } from '@thoughtindustries/hooks';\nimport { limitText } from './utils';\n\nconst ContentCarouselContext = createContext<FeaturedContentCarouselContextType | undefined>(\n  undefined\n);\n\nfunction useContentCarouselContext() {\n  const context = useContext(ContentCarouselContext);\n  if (!context) {\n    throw new Error('No context found for ContentCarouselContext');\n  }\n  return context;\n}\n\nconst ItemDot = ({ isActive }: { isActive: boolean }): JSX.Element => {\n  const activeClassname = isActive ? ' bg-accent' : ' bg-gray-600';\n  return <div className={`rounded-full inline-block mr-1 h-1 w-1${activeClassname}`}></div>;\n};\n\nconst ContentCarousel = ({\n  headerOptions = {},\n  children,\n  onClick\n}: FeaturedContentContentCarouselProps): JSX.Element => {\n  const totalItems = Children.count(children);\n\n  const { scrollableRef, hasPrevItem, hasNextItem, navigate, currentPosition } =\n    useCarouselBehavior<HTMLUListElement>({\n      itemCount: totalItems\n    });\n\n  const value = useMemo(\n    () => ({\n      onClick\n    }),\n    [onClick]\n  );\n\n  const styles = {\n    touchAction: 'none'\n  };\n  const navBtnBaseClassNames =\n    'transition-colors relative text-center no-underline inline-block text-accent-contrast bg-accent hover:bg-accent-hover border border-solid border-accent hover:border-accent-hover p-0.5';\n  const enabledBtnClassNames = `${navBtnBaseClassNames} cursor-pointer`;\n  const disabledBtnClassNames = `${navBtnBaseClassNames} cursor-default pointer-events-none opacity-25`;\n  const prevNavClassNames = hasPrevItem ? enabledBtnClassNames : disabledBtnClassNames;\n  const nextNavClassNames = hasNextItem ? enabledBtnClassNames : disabledBtnClassNames;\n\n  return (\n    <ContentCarouselContext.Provider value={value}>\n      <ContentWrapper headerOptions={headerOptions}>\n        <div className=\"whitespace-nowrap overflow-hidden relative\">\n          <ul ref={scrollableRef} style={styles} className=\"transition-all duration-500 m-0 flex\">\n            {children}\n          </ul>\n          <div className=\"absolute text-center left-0 w-full bottom-2\">\n            {Array.from({ length: totalItems }, (v, i) => (\n              <ItemDot key={`dot-${i}`} isActive={currentPosition === i} />\n            ))}\n          </div>\n          <div className=\"absolute bottom-2 right-6\">\n            <button className={prevNavClassNames} onClick={() => navigate(-1)} aria-label=\"left\">\n              <IconLeft />\n            </button>\n            <button className={nextNavClassNames} onClick={() => navigate(1)} aria-label=\"right\">\n              <IconRight />\n            </button>\n          </div>\n        </div>\n      </ContentWrapper>\n    </ContentCarouselContext.Provider>\n  );\n};\n\nconst Item = ({ ...item }: FeaturedContentContentItemProps): JSX.Element => {\n  const { asset, title, description } = item;\n  const { onClick } = useContentCarouselContext();\n\n  return (\n    <li className=\"flex-none w-full whitespace-normal text-base\">\n      <ItemLinkWrapper item={item} onClick={onClick}>\n        <div className=\"relative bg-gray-100\">\n          <ItemAssetBlock asset={asset} classNames=\"w-full\" />\n          <div className=\"absolute bottom-0 left-0 w-full p-4 pb-11 bg-gray-900 bg-opacity-60\">\n            <h4 className=\"mb-0 text-base font-bold text-white\">{title}</h4>\n            {description && (\n              <p className=\"mt-1.5 mb-0 text-xs text-white\">{limitText(description, 75)}</p>\n            )}\n          </div>\n        </div>\n      </ItemLinkWrapper>\n    </li>\n  );\n};\n\nContentCarousel.displayName = 'ContentCarousel';\nContentCarousel.Item = Item;\n\nexport default ContentCarousel;\n","import React, { createContext, useContext, useMemo } from 'react';\nimport clsx from 'clsx';\nimport {\n  FeaturedContentContentProps,\n  FeaturedContentContentItemProps,\n  FeaturedContentTileImageOverlayContextType,\n  FeaturedContentHydratedContentItem\n} from '../../types';\nimport { tileClassnameByDesktopColumnCount, limitText } from './utils';\nimport ContentWrapper from './wrapper';\nimport ItemLinkWrapper from './item-link-wrapper';\nimport ItemQueueButton from './item-queue-button';\nimport ItemAssetBlock from './item-asset-block';\n\nconst ContentTileImageOverlayContext = createContext<\n  FeaturedContentTileImageOverlayContextType | undefined\n>(undefined);\n\nfunction useContentTileImageOverlayContext() {\n  const context = useContext(ContentTileImageOverlayContext);\n  if (!context) {\n    throw new Error('No context found for ContentTileImageOverlay');\n  }\n  return context;\n}\n\nconst ContentTileImageOverlay = ({\n  headerOptions = {},\n  desktopColumnCount,\n  children,\n  onAddedToQueue,\n  onClick\n}: FeaturedContentContentProps): JSX.Element => {\n  const value = useMemo(\n    () => ({\n      desktopColumnCount,\n      onAddedToQueue,\n      onClick\n    }),\n    [desktopColumnCount, onAddedToQueue, onClick]\n  );\n\n  return (\n    <ContentTileImageOverlayContext.Provider value={value}>\n      <ContentWrapper headerOptions={headerOptions}>\n        <ul\n          className={clsx([\n            'grid gap-5 grid-cols-1',\n            tileClassnameByDesktopColumnCount(desktopColumnCount)\n          ])}\n        >\n          {children}\n        </ul>\n      </ContentWrapper>\n    </ContentTileImageOverlayContext.Provider>\n  );\n};\n\nconst Item = ({ ...item }: FeaturedContentContentItemProps): JSX.Element => {\n  const { asset, title, description } = item;\n  const { canAddToQueue } = item as FeaturedContentHydratedContentItem;\n  const { onAddedToQueue, onClick } = useContentTileImageOverlayContext();\n\n  return (\n    <li>\n      <ItemLinkWrapper item={item} onClick={onClick}>\n        <div className=\"relative\">\n          <ItemAssetBlock asset={asset} />\n          <div className=\"absolute bottom-0 left-0 p-4 w-full bg-gray-900 bg-opacity-80\">\n            <h4 className=\"mb-0 text-sm text-white\">{title}</h4>\n            {description && (\n              <p className=\"mt-1 mb-0 text-xs text-white\">{limitText(description, 150)}</p>\n            )}\n            {canAddToQueue && (\n              <p className=\"mt-1 -mb-1 text-xs text-white text-left\">\n                <ItemQueueButton\n                  item={item}\n                  onClickAsync={onAddedToQueue}\n                  classNames=\"hover:text-gray-600\"\n                />\n              </p>\n            )}\n          </div>\n        </div>\n      </ItemLinkWrapper>\n    </li>\n  );\n};\n\nContentTileImageOverlay.displayName = 'ContentTileImageOverlay';\nContentTileImageOverlay.Item = Item;\n\nexport default ContentTileImageOverlay;\n"],"names":["SidebarPosition","FeaturedContent","sidebar","sidebarPosition","children","wrappedSidebar","jsx","wrappedChildren","jsxs","SidebarWrapper","title","Header","SidebarRss","feedUrl","t","useTranslation","data","loading","error","useRssItemsQuery","content","Fragment","title2","link","index","SidebarDefault","tileClassnameByDesktopColumnCount","desktopColumnCount","limitText","text","maxLength","ContentWrapper","headerOptions","restHeaderProps","ItemLinkWrapper","onClick","item","isActive","href","linkOpenInNewTab","itemIsActiveOrWebinarOrEvent","handleClick","useCallback","evt","linkProps","IconLeft","IconRight","PlusIcon","CheckCircleIcon","ItemQueueButton","onClickAsync","classNames","isLoading","setIsLoading","useState","wasAddedToQueue","setWasAddedToQueue","btnClassNames","clsx","ItemAssetBlock","asset","ItemCompletedBlock","ContentTileStandardLayoutContext","createContext","useContentTileStandardLayoutContext","context","useContext","ContentTileStandardLayout","onAddedToQueue","value","useMemo","ItemTitleBlock","courseStartDate","timeZone","formatTime","ItemSourceBlock","contentTypeLabel","source","Star","marked","Stars","gradePercentage","stars","remainder","v","i","ItemRibbon","ribbon","attached","contrastColor","color","darkerColor","label","ItemCtaBlock","callToAction","ItemPriceBlock","priceInCents","hasAvailability","suggestedRetailPriceInCents","formatter","priceFormat","priceInCents2","Item","description","isCompleted","authors","rating","canAddToQueue","columnCountIsOneOrTwo","gridItemDesktopClassnames","assetWrapperDesktopClassnames","displayAuthors","ContentTileDescriptiveLayoutContext","useContentTileDescriptiveLayoutContext","ContentTileDescriptiveLayout","addToQueueClassnames","ContentMultiCarouselContext","useContentMultiCarouselContext","ContentMultiCarousel","totalItems","Children","scrollableRef","hasPrevItem","hasNextItem","navigate","useMultiCarouselBehavior","styles","navBtnBaseClassNames","prevNavClassNames","nextNavClassNames","itemClassnameByDesktopColumnCount","ContentCarouselContext","useContentCarouselContext","ItemDot","ContentCarousel","currentPosition","useCarouselBehavior","enabledBtnClassNames","disabledBtnClassNames","ContentTileImageOverlayContext","useContentTileImageOverlayContext","ContentTileImageOverlay"],"mappings":"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"}