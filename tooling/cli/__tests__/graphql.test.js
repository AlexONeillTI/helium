const path = require('path');
const {
  gatherQuerySources,
  buildFragmentMap,
  transformDoc,
  hashQuery
} = require('./../lib/helpers/graphql');
const util = require('util');
const { parse, visit } = require('graphql/language');
const { print } = require('graphql/language/printer');
const { ContentFragmentTest } = require('./test-query-files/ContentFragment');
/**
 * Note, `expectedHash` is taken from hashes generated by Apollo Client
 * when making requests utilizing queries idential to the ones from the test files.
 *
 * https://github.com/thoughtindustries/helium/blob/c1d6910f3d85f515e1a5345675145c9736fc3e27/tooling/template-base/lib/init-page-context.js#L40
 */

describe('@thoughtindustries/tooling/cli/helpers/graphql', () => {
  describe('buildFragmentMap', () => {
    it('builds a map of fragments contained in an array of query sources', async () => {
      const querySources = await getQuerySources([
        './test-query-files/QueryWithFragment.js',
        './test-query-files/ContentFragment.js'
      ]);

      const fragmentMap = buildFragmentMap(querySources);

      expect(print(fragmentMap['ContentFragmentTest']).trim()).toEqual(
        print(ContentFragmentTest).trim()
      );
    });
  });

  describe('transformDoc', () => {
    it('adds typenames to queries when they are not included', async () => {
      const querySources = await getQuerySources(['./test-query-files/QueryNoTypename.js']);
      const fragmentMap = buildFragmentMap(querySources);
      const modifiedDoc = transformDoc(querySources[0], fragmentMap);
      const { hash } = hashQuery(modifiedDoc);

      const expectedHash = '6231d0c14c8dfa33710f4c1e651cd7dfafa8056fcc9bb1fc10aea3800fcf29a4';
      expect(hash).toEqual(expectedHash);
    });

    it('adds FragmentDefintion to Document definitions when FragmentSpread is included in SelectionSet', async () => {
      const querySources = await getQuerySources([
        './test-query-files/QueryWithFragment.js',
        './test-query-files/ContentFragment.js'
      ]);

      const fragmentMap = buildFragmentMap(querySources);
      const modifiedDoc = transformDoc(querySources[0], fragmentMap);
      const { hash } = hashQuery(modifiedDoc);

      const expectedHash = 'c62e6b8b8013beec5401dd79fb158011100bc13e4bd571fb7652321f8263caa2';
      expect(hash).toEqual(expectedHash);
    });
  });
});

async function getQuerySources(filePaths) {
  const resolvedFilePaths = [...filePaths.map(filePath => path.resolve(__dirname, filePath))];
  return gatherQuerySources(resolvedFilePaths);
}
